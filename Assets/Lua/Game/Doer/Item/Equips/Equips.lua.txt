---@class Equips
local Equips = Class("Equips")
------------------------装备容器------------------------------
function Equips:Init(parentDoer, subDoerKey)
	---@type Critter
	self.parentDoer = parentDoer
	self.subDoerKey = subDoerKey
end
------------------------DoXXX--------------------------------
-- 卸载
function Equips:DoRelease()
	SubDoerUtil1.DoReleaseSubDoer(self.parentDoer, self.subDoerKey)
end

-- 保存
function Equips:DoSave(dict, dictTmp, saveKey)
	saveKey = saveKey or "equips"
	local equips = self:GetEquips()
	local dictEquips = {}
	local dictEquipsTmp = {}
	for i = 1, #equips do
		local equip = equips[i]
		if equip:CanFold() then
			-- 可折叠
			table.insert(dictEquips, equip:GetId())
		else
			-- 不可折叠，需存储数据
			local dictEquip = {}
			local dictEquipTmp = {}
			local rid = equip:GetRid()
			equip:PrepareSave(dictEquip, dictEquipTmp)
			dictEquip["rid"] = rid
			table.insert(dictEquips, dictEquip)
			if not table.IsNilOrEmpty(dictEquipTmp) then
				dictEquipsTmp[rid] = dictEquipTmp
			end
		end
		dict[saveKey] = table.GetNilIfEmpty(dictEquips)
		dictTmp[saveKey] = table.GetNilIfEmpty(dictEquipsTmp)
	end
end

-- 还原
function Equips:DoRestore(dict, dictTmp, restoreKey)
	restoreKey = restoreKey or "equips"
	self:ClearEquips()
	local dictEquips = table.Remove_Dict(dict, restoreKey)
	local dictEquipsTmp = table.Remove_Dict(dictTmp, restoreKey)
	local equips = self:GetEquips_ToEdit()
	if not table.IsNilOrEmpty(dictEquips) then
		for _, value in ipairs(dictEquips) do
			---@type Item
			local item
			if IsString(value) then
				-- id情况，可折叠的装备
				local id = value
				item = global.client.itemFactory:NewDoer(id)
			else
				-- 不可折叠的情况
				local dictEquip = value
				local rid = table.Remove_Dict(dictEquip, "rid")
				item = global.client.itemFactory:NewDoer(rid)
				item:SetEnv(self.parentDoer)
				local dictEquipTmp
				if dictEquipsTmp then
					dictEquipTmp = dictEquipsTmp[rid]
				end
				item:FinishRestore(dictEquip, dictEquipTmp)
			end
			item:SetEnv(self.parentDoer)
			item:SetIsPutOn(true)
			table.insert(equips, item)
		end
	end
end
--------------------------OnXXX-------------------

---------------------------------------------
-- 获得指定的装备
---@param id string
---@return Item[]
function Equips:GetEquips(id)
	return SubDoerUtil1.GetSubDoers(self.parentDoer, self.subDoerKey, id)
end

---@return Item[]
function Equips:GetEquips_ToEdit()
	-- 可以直接插入删除
	return SubDoerUtil1.GetSubDoers_ToEdit(self.parentDoer, self.subDoerKey)
end

-- 是否有装备
function Equips:HasEquips()
	return SubDoerUtil1.HasSubDoers(self.parentDoer, self.subDoerKey)
end

function Equips:GetEquipsCount()
	return SubDoerUtil1.GetSubDoersCount(self.parentDoer, self.subDoerKey)
end

---@param equip Item
---@param type1 string
---@param type2 string
function Equips:__FilterType(equip, type1, type2)
	if equip:GetType1() == type1 and (not type2 or type2 == equip:GetType2()) then
		return true
	end
end

-- 获得指定种类的装备
---@param type1 string
---@param type2 string
---@return Item[]
function Equips:GetEquipsOfTypes(type1, type2)
	return SubDoerUtil1.GetSubDoers(self.parentDoer, self.subDoerKey, nil, function(equip)
		return self:__FilterType(equip, type1, type2)
	end)
end

-- 是否有指定种类装备
---@param type1 string
---@param type2 string
function Equips:HasEquipsOfTypes(type1, type2)
	return SubDoerUtil1.HasSubDoers(self.parentDoer, self.subDoerKey, nil, function(equip)
		self:__FilterType(equip, type1, type2)
	end)
end

---@param type1 string
---@param type2 string
function Equips:GetEquipsCountOfTypes(type1, type2)
	return SubDoerUtil1.GetSubDoersCount(self.parentDoer, self.subDoerKey, nil, function(equip)
		self:__FilterType(equip, type1, type2)
	end)
end



-- 获得指定的装备
---@param idOrRid string
---@return Item
function Equips:GetEquip(idOrRid)
	return SubDoerUtil1.GetSubDoer(self.parentDoer, self.subDoerKey, idOrRid)
end


-- 获得指定的装备
---@param type1 string
---@param type2 string
---@return Item
function Equips:GetEquipOfTypes(type1, type2)
	local equips = self:GetEquipsOfTypes(type1, type2)
	if equips then
		return equips[1]
	end
end

-- 清除所有装备
function Equips:ClearEquips()
	return SubDoerUtil1.ClearSubDoers(self.parentDoer, self.subDoerKey, function(equip)
		self.parentDoer:TakeOffEquip(equip)
	end)
end

return Equips