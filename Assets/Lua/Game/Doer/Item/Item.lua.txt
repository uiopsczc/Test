---@class Item:Thing
local Item = Class("Item", Thing)

function Item:OnInit()
	Item.super.OnInit(self)
	self:SetCount(1)
	---@type Embeds
	self._oEmbeds = Embeds.New(self, "o_embeds")
end

function Item:GetCfgItemData()
	return CfgItem.GetById(self:GetId())
end

----------------------------------------------------------------------
-- DoXXX
----------------------------------------------------------------------
-- 卸载
function Item:DoRelease()
	--销毁镶物
	self._oEmbeds:DoRelease()
	Item.super.DoRelease(self)
end

-- 保存
function Item:DoSave(dict, dictTmp)
	Item.super.DoSave(self, dict, dictTmp)
	-- 存储镶物
	self._oEmbeds:DoSave(dict, dictTmp)
end

-- 还原
function Item:DoRestore(dict, dictTmp)
	-- 导还原镶物
	self._oEmbeds:DoRestore(dict, dictTmp)
	Item.super.DoRestore(self, dict, dictTmp)
end

----------------------------------------------------------------------
-- OnXXX
----------------------------------------------------------------------
function Item:OnCheckUseItem(critter)
	return true
end

function Item:OnUseItem(critter)
	return true
end

----------------------------------------------------------------------
-- 镶物容器
----------------------------------------------------------------------
-- 获得指定的镶物
---@return Item[]
function Item:GetEmbeds(id)
	return self._oEmbeds:GetEmbeds(id)
end

-- 是否有镶物
function Item:IsHasEmbeds()
	return self._oEmbeds:IsHasEmbeds()
end

function Item:GetEmbedsCount()
	return self._oEmbeds:GetEmbedsCount()
end

-- 获得指定的镶物
---@return Item
function Item:GetEmbed(idOrRid)
	return self._oEmbeds:GetEmbed(idOrRid)
end

-- 清除所有镶物
function Item:ClearEmbeds()
	self._oEmbeds:ClearEmbeds()
end

-- 检测镶入镶物
---@param embed Item
function Item:CheckEmbedOn(embed)
	return self:OnCheckEmbedOn(embed) and embed:OnCheckEmbedOn(self)
end

---@param embed Item
function Item:EmbedOn(embed)
	local env = embed:GetEnv()
	if env then
		error2(string.format("%s still in %s", embed, env))
		return false
	end
	local list = self._oEmbeds:GetEmbeds_ToEdit()
	if table.ContainsValue(list, embed) then
		error2(string.format("%s already embed on %s", self, embed))
		return false
	end
	if not (self:OnEmbedOn(embed) and embed:OnEmbedOn(self)) then
		return false
	end
	embed:SetEnv(self)
	table.insert(list, embed)

	return true
end


-- 检测卸下镶物
---@param embed Item
function Item:CheckEmbedOff(embed)
	return self:OnCheckEmbedOff(embed) and embed:OnCheckEmbedOff(self)
end

-- 卸下镶物
---@param embed Item
function Item:EmbedOff(embed)
	local list = self._oEmbeds:GetEmbeds_ToEdit()
	if not table.ContainsValue(list, embed) then
		error2(string.format("%s not contains embed:%s", self, embed))
		return false
	end
	if not (self:OnEmbedOff(embed) and embed:OnEmbedOff(self)) then
		return false
	end
	table.RemoveByValue_Array(list, embed)
	embed:SetEnv(nil)
	return true
end

----------------------------------------------------------------------
-- OnXXX
----------------------------------------------------------------------
function Item:OnCheckEmbedOn(embed)
	return true
end

function Item:OnEmbedOn(embed)
	return true
end

function Item:OnCheckEmbedOff(embed)
	return true
end

function Item:OnEmbedOff(embed)
	return true
end

----------------------------------------------------------------------
-- 装备
----------------------------------------------------------------------
----------------------------------------------------------------------
-- OnXXX
----------------------------------------------------------------------
function Item:OnCheckPutOnEquip(critter)
	return true
end

function Item:OnPutOnEquip(critter)
	return true
end

function Item:OnCheckTakeOffEquip(critter)
	return true
end

function Item:OnTakeOffEquip(critter)
	return true
end

----------------------------------------------------------------------
-- Util
----------------------------------------------------------------------
function Item:IsWeapon()
	return self:IsType1(ItemConst.Item_Type1_Weapon)
end

function Item:IsArmor()
	return self:IsType1(ItemConst.Item_Type1_Armor)
end

function Item:IsEmb()
	return self:IsType1(ItemConst.Item_Type1_Embed)
end

function Item:IsEquip()
	return self:IsWeapon() or self:IsArmor()
end

function Item:IsType1(type_1)
	return type_1 == self:GetType1()
end

function Item:IsType2(type_2)
	return type_2 == self:GetType2()
end

function Item:IsPutOn()
	return self:GetTmp("o_isPutOn")
end

function Item:SetIsPutOn(isPutOn)
	return self:SetTmp("o_isPutOn", isPutOn)
end

function Item:GetType1()
	return self:GetCfgItemData().type1
end

function Item:GetType2()
	return self:GetCfgItemData().type2
end

function Item:IsCanFold()
	return self:GetCfgItemData().isCanFold
end

function Item:GetName()
	return self:GetCfgItemData().name
end

return Item