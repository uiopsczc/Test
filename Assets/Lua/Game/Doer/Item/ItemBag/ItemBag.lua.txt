---@class ItemBag
local ItemBag = Class("ItemBag")
----------------------------------------------------------------------
-- 背包容器
----------------------------------------------------------------------
function ItemBag:Init(parentDoer, subDoerKey)
	---@type Critter
	self._parentDoer = parentDoer
	self._subDoerKey = subDoerKey
end
----------------------------------------------------------------------
-- DoXXX
----------------------------------------------------------------------
-- 卸载
function ItemBag:DoRelease()
	SubDoerUtil2.ClearSubDoers(self._parentDoer, self._subDoerKey)
end

-- 保存
function ItemBag:DoSave(dict, dictTmp, saveKey)
	saveKey = saveKey or "itemBag"
	local items = self:GetItems()
	local dictItems = {}
	local dictItemsTmp = {}
	for _, item in ipairs(items) do
		local id = item:GetId()
		local rid = item:GetRid()
		local isCanFold = item:IsCanFold()
		if isCanFold then
			-- 可折叠
			dictItems[id] = item:GetCount()
		else
			local dictItemList = table.GetOrAddDefault_Dict(dictItems, id, function()
				return {}
			end)
			local dictItem = {}
			local dictItemTmp = {}
			item:PrepareSave(dictItem, dictItemTmp)
			dictItem["rid"] = rid
			table.insert(dictItemList, dictItem)
			if not table.IsNilOrEmpty(dictItemTmp) then
				dictItemsTmp[rid] = dictItemTmp
			end
		end
	end
	dict[saveKey] = table.GetNilIfEmpty(dictItems)
	dictTmp[saveKey] = table.GetNilIfEmpty(dictItemsTmp)
end

-- 还原
---@param doer Doer
function ItemBag:DoRestore(dict, dictTmp, restoreKey)
	restoreKey = restoreKey or "itemBag"
	self:ClearItems()
	local dictItems = table.Remove_Dict(dict, restoreKey)
	local dictItemsTmp = table.Remove_Dict(dictTmp, restoreKey)
	if not table.IsNilOrEmpty(dictItems) then
		for id, value in pairs(dictItems) do
			---@type Item
			local item
			local items = self:GetItems_ToEdit(id)
			if IsNumber(value) then
				-- id情况，可折叠的item
				local count = value
				item = global.client.itemFactory:NewDoer(id)
				item:SetEnv(self._parentDoer)
				item:SetCount(count)
				table.insert(items, item)
			else
				-- 不可折叠的情况
				local dictItemList = value
				for _, dictItem in ipairs(dictItemList) do
					local rid = table.Remove_Dict(dictItem, "rid")
					item = global.client.itemFactory:NewDoer(rid)
					item:SetEnv(self._parentDoer)
					local dictItemTmp
					if dictItemsTmp then
						dictItemTmp = dictItemsTmp[rid]
					end
					item:FinishRestore(dictItem, dictItemTmp)
					table.insert(items, item)
				end
			end
		end
	end
end
----------------------------------------------------------------------
-- OnXXX
----------------------------------------------------------------------
---@param item Item
---@param type1 string
---@param type2 string
function ItemBag:_FilterType(item, type1, type2)
	if item:GetType1() == type1 and (not type2 or type2 == item:GetType2()) then
		return true
	end
end

---@param id string
---@return Item[]
function ItemBag:GetItems(id)
	return SubDoerUtil2.GetSubDoers(self._parentDoer, self._subDoerKey, id)
end

-- 可以直接插入删除
---@param id string
---@return Item[]
function ItemBag:GetItems_ToEdit(id)
	return SubDoerUtil2.GetSubDoers_ToEdit(self._parentDoer, self._subDoerKey, id)
end

---@param idOrRid string
---@return Item
function ItemBag:GetItem(idOrRid)
	return SubDoerUtil2.GetSubDoer(self._parentDoer, self._subDoerKey, idOrRid)
end

---@param type1 string
---@param type2 string
---@return Item[]
function ItemBag:GetItemsOfTypes(type1, type2)
	return SubDoerUtil2.GetSubDoers(self._parentDoer, self._subDoerKey, nil, function(item)
		return self:_FilterType(item, type1, type2)
	end)
end

---@return string[]
function ItemBag:GetItemIds()
	return SubDoerUtil2.GetSubDoerIds(self._parentDoer, self._subDoerKey)
end

---@param id string
function ItemBag:GetItemCount(id)
	return SubDoerUtil2.GetSubDoerCount(self._parentDoer, self._subDoerKey, id)
end

---@param id string
function ItemBag:HasItem(id)
	return SubDoerUtil2.HasSubDoers(self._parentDoer, self._subDoerKey, id)
end

-- 放入物品
-- 对于可折叠物品则会替代已存在的物品对象并数量叠加
-- 对于不可折叠物品则直接加入到对象列表
---@param id string
---@param count number
---@return Item[]
function ItemBag:AddItems(id, count)
	local cfgItemData = CfgItem.GetById(id)
	local isCanFold = cfgItemData.isCanFold
	local item
	local result = {}
	if isCanFold then
		item = global.client.itemFactory:NewDoer(id)
		item:SetCount(count)
		self:AddItem(item)
		table.insert(result, item)
	else
		for i = 1, count do
			item = global.client.itemFactory:NewDoer(id)
			self:AddItem(item)
			table.insert(result, item)
		end
	end
	return result
end

---@param item Item
function ItemBag:AddItem(item)
	SubDoerUtil2.AddSubDoers(self._parentDoer, self._subDoerKey, item)
end

---@param id string
---@param count number
---@return Item[]
function ItemBag:RemoveItems(id, count)
	return SubDoerUtil2.RemoveSubDoers(self._parentDoer, self._subDoerKey, id, count, global.client.itemFactory)
end

---@param id string
---@param count number
function ItemBag:CanRemoveItems(id, count)
	return SubDoerUtil2.IsCanRemoveSubDoers(self._parentDoer, self._subDoerKey, id, count)
end

---@param itemOrRid Item|string
---@return Item
function ItemBag:RemoveItem(itemOrRid)
	return SubDoerUtil2.RemoveSubDoer(self._parentDoer, self._subDoerKey, itemOrRid)
end

function ItemBag:ClearItems()
	SubDoerUtil2.ClearSubDoers(self._parentDoer, self._subDoerKey)
end

return ItemBag