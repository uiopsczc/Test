---@class Roles
local Roles = Class("Roles")
----------------------------------------------------------------------
-- 装备容器
----------------------------------------------------------------------
function Roles:Init(parentDoer, subDoerKey)
	---@type Doer
	self._parentDoer = parentDoer
	self._subDoerKey = subDoerKey
end
----------------------------------------------------------------------
-- DoXXX
----------------------------------------------------------------------
-- 卸载
function Roles:DoRelease()
	SubDoerUtil1.DoReleaseSubDoer(self._parentDoer, self._subDoerKey)
end

-- 保存
function Roles:DoSave(dict, dictTmp, saveKey)
	saveKey = saveKey or "roles"
	local roles = self:GetRoles()
	local dictRoles = {}
	local dictRolesTmp = {}
	for i = 1, #roles do
		local dictRole = {}
		local dictRoleTmp = {}
		local role = roles[i]
		local rid = role:GetRid()
		role:PrepareSave(dictRole, dictRoleTmp)
		dictRole["rid"] = rid
		table.insert(dictRoles, dictRole)
		if not table.IsNilOrEmpty(dictRoleTmp) then
			dictRolesTmp[rid] = dictRoleTmp
		end
	end
	dict[saveKey] = table.GetNilIfEmpty(dictRoles)
	dictTmp[saveKey] = table.GetNilIfEmpty(dictRolesTmp)
end

-- 还原
function Roles:DoRestore(dict, dictTmp, restoreKey)
	restoreKey = restoreKey or "roles"
	self:ClearRoles()
	local dictRoles = table.Remove_Dict(dict, restoreKey)
	local dictRolesTmp = table.Remove_Dict(dictTmp, restoreKey)
	if not table.IsNilOrEmpty(dictRoles) then
		local roles = self:GetRoles_ToEdit()
		for _, dictRole in ipairs(dictRoles) do
			local rid = table.Remove_Dict(dictRole, "rid")
			local role = global.client.roleFactory:NewDoer(rid)
			role:SetEnv(self._parentDoer)
			local dictRoleTmp
			if dictRolesTmp then
				dictRoleTmp = dictRolesTmp[rid]
			end
			role:FinishRestore(dictRole, dictRoleTmp)
			table.insert(roles, role)
		end
	end
end
----------------------------------------------------------------------
-- OnXXX
----------------------------------------------------------------------
-- 获得指定的角色
---@param id string
---@return Role[]
function Roles:GetRoles(id)
	return SubDoerUtil1.GetSubDoers(self._parentDoer, self._subDoerKey, id)
end

---@return Role[]
function Roles:GetRoles_ToEdit()
	-- 可以直接插入删除
	return SubDoerUtil1.GetSubDoers_ToEdit(self._parentDoer, self._subDoerKey)
end

function Roles:GetRolesCount()
	return SubDoerUtil1.GetSubDoersCount(self._parentDoer, self._subDoerKey)
end

-- 获得指定的角色
---@param idOrRid string
---@return Role
function Roles:GetRole(idOrRid)
	return SubDoerUtil1.GetSubDoer(self._parentDoer, self._subDoerKey, idOrRid)
end

-- 清除所有角色
function Roles:ClearRoles()
	return SubDoerUtil1.ClearSubDoers(self._parentDoer, self._subDoerKey, function(role)
		self._parentDoer:RemoveRole(role)
	end)
end

return Roles