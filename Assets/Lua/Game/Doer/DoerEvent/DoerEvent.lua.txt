---@class DoerEvent:Doer
local DoerEvent = Class("DoerEvent", Doer)

function DoerEvent:GetCfgDoerEventData()
	return CfgDoerEvent.get_by_id(self:GetId())
end

function DoerEvent:Execute(desc, owner, doerAttrParser)
	if not self:CheckDoerEventTriggerCondition(doerAttrParser) then
		return false
	end
	local cfgDoerEventData = self:GetCfgDoerEventData()
	local isNotTalk = cfgDoerEventData.isNotTalk -- 不弹出talk
	--通用情况
	local triggerDesc = cfgDoerEventData.triggerDesc
	local wordList = {}
	if not string.IsNilOrWhiteSpace(triggerDesc) then
		table.insert(wordList, doerAttrParser:ParseString(triggerDesc))
	end
	local ok = 1 -- 0-触发条件失败，1-触发成功，执行失败，2-触发成功，执行成功
	local stepIds = cfgDoerEventData.stepIds
	if not table.IsNilOrEmpty(stepIds) then
		for i = 1, table.Count(stepIds) do
			local stepId = stepIds[i]
			local cfgDoerEventStepData = CfgDoerEventStep.get_by_id(stepId)
			ok = self:ExecuteStep(desc .. "步骤" .. i, stepId, owner, doerAttrParser, wordList)
			if ok == 0 then
				break
			elseif ok == 2 and cfgDoerEventStepData.isStopHere then
				break
			end
		end
	end
	if not isNotTalk and not table.IsNilOrEmpty(wordList) then
		for _, word in ipairs(wordList) do
			global.client.uiManager:Notify(word)
		end
	end
	return ok > 0
end

---@param doerAttrParser  DoerAttrParser
function DoerEvent:CheckDoerEventTriggerCondition(doerAttrParser)
	local cfgDoerEventData = CfgDoerEvent.get_by_id(self:GetId())
	local isNotTalk = cfgDoerEventData.isNotTalk -- 不弹出talk
	local triggerCondition = cfgDoerEventData.triggerCondition -- 触发条件
	if not string.IsNilOrWhiteSpace(triggerCondition) and not doerAttrParser:ParseBoolean(triggerCondition) then
		--不满足触发的情况
		if not isNotTalk then
			local isCanNotTriggerDesc = cfgDoerEventData.isCanNotTriggerDesc
			if string.IsNilOrWhiteSpace(isCanNotTriggerDesc) then
				global.client.uiManager:Notify(global.Lang.GetText("现在不能触发此操作"))
			else
				global.client.uiManager:Notify(doerAttrParser:ParseString(isCanNotTriggerDesc))
			end
		end
		return false
	end
	return true
end

---@param doerAttrParser  DoerAttrParser
function DoerEvent:ExecuteStep(desc, doerEventStepId, owner, doerAttrParser, wordList)
	local cfgDoerEventStepData = CfgDoerEventStep.get_by_id(doerEventStepId)
	local triggerCondition = cfgDoerEventStepData.trigger_condition -- 触发条件
	if not string.IsNilOrWhiteSpace(triggerCondition) and not doerAttrParser:ParseBoolean(triggerCondition) then
		--不满足触发的情况
		local isCanNotTriggerDesc = cfgDoerEventStepData.isCanNotTriggerDesc
		if string.IsNilOrWhiteSpace(isCanNotTriggerDesc) then
			table.insert(wordList, global.Lang.GetText("现在不能触发此操作"))
		else
			table.insert(wordList, doerAttrParser:ParseString(isCanNotTriggerDesc))
		end
		return 0
	end
	local triggerDesc = cfgDoerEventStepData.triggerDesc -- 触发提示语
	if not string.IsNilOrWhiteSpace(triggerDesc) then
		table.insert(wordList, doerAttrParser:ParseString(triggerDesc))
	end
	local executeCondition = cfgDoerEventStepData.executeCondition -- 执行条件
	if not string.IsNilOrWhiteSpace(executeCondition) and not doerAttrParser:ParseBoolean(executeCondition) then
		--不满足触发的情况
		local isCanNotExecuteDesc = cfgDoerEventStepData.isCanNotExecuteDesc -- 不执行提示语
		if not string.IsNilOrWhiteSpace(isCanNotExecuteDesc) then
			table.insert(wordList, doerAttrParser:ParseString(isCanNotExecuteDesc))
		end
		return 1
	end

	local executeDesc = cfgDoerEventStepData.executeDesc -- 执行提示语
	if not string.IsNilOrWhiteSpace(executeDesc) then
		table.insert(wordList, doerAttrParser:ParseString(executeDesc))
	end
	---@type DoerAttrSetter
	local doerAttrSetter = DoerAttrSetter.New(desc, doerAttrParser)
	-- 设置属性、更改属性
	local setAttrDict = cfgDoerEventStepData.setAttrDict
	if not table.IsNilOrEmpty(setAttrDict) then
		for attrName, attrValue in pairs(setAttrDict) do
			doerAttrSetter:Set(attrName, attrValue, false)
		end
	end
	local addAttrDict = cfgDoerEventStepData.addAttrDict
	if not table.IsNilOrEmpty(addAttrDict) then
		for attrName, attrValue in pairs(addAttrDict) do
			doerAttrSetter:Set(attrName, attrValue, true)
		end
	end

	---@type User
	local user
	if IsInstanceOf(doerAttrParser:GetU(), "User") then
		user = doerAttrParser:GetU()
	elseif IsInstanceOf(doerAttrParser:GetO(), "User") then
		user = doerAttrParser:GetO()
	elseif IsInstanceOf(doerAttrParser:GetE(), "User") then
		user = doerAttrParser:GetE()
	else
		user = global.client.user
	end

	-- 添加或者删除物品
	local dealItemDict = cfgDoerEventStepData.dealItemDict
	if not table.IsNilOrEmpty(dealItemDict) then
		user:DealItems(dealItemDict, doerAttrParser)
	end

	-- 接受任务
	local acceptMissionIds = cfgDoerEventStepData.acceptMissionIds
	if not table.IsNilOrEmpty(acceptMissionIds) then
		for _, acceptMissionId in ipairs(acceptMissionIds) do
			user:AcceptMission(owner, acceptMissionId)
		end
	end


	-- 放弃任务
	local giveUpMissionIds = cfgDoerEventStepData.giveUpMissionIds
	if not table.IsNilOrEmpty(giveUpMissionIds) then
		for _, giveUpMissionId in ipairs(giveUpMissionIds) do
			user:GiveUpMission(giveUpMissionId)
		end
	end

	-- 添加已完成任务
	local addFinishedMissionIds = cfgDoerEventStepData.addFinishedMissionIds
	if not table.IsNilOrEmpty(addFinishedMissionIds) then
		for _, addFinishedMissionId in ipairs(addFinishedMissionIds) do
			user:AddFinishedMissionId(addFinishedMissionId)
		end
	end

	-- 删除已完成任务
	local removeFinishedMissionIds = cfgDoerEventStepData.removeFinishedMissionIds
	if not table.IsNilOrEmpty(removeFinishedMissionIds) then
		for _, removeFinishedMissionId in ipairs(removeFinishedMissionIds) do
			user:RemoveFinishedMissionId(removeFinishedMissionId)
		end
	end

	-- 检测完成任务
	user:CheckAutoFinishMissions()
	return 2
end

return DoerEvent