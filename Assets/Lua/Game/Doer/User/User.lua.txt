---@class User:Critter
---@field _mainRole Role
local User = Class("User", Thing)

function User:Init()
	User.super.Init(self)
	---@type Roles
	self._oRoles = Roles.New(self, "o_roles")
	---@type ItemBag
	self._oItemBag = ItemBag.New(self, "o_itemBag")
	---@type Missions
	self._oMissions = Missions.New(self, "o_missions")
end

----------------------------------------------------------------------
-- DoXXX
----------------------------------------------------------------------
-- 卸载
function User:DoRelease()
	self._oRoles:DoRelease()
	self._oItemBag:DoRelease()
	self._oMissions:DoRelease()
	User.super.DoRelease(self)
end

-- 保存
function User:DoSave(dict, dictTmp)
	User.super.DoSave(self, dict, dictTmp)
	-- 存储角色
	self._oRoles:DoSave(dict, dictTmp)
	-- 存储背包
	self._oItemBag:DoSave(dict, dictTmp)
	-- 存储任务
	self._oMissions:DoSave(dict, dictTmp)
	if self._mainRole then
		dict["mainRoleRid"] = self._mainRole:GetRid()
	end
end

-- 还原
function User:DoRestore(dict, dictTmp)
	-- 还原角色
	self._oRoles:DoRestore(dict, dictTmp)
	-- 还原背包
	self._oItemBag:DoRestore(dict, dictTmp)
	-- 还原任务
	self._oMissions:DoRestore(dict, dictTmp)

	local mainRoleRid = table.Remove_Dict(dict, "mainRoleRid")
	self._mainRole = self:GetRole(mainRoleRid)

	User.super.DoRestore(self, dict, dictTmp)
end

----------------------------------------------------------------------
-- OnXXX
----------------------------------------------------------------------

----------------------------------------------------------------------
-- 角色
----------------------------------------------------------------------
-- 获得指定的角色
---@return Role[]
function User:GetRoles(id)
	return self._oRoles:GetRoles(id)
end

---@return Role[]
function User:GetRoles_ToEdit()
	-- 可以直接插入删除
	return self._oRoles:GetRoles_ToEdit()
end

function User:GetRolesCount()
	return self._oRoles:GetRolesCount()
end

-- 获得指定的角色
---@return Role
function User:GetRole(idOrRid)
	return self._oRoles:GetRole(idOrRid)
end

-- 清除所有角色
function User:ClearRoles()
	self._oRoles:ClearRoles()
end

function User:CheckAddRole(role)
	return self:OnCheckAddRole(role) and role:OnCheckAddRole(self)
end

function User:_AddRole(role)
	local env = role:GetEnv()
	if env then
		error2(string.format("%s still in %s", role, env))
		return false
	end
	local list = self._oRoles:GetRoles_ToEdit()
	if table.ContainsValue(list, role) then
		error2(string.format("%s already has role:%s", self, role))
		return false
	end
	if not (self:OnAddRole(role) and role:OnAddRole(self)) then
		return false
	end
	role:SetEnv(self)
	table.insert(list, role)
	return true
end

function User:CheckRemoveRole(role)
	return self:OnCheckRemoveRole(role) and role:OnCheckRemoveRole(self)
end

function User:_RemoveRole(role)
	local list = self._oRoles:GetRoles_ToEdit()
	if not table.ContainsValue(list, role) then
		error2(string.format("%s not contains role:%s", self, role))
		return false
	end

	if not (self:OnRemoveRole(role) and role:OnRemoveRole(self)) then
		return false
	end
	table.RemoveByValue_Array(list, role)
	role:SetEnv(nil)
	return true
end

----------------------------------------------------------------------
-- OnXXX
----------------------------------------------------------------------
function User:OnCheckAddRole(role)
	return true
end

function User:OnAddRole(role)
	return true
end

function User:OnCheckRemoveRole(role)
	return true
end

function User:OnRemoveRole(role)
	return true
end

----------------------------------------------------------------------
-- Util
----------------------------------------------------------------------
---@return Role
function User:AddRole(idOrRid)
	local role = global.client.roleFactory:NewDoer(idOrRid)
	if not self:CheckAddRole(role) then
		return nil
	end
	if not self:_AddRole(role) then
		role:Destruct()
		return nil
	end
	return role
end

---@return Role
function User:RemoveRole(idOrRid, isNotNeedDestruct)
	local role = self:GetRole(idOrRid)
	if not role then
		error2(string.format("%s do not contain role:%s", self, role))
		return nil
	end
	if not self:CheckRemoveRole(role) then
		return nil
	end
	if not self:_RemoveRole(role) then
		return nil
	end
	if not isNotNeedDestruct then
		role:Destruct()
	end
	return role
end

----------------------------------------------------------------------
-- Mission
----------------------------------------------------------------------
function User:GetMissions(id)
	return self._oMissions:GetMissions(id)
end

-- 可以直接插入删除
function User:GetMissions_ToEdit()
	return self._oMissions:GetMissions_ToEdit()
end

function User:HasMissions()
	return self._oMissions:HasMissions()
end

function User:HasMission(id)
	return self._oMissions:GetMission(id) ~= nil
end

function User:GetMissionsCount()
	return self._oMissions:GetMissionsCount()
end

function User:GetMission(idOrRid)
	return self._oMissions:GetMission(idOrRid)
end

function User:ClearMissions()
	return self._oMissions:ClearMissions()
end

function User:GetFinishedMissionIds()
	return self:GetOrAdd("finishedMissionIds", function()
		return {}
	end)
end

function User:AddFinishedMissionId(missionId)
	table.insert(self:GetFinishedMissionIds(), missionId)
end

function User:RemoveFinishedMissionId(missionId)
	table.RemoveByValue_Array(self:GetFinishedMissionIds(), missionId)
end

-- 接受任务
-- owner 发放任务的npc
function User:AcceptMission(missionOrMissionId, owner)
	if IsString(missionOrMissionId) then
		local mission = global.client.missionFactory:NewDoer(missionOrMissionId)
		self:AcceptMission(mission, owner)
	else
		---@type Mission
		local mission = missionOrMissionId
		local orgEnv = mission:GetOwner()
		if orgEnv then
			error2(string.format("%s still belong to %s", mission:GetShort(), orgEnv:GetShort()))
			mission:Destruct()
			return false
		end

		if self:HasMission(mission:GetId()) then
			error2(string.format("duplicate mission id![%s]", mission:GetShort()))
			mission.Destruct()
			return false
		end

		local missions = self:GetMissions_ToEdit()
		mission:SetEnv(self)
		mission:SetOwner(owner)
		table.insert(missions, mission)
		if not mission:OnAccept(self) then
			mission:Destruct()
			table.RemoveByValue_Array(missions, mission) -- 失败，减回去
		end
		-- 检测完成任务
		self:CheckAutoFinishMissions()
	end
end

function User:FinishMission(missionOrMissionId, owner)
	if IsString(missionOrMissionId) then
		self:FinishMission(self:GetMission(missionOrMissionId), owner)
	else
		local mission = missionOrMissionId
		if not mission then
			error("mission is nil")
			return
		end
		if self:GetMission(mission:GetId()) ~= mission then
			error2(string.format("%s not belong to %s", mission:GetShort(), self:GetShort()))
			return
		end

		local missions = self:GetMissions_ToEdit()
		mission:SetEnv(nil)
		mission:SetOwner(owner)
		table.RemoveByValue_Array(missions, mission)
		self:AddFinishedMissionId(mission:GetId())
		mission:OnFinish(self)
		mission:Destruct()
	end

end

function User:GiveUpMission(missionOrMissionId, owner)
	if IsString(missionOrMissionId) then
		self:GiveUpMission(self:GetMission(missionOrMissionId), owner)
	else
		local mission = missionOrMissionId
		if not mission then
			error("mission is nil")
			return
		end
		if self:GetMission(mission:GetId()) ~= mission then
			error2(string.format("%s not belong to %s", mission:GetShort(), self:GetShort()))
			return
		end

		local missions = self:GetMissions_ToEdit()
		mission:SetEnv(nil)
		mission:SetOwner(owner)
		table.RemoveByValue_Array(missions, mission)
		mission:OnGiveUp(self)
		mission:Destruct()
	end

end

function User:CheckAutoFinishMissions()
	for _, mission in ipairs(self:GetMissions()) do
		if mission:IsReady() then
			if mission:GetCfgMissionData().isAutoCheckFinish then
				self:FinishMission(mission, mission:GetOwner())
			end
		end
	end
end

----------------------------------------------------------------------
-- 背包
----------------------------------------------------------------------
function User:GetItems(id)
	return self._oItemBag:GetItems(id)
end

function User:GetItem(idOrRid)
	return self._oItemBag:GetItem(idOrRid)
end

function User:GetItemsOfTypes(type1, type2)
	return self._oItemBag:GetItemsOfTypes(type1, type2)
end

function User:GetItemIds()
	return self._oItemBag:GetItemIds()
end

function User:GetItemCount(id)
	return self._oItemBag:GetItemCount(id)
end

function User:HasItem(id)
	return self._oItemBag:HasItem(id)
end

-- 放入物品
-- 对于可折叠物品则会替代已存在的物品对象并数量叠加
-- 对于不可折叠物品则直接加入到对象列表
function User:AddItems(id, count)
	local items = self._oItemBag:AddItems(id, count)
	for _, item in ipairs(items) do
		self:OnAddItem(item)
	end
end

function User:RemoveItems(id, count)
	local items = self._oItemBag:RemoveItems(id, count)
	for _, item in ipairs(items) do
		self:OnRemoveItem(item)
	end
	return items
end

function User:TryRemoveItems(id, count)
	if self:CanRemoveItems(id, count) then
		self:RemoveItems(id, count)
		return true
	else
		return false
	end
end

function User:AddItem(item)
	self._oItemBag:AddItem(item)
	self:OnAddItem(item)
end

function User:RemoveItem(itemOrRid)
	local item = self._oItemBag:RemoveItem(itemOrRid)
	if item then
		self:OnRemoveItem(item)
	end
	return item
end

function User:CanRemoveItems(id, count)
	return self._oItemBag:CanRemoveItems(id, count)
end

function User:ClearItems()
	self._oItemBag:ClearItems()
end

----------------------------------------------------------------------
-- OnXXX
----------------------------------------------------------------------
function User:OnAddItem(item)
end

function User:OnRemoveItem(item)
end

----------------------------------------------------------------------
-- Util
----------------------------------------------------------------------
--可以增加或者删除物品(count是负数的时候),添加物品的时候可以在数量后面加"xxAttr1:4,xxAttr2:5"添加该物品的附加属性
---@param itemDict table<string,string>
---@param doerAttrParser DoerAttrParser
function User:DealItems(itemDict, doerAttrParser)
	doerAttrParser = doerAttrParser or DoerAttrParser.New(self)
	for itemId, value in pairs(itemDict) do
		local addAttrDict = {} -- 带属性
		local leftC1 = "\""
		local rightC1 = "\""
		local leftC2 = "“"
		local rightC2 = "”"
		local isUse1 = true
		local pos = string.IndexOf(value, leftC1)
		if pos == -1 then
			pos = string.IndexOf(value, leftC2)
			isUse1 = false
		end
		if pos ~= -1 then
			local leftCLength = isUse1 and string.len(leftC1) or string.len(leftC2)
			local rightCLength = isUse1 and string.len(rightC1) or string.len(rightC2)
			local attrString = string.sub(value, pos + leftCLength, -rightCLength);--最后一个"也要删除
			addAttrDict = string.ToDictionary(attrString)
			value = string.sub(value, 1, pos - 1)
		end
		local count = doerAttrParser:ParseNumber(value)
		if count < 0 then
			-- remove Items
			count = math.abs(count)
			local itemList = self:RemoveItems(itemId, count)
			for _, item in ipairs(itemList) do
				item:Destruct()
			end
		else
			-- add Items
			---@type Item
			local item = global.client.itemFactory:NewDoer(itemId)
			if not table.IsNilOrEmpty(addAttrDict) then
				for attrName, attrValue in pairs(addAttrDict) do
					addAttrDict[attrName] = doerAttrParser:Parse(attrValue)
				end
				item:AddAll(addAttrDict)
			end
			local isCanFold = item:IsCanFold()
			if isCanFold then
				item:SetCount(count)
				self:AddItem(item)
				break
			else
				self:AddItem(item)
			end
		end
	end
	return true
end

---@param target Critter
function User:UseItem(idOrRid, target)
	local item = self:GetItem(idOrRid)
	if not item then
		error2(string.format("UseItem error:do not has %s", idOrRid))
		return false
	end
	if not target:CheckUseItem(item) then
		return false
	end
	if item:IsCanFold() then
		item = self:RemoveItems(item:GetId(), 1)[1]
	else
		item = self:RemoveItem(item)
	end
	if not target:UseItem(item) then
		-- 失败，加回去
		self:AddItem(item)
		return false
	end
	item:Destruct()
	return true
end

----------------------------------------------------------------------
-- 装备
----------------------------------------------------------------------
---@param target Critter
function User:PutOnEquip(idOrRid, target)
	local item = self:GetItem(idOrRid)
	if not item then
		return false
	end
	local type1 = item:GetType1()
	local type2 = item:GetType2()
	local oldEquip = target:GetEquipOfTypes(type1, type2)
	if oldEquip then
		if not self:TakeOffEquip(oldEquip, target) then
			return false
		end
	end
	if not target:CheckPutOnEquip(item) then
		return false
	end
	if item:IsCanFold() then
		item = self:RemoveItems(item:GetId(), 1)[1]
	else
		item = self:RemoveItem(item)
	end
	if not item then
		error2(string.format("PutOnEquip error:%s do not has item:%s", self, idOrRid))
		return false
	end
	if not target:PutOnEquip(item) then
		-- 失败，加回去
		self:AddItem(item)
		return false
	end
	item:Destruct()
	return true
end

function User:TakeOffEquip(equip, target)
	if not equip then
		error2("TakeOffEquip error: equip is nil")
		return false
	end
	if not target:CheckTakeOffEquip(equip) then
		return false
	end

	if not target:TakeOffEquip(equip) then
		return false
	end
	equip:SetEnv(self)
	self:AddItem(equip)
	return true
end

----------------------------------------------------------------------
-- 镶嵌物
----------------------------------------------------------------------
function User:EmbedOn(itemOrIdOrRid, embedOrIdOrRid)
	---@type Item
	local item
	---@type Item
	local embed
	if IsString(itemOrIdOrRid) then
		-- rid or id
		item = self:GetItem(itemOrIdOrRid)
	else
		item = itemOrIdOrRid
	end
	if IsString(embedOrIdOrRid) then
		-- rid or id
		embed = self:GetItem(embedOrIdOrRid)
	else
		embed = embedOrIdOrRid
	end
	if not item then
		error2("EmbedOn error: item is null")
		return false
	end
	if not embed then
		error2("EmbedOn error: embed is null")
		return false
	end
	if not item:CheckEmbedOn(embed) then
		return false
	end
	if not self:RemoveItem(embed) then
		error2(string.format("EmbedOn error:can not remove item:%s", embed))
	end
	if not item:EmbedOn(embed) then
		-- 失败，加回去
		self:AddItem(embed)
		return false
	end
	return true
end

function User:EmbedOff(itemOrRid, embedOrRid)
	---@type Item
	local item
	---@type Item
	local embed
	if IsString(itemOrRid) then
		-- rid
		item = self:GetItem(itemOrRid)
	else
		item = itemOrRid
	end
	if IsString(embedOrRid) then
		-- rid
		embed = item:GetEmbed(embedOrRid)
	else
		embed = embedOrRid
	end

	if not item then
		error2("EmbedOff error: item is null")
		return false
	end
	if not embed then
		error2("EmbedOff error: embed is null")
		return false
	end

	if not item:CheckEmbedOff(embed) then
		return false
	end
	if not item:EmbedOff(embed) then
		return false
	end
	embed:SetEnv(self)
	self:AddItem(embed)
	return true
end

return User