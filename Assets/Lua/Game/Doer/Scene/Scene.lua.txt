---@class Scene:Thing
local Scene = Class("Scene", Thing)

function Scene:Init()
	Scene.super.Init(self)
	---@type Scenes
	self.oChildScenes = Scenes.New(self, "o_child_scenes")
	---@type SceneItems
	self.oSceneItems = SceneItems.New(self, "o_sceneItems")
end

function Scene:GetCfgSceneData()
	return CfgScene.get_by_id(self:GetId())
end

-------------------------DoXXX---------------------------
---@param thing Thing
function Scene:DoEnter(thing)
	xpcall(function()
		self:OnEnter(thing)
	end, function(error_msg)
		error2(string.format("to.OnEnter error! [%s->%s]:%s", self, thing, error_msg))
	end)
	xpcall(function()
		thing:OnEnterScene(self)
	end, function(error_msg)
		error2(string.format("to.OnEnterScene error! [%s->%s]:%s", self, thing, error_msg))
	end)
end

---@param thing Thing
function Scene:DoLeave(thing)
	xpcall(function()
		self:OnLeave(thing)
	end, function(error_msg)
		error2(string.format("to.OnLeave error! [%s->%s]:%s", self, thing, error_msg))
	end)
	xpcall(function()
		thing:OnLeaveScene(self)
	end, function(error_msg)
		error2(string.format("to.OnLeaveScene error! [%s->%s]:%s", self, thing, error_msg))
	end)
end

--物件thing在本场景中移动事件
---@param thing Thing
---@param fromPos Vector2
---@param toPos Vector2
---@param trackList Vector2[]
---@param type number
function Scene:DoMove(thing, fromPos, toPos, trackList, type)
	xpcall(function()
		self:OnMoveThing(thing, fromPos, toPos, trackList, type)
	end, function(error_msg)
		error2(string.format("to.OnMoveThing error! [%s->%s]:%s", self, thing, error_msg))
	end)

	xpcall(function()
		thing:OnMove(self, fromPos, toPos, trackList, type)
	end, function(error_msg)
		error2(string.format("to.OnMove error! [%s,%s->(%s->%s]:%s", self, thing, fromPos, toPos, error_msg))
	end)
end

--物件thing本场景转移到另一场景事件
---@param thing Thing
---@param fromPos Vector2
---@param childScene Scene
---@param toPos Vector2
---@param type number
function Scene:DoShift(thing, fromPos, childScene, toPos, type)
	xpcall(function()
		self:OnShift(thing, fromPos, childScene, toPos, type)
	end, function(error_msg)
		error2(string.format("env.OnShift error! [%s,%s->(%s->%s]:%s", self, thing, fromPos, toPos,
			error_msg))
	end)
end

---------------------OnXXX----------------------------
function Scene:OnSave(dict, dictTmp)
	Scene.super.OnSave(self, dict, dictTmp)
end

function Scene:OnRestore(dict, dictTmp)
	Scene.super.OnRestore(self, dict, dictTmp)
end

function Scene:OnEnter(thing)

end

function Scene:OnLeave(thing)
end

--物件thing在本场景中移动事件
---@param thing Thing
---@param fromPos Vector2
---@param toPos Vector2
---@param trackList Vector2[]
---@param type number
function Scene:OnMoveThing(thing, fromPos, toPos, trackList, type)

end

--物件thing本场景转移到另一场景事件
---@param thing Thing
---@param fromPos Vector2
---@param childScene Scene
---@param toPos Vector2
---@param type number
function Scene:OnShift(thing, fromPos, childScene, toPos, type)
end

--region 子场景
function Scene:CheckParentCall()
	if self:IsChildScene() then
		error("请使用父级场景调用此方法")
	end
end

--清除主场景的子场景投影障碍（仅供父级场景调用）
---@param baseOnParentPos Vector2
---@param childScene Scene
function Scene:ClearProjectGrids(baseOnParentPos, childScene)
	self:CheckParentCall()
	local mapPath = self:GetMapPath()
	local projectGrids
	if childScene:GetMapType() == 1 then
		projectGrids = childScene:GetGrids()
	else
		projectGrids = childScene:GetProjectGrids()
	end
	if projectGrids ~= nil then
		local offsetPos = childScene:GetOffsetPos()
		for x = 1, #projectGrids do
			for y = 1, #projectGrids[x] do
				local v = projectGrids[x][y]
				if v ~= nil and v ~= 0 and AStarUtil.IsValidObstacleType(v) then
					-- 子场景无效区域不投影
					local px = self:ToParentX(baseOnParentPos, offsetPos, x)
					local py = self:ToParentY(baseOnParentPos, offsetPos, y)
					if mapPath:IsValidPoint(px, py) then
						-- 父场景无效区域不投影
						mapPath.projectGrids[px][py] = 0
					end
				end
			end
		end
	end
end


-- 设置子场景投影障碍到主场景（仅供父级场景调用）
---@param baseOnParentPos Vector2
---@param childScene Scene
function Scene:SetProjectGrids(baseOnParentPos, childScene)
	self:CheckParentCall()
	local mapPath = self:GetMapPath()
	if mapPath == nil or mapPath.grids == nil then
		return
	end
	local projectGrids
	if childScene:GetMapType() == 1 then
		projectGrids = childScene:GetGrids()
	else
		projectGrids = childScene:GetProjectGrids()
	end
	if projectGrids ~= nil then
		local offsetPos = childScene:GetOffsetPos()
		for x = 1, #projectGrids do
			for y = 1, #projectGrids[x] do
				local v = projectGrids[x][y]
				if v ~= nil and v ~= 0 and AStarUtil.IsValidObstacleType(v) then
					-- 子场景无效区域不投影
					local px = self:ToParentX(baseOnParentPos, offsetPos, x)
					local py = self:ToParentY(baseOnParentPos, offsetPos, y)
					if mapPath:IsValidPoint(px, py) then
						-- 父场景无效区域不投影
						mapPath.projectGrids[px][py] = v
					end
				end
			end
		end
	end
end

--清空所有动态障碍（仅供父级场景调用）
function Scene:ClearAllProjectGrids()
	self:CheckParentCall()
	local mapPath = self:GetMapPath()
	if mapPath == nil or mapPath.projectGrids == nil then
		return
	end
	for x = 1, #mapPath.projectGrids do
		for y = 1, #mapPath.projectGrids[x] do
			mapPath.projectGrids[x][y] = 0
		end
	end
end

--重置所有动态障碍（仅供父级场景调用）
function Scene:ResetAllProjectGrids()
	self:CheckParentCall()
	self:ClearAllProjectGrids()
	for _, childScene in ipairs(self:GetChildScenes()) do
		if not childScene:IsInAir() then
			self:SetProjectGrids(childScene:GetPos(), childScene)
		end
	end
end

---------------------子场景容器---------------------
---@param id string
---@param belong string
---@return Scene[]
function Scene:GetChildScenes(id, belong)
	if belong == nil and id == nil then
		return self.oChildScenes:GetScenes()
	else
		return self.oChildScenes:GetScenes(nil, function(scene)
			if belong ~= nil and not scene:GetBelong() == belong then
				return false
			end
			if id ~= nil and not scene:GetId() == id then
				return false
			end
			return true
		end)
	end
end

---@param idOrRid string
---@param belong string
---@return Scene
function Scene:GetChildScene(idOrRid, belong)
	if IdUtil.IsRid(idOrRid) then
		-- rid的情况
		local rid = idOrRid
		if not self.oChildScenes:GetSceneDict_ToEdit()[rid] then
			return nil
		end
		---@type Scene
		local childScene = self.oChildScenes.GetSceneDict_ToEdit()[rid]
		if belong ~= nil and not childScene:GetBelong() == belong then
			return nil
		end
		return childScene
	else
		-- id的情况
		local id = idOrRid
		local childScenes = self:GetChildScenes(id, belong)
		return #childScenes == 0 and nil or childScenes[1]
	end
end

-- 获得场景内所有子场景数量（仅供父级场景调用）
---@param belong string
function Scene:GetChildSceneCount(belong)
	self:CheckParentCall()
	return #self:GetChildScenes(nil, belong)
end

--添加子场景到指定坐标（仅供父级场景调用）
---@param pos Vector2
---@param childScene Scene
function Scene:AddChildScene(pos, childScene)
	self:CheckParentCall()
	childScene:SetEnv(self)
	childScene:SetPos(pos)
	self.oChildScenes:GetSceneDict_ToEdit()[childScene:GetRid()] = childScene
	--处理子场景障碍投影
	if not childScene:IsInAir() then
		self:SetProjectGrids(pos, childScene)
	end
	-- 触发进入事件
	self:DoEnter(childScene)
end

-- 移除子场景（仅供父级场景调用）
---@param childScene Scene
function Scene:RemoveChildScene(childScene)
	self:CheckParentCall()
	local isContain = self.oChildScenes:GetSceneDict_ToEdit()[childScene:GetRid()] ~= nil
	self.oChildScenes:GetSceneDict_ToEdit()[childScene:GetRid()] = nil
	if isContain then
		--  处理子场景障碍投影
		if not childScene:IsInAir() then
			self:ClearProjectGrids(childScene:GetPos(), childScene)
		end
		-- 触发离开事件
		self:DoLeave(childScene)
		childScene:SetEnv(nil)
	end
end

-- 移除子场景（仅供父级场景调用）
---@param rid string
function Scene:RemoveChildScene(rid)
	local childScene = self.oChildScenes:GetScene(rid)
	self:RemoveChildScene(childScene)
end

-- 将子场景移到指定位置（仅供父级场景调用）
---@param scene Scene
---@param toPos Vector2
---@param trackList Vector2[]
---@param type number
function Scene:MoveChildScene(scene, toPos, trackList, type)
	self:CheckParentCall()
	local fromPos = scene:GetPos()
	scene:SetPos(toPos)
	scene:SetTmp("last_move_time", DateTimeUtil.Now())
	scene:SetTmp("last_move_track_list", trackList)
	--处理子场景障碍投影
	if not scene:IsInAir() then
		self:ClearProjectGrids(fromPos, scene)
		self:SetProjectGrids(toPos, scene)
	end
	--触发移动事件
	self:DoMove(scene, fromPos, toPos, trackList, type)
end

--获得指定范围的子场景（仅供父级场景调用）
---@param range AStarRange
---@param belong string
---@return Scene[]
function Scene:GetRangeScenes(range, belong)
	self:CheckParentCall()
	local list = {}
	for _, childScene in ipairs(self:GetChildScenes(nil, belong)) do
		if range:IsInRange(childScene:GetPos()) then
			table.insert(list, childScene)
		end
	end
	return list
end

-- 获得视图内所有子场景（仅供父级场景调用）
---@param pos Vector2
---@param belong string
---@return Scene[]
function Scene:GetViewingScenes(pos, belong)
	return self:__GetViewingScenes(pos, pos, belong)
end

-- 获得视图内所有子场景（仅供父级场景调用）
---@param pos1 Vector2
---@param pos2 Vector2
---@param belong string
---@return Scene[]
function Scene:__GetViewingScenes(pos1, pos2, belong)
	self:CheckParentCall()
	return self:GetRangeScenes(AStarUtil.GetViewingRange(pos1, pos2), belong)
end

-- 获得指定分组的子场景
---@param group string
---@param belong string
---@return Scene
function Scene:GetGroupScene(group, belong)
	self:CheckParentCall()
	for _, childScene in ipairs(self:GetChildScenes(nil, belong)) do
		if group == childScene:GetGroup() then
			return childScene
		end
	end
end
--endregion

--region SceneItems

---@param id string
---@param belong string
---@param isNotIncludeChildScene boolean
---@return Item[]
function Scene:GetItems(id, belong, isNotIncludeChildScene)
	local result = {}
	if belong == nil then
		local currentSceneItemList = self.oSceneItems:GetItems(id)
		table.InsertRange_Array(result, currentSceneItemList)
		if not isNotIncludeChildScene then
			for _, childScene in ipairs(self:GetChildScenes()) do
				table.InsertRange_Array(result, childScene:GetItems(id, nil, isNotIncludeChildScene))
			end
		end
	else
		for _, item in ipairs(self:GetItems(id, nil, isNotIncludeChildScene)) do
			if belong == item:GetBelong() then
				table.insert(result, item)
			end
		end
	end
	return result
end

---@param id string
---@param belong string
---@param isNotIncludeChildScene boolean
function Scene:GetItemCount(id, belong, isNotIncludeChildScene)
	return #self:GetItems(id, belong, isNotIncludeChildScene)
end

---@param id string
---@param belong string
---@param isNotIncludeChildScene boolean
---@return Item
function Scene:GetItem(idOrRid, belong, isNotIncludeChildScene)
	for _, item in ipairs(self:GetItems(nil, belong, isNotIncludeChildScene)) do
		if IdUtil.IsIdOrRidEquals(idOrRid, item:GetId(), item:GetRid()) then
			return item
		end
	end
	return nil
end

-- 添加物品到指定坐标
---@param pos Vector2
---@param item Item
function Scene:AddItem(pos, item)
	item:SetEnv(self)
	item:SetPos(pos)
	self.oSceneItems:GetItemDict_ToEdit()[item:GetRid()] = item
	-- 触发进入事件
	self:DoEnter(item)
end

-- 删除物品
---@param itemOrRid Item|string
function Scene:RemoveItem(itemOrRid)
	if IsString(itemOrRid) then
		local rid = itemOrRid
		if not self.oSceneItems:GetItemDict_ToEdit()[rid] then
			return nil
		end
		local result = self.oSceneItems:GetItemDict_ToEdit()[rid]
		return self:RemoveItem(result)
	end
	---@type Item
	local item = itemOrRid
	if not self.oSceneItems:GetItemDict_ToEdit()[item:GetRid()] then
		return
	end
	self.oSceneItems:GetItemDict_ToEdit()[item:GetRid()] = nil

	-- 触发离开事件
	self:DoLeave(item)
	item:SetEnv(nil)

	return item
end



-- 将物品移到指定位置
---@param item Item
---@param toPos Vector2
---@param trackList Vector2[]
---@param type number
function Scene:MoveItem(item, toPos, trackList, type)
	local from_pos = item:GetPos()
	item:SetPos(toPos)

	-- 触发移动事件
	self:DoMove(item, from_pos, toPos, trackList, type)
end

-- 将物品转移到指定子场景的指定位置
---@param item Item
---@param childScene Scene
---@param toPos Vector2
---@param type number
function Scene:ShiftItem(item, childScene, toPos, type)
	local from_pos = item:GetPos()
	self.oSceneItems:GetItemDict_ToEdit()[item:GetRid()] = nil
	item:SetEnv(childScene)
	item:SetPos(toPos)
	childScene.oSceneItems:GetItemDict_ToEdit()[item:GetRid()] = item
	self:DoShift(item, from_pos, childScene, toPos, type)
end

-- 清除所有物品
function Scene:ClearItems(isNotIncludeChildScene)
	for rid, item in pairs(self.oSceneItems:GetItemDict_ToEdit()) do
		-- 触发离开事件
		self:DoLeave(item)
		item:SetEnv(nil)
		item:Destruct()
	end
	table.RemoveAll_Dict(self.oSceneItems:GetItemDict_ToEdit())
	if not isNotIncludeChildScene then
		for _, childScene in ipairs(self:GetChildScenes()) do
			childScene:ClearItems(isNotIncludeChildScene)
		end
	end
end

-- 获得指定范围的物品（仅供父级场景调用）
---@param range AStarRange
---@param belong string
---@param isNotIncludeChildScene boolean
---@return Item[]
function Scene:GetRangeItems(range, belong, isNotIncludeChildScene)
	local result = {}
	for _, item in ipairs(self:GetItems(nil, belong, isNotIncludeChildScene)) do
		local pos = item.GetEnv():ToParentPos(item:GetPos(), self)
		if range:IsInRange(pos) then
			table.insert(result, item)
		end
	end
	return result
end

--获得指定范围的物品（仅供父级场景调用）
---@param comparePos Vector2
---@param radius number
---@param belong string
---@param isNotIncludeChildScene boolean
---@return Item[]
function Scene:GetAroundItems(comparePos, radius, belong, isNotIncludeChildScene)
	local result = {}
	for _, item in ipairs(self:GetItems(nil, belong, isNotIncludeChildScene)) do
		local pos = item.GetEnv():ToParentPos(item:GetPos(), self)
		if AStarUtil.IsInAround(pos, comparePos, radius) then
			table.insert(result, item)
		end
	end
	return result
end

-- 获得指定扇形的物品（仅供父级场景调用）
---@param sectorCenterPos Vector2
---@param sectorDir Vector2
---@param sectorRadius number
---@param sectorHalfDegrees number
---@param belong boolean
---@param isNotIncludeChildScene boolean
---@return Item[]
function Scene:GetSectorItems(sectorCenterPos, sectorDir, sectorRadius, sectorHalfDegrees, belong, isNotIncludeChildScene)
	local result = {}
	for _, item in ipairs(self:GetItems(nil, belong, isNotIncludeChildScene)) do
		local pos = item.GetEnv():ToParentPos(item:GetPos(), self)
		if AStarUtil.IsInSector(pos, sectorCenterPos, sectorDir, sectorRadius, sectorHalfDegrees) then
			table.insert(result, item)
		end
	end
	return result
end

---@param group string
---@param belong string
---@param isNotIncludeChildScene boolean
---@return Item[]
function Scene:GetGroupItems(group, belong, isNotIncludeChildScene)
	local result = {}
	for _, item in ipairs(self:GetItems(nil, belong, isNotIncludeChildScene)) do
		if item:GetGroup() == group then
			table.insert(result, item)
		end
	end
	return result
end

---@param group string
---@param belong string
---@param isNotIncludeChildScene boolean
function Scene:GetGroupItemCount(group, belong, isNotIncludeChildScene)
	return #self:GetGroupItems(group, belong, isNotIncludeChildScene)
end

--endregion
------------------------Util------------------------
function Scene:IsChildScene()
	return self:GetEnv() ~= nil
end

function Scene:IsChildSceneOf(toTopParentScene)
	if toTopParentScene ~= nil then
		local parentScene = self:GetEnv()
		while parentScene ~= nil do
			if toTopParentScene == parentScene then
				return true
			end
			parentScene = parentScene:GetEnv()
		end
		return false
	end
	return self:GetEnv() == nil and true or false
end

function Scene:SetIsInAir(isInAir)
	self:SetTmp("o_is_in_air", isInAir)
end

--是否在空中
function Scene:IsInAir()
	return self:GetTmp("o_is_in_air", false)
end

function Scene:SetGroup(group)
	self:SetTmp("group", group)
end

function Scene:GetGroup()
	return self:GetTmp("group", "")
end

function Scene:SetMapType(mapType)
	---@type Scene
	local parentScene = self:GetEnv()
	if parentScene ~= nil then
		parentScene:ClearProjectGrids(self:GetPos(), self)
		parentScene:SetProjectGrids(self:GetPos(), self)
	end
	self:Set("map_type", mapType)
end

function Scene:GetMapType()
	return self:Get("map_type")
end

function Scene:SetOrgPos(pos)
	self:SetTmp("org_pos", pos)
end

---@return Vector2
function Scene:GetOrgPos()
	return self:GetTmp("org_pos")
end

---@return SceneMapInfo
function Scene:GetSceneMapInfo()
	local sceneMapInfo
	if self:Get("is_dynamic_map", false) then
		local src = self:Get("src", "")
		if not string.IsNilOrWhiteSpace(src) then
			sceneMapInfo = CfgSceneDataUtil.GetSceneMapInfo(CfgScene.get_by_id(src))
		end
	else
		sceneMapInfo = self:Get("sceneMapInfo")
	end
	return sceneMapInfo
end

-- 自身障碍数据 grids[x][y]
---@return number[][]
function Scene:GetGrids()
	local sceneMapInfo = self:GetSceneMapInfo()
	if sceneMapInfo ~= nil then
		return sceneMapInfo.grids
	end
	return nil
end

-- 自身投影数据 project_grids[x][y]
---@return number[][]
function Scene:GetProjectGrids()
	local sceneMapInfo = self:GetSceneMapInfo()
	if sceneMapInfo ~= nil then
		return sceneMapInfo.projectGrids
	end
	return nil
end

--获得路径的x轴宽度
function Scene:GetWidth()
	local grids = self:GetGrids()
	if grids ~= nil then
		return #grids[1]
	end
	return 0
end

-- 获得路径的y轴高度
function Scene:GetHeight()
	local grids = self:GetGrids()
	if grids ~= nil then
		return #grids
	end
	return 0
end

-- 获得基准坐标
function Scene:GetOffsetPos()
	local sceneMapInfo = self:GetSceneMapInfo()
	if sceneMapInfo ~= nil then
		return sceneMapInfo.offsetPos
	end
	return Vector2.zero
end

-- 获得路径信息
---@return AStarMapPath
function Scene:GetMapPath()
	return self:GetTmp("mapPath")
end

-- 更新路径信息
function Scene:UpdateMapPath()
	local sceneMapInfo = self:GetSceneMapInfo()
	if sceneMapInfo ~= nil then
		local mapPath = AStarMapPath.New(sceneMapInfo.grids)
		self:SetTmp("mapPath", mapPath)
	end
end

-- 将自身x坐标转换为父级场景x坐标
---@param baseOnParentPos Vector2
---@param offsetPos Vector2
---@param x number
---@return number
function Scene:ToParentX(baseOnParentPos, offsetPos, x)
	return baseOnParentPos.x - offsetPos.x + x
end

-- 将自身y坐标转换为父级场景y坐标
---@param baseOnParentPos Vector2
---@param offsetPos Vector2
---@param y number
---@return number
function Scene:ToParentY(baseOnParentPos, offsetPos, y)
	return baseOnParentPos.y - offsetPos.y + y
end

---@param baseOnParentPos Vector2
---@param offsetPos Vector2
---@param pos Vector2
---@return Vector2
function Scene:__ToParentPos(baseOnParentPos, offsetPos, pos)
	return Vector2.New(self:ToParentX(baseOnParentPos, offsetPos, pos.x),
		self:ToParentY(baseOnParentPos, offsetPos, pos.y))
end

-- 将自身坐标转换为父级场景坐标
---@param pos Vector2
---@param toTopParentScene Scene
---@return Vector2
function Scene:ToParentPos(pos, toTopParentScene)
	local isChildScene = self:IsChildScene()
	if isChildScene then
		local baseOnParentPos = self:GetPos()
		local offsetPos = self:GetOffsetPos()
		pos = self:__ToParentPos(baseOnParentPos, offsetPos, pos)
	end
	if toTopParentScene ~= self:GetEnv() then
		if isChildScene then
			return self:GetEnv():ToParentPos(pos, toTopParentScene)
		end
		error(string.format("没有目标的scene:%s", toTopParentScene))
	end
	return pos
end

-- 将自身坐标转换为父级场景坐标
---@param posList Vector2[]
---@param toTopParentScene Scene
---@return Vector2[]
function Scene:ToParentPosList(posList, toTopParentScene)
	local result = {}
	for _, pos in ipairs(posList) do
		table.insert(result, self:ToParentPos(pos, toTopParentScene))
	end
	return result
end

-- 将自身坐标转换为父级场景坐标
---@param range AStarRange
---@param toTopParentScene Scene
---@return AStarRange
function Scene:ToParentRange(range, toTopParentScene)
	local leftBottom = self:ToParentPos(Vector2.New(range.leftBottomX, range.leftBottomY), toTopParentScene)
	local rightTop = self:ToParentPos(Vector2.New(range.rightTopX, range.rightTopY), toTopParentScene)
	return AStarRange.New(leftBottom.x, leftBottom.y, rightTop.x, rightTop.y)
end

--将父级场景x坐标转换为自身x坐标
---@param baseOnParentPos Vector2
---@param offsetPos Vector2
---@param x number
---@return number
function Scene:FromParentX(baseOnParentPos, offsetPos, x)
	return x - baseOnParentPos.x + offsetPos.x
end

-- 将父级场景y坐标转换为自身y坐标
---@param baseOnParentPos Vector2
---@param offsetPos Vector2
---@param y number
---@return number
function Scene:FromParentY(baseOnParentPos, offsetPos, y)
	return y - baseOnParentPos.y + offsetPos.y
end

---@param baseOnParentPos Vector2
---@param offsetPos Vector2
---@param pos Vector2
---@return Vector2
function Scene:__FromParentPos(baseOnParentPos, offsetPos, pos)
	return Vector2.New(self:FromParentX(baseOnParentPos, offsetPos, pos.x),
		self:FromParentY(baseOnParentPos, offsetPos, pos.y))
end

-- 将父级场景坐标转换为自身坐标
---@param pos Vector2
---@return Vector2
function Scene:FromParentPos(pos)
	if self:IsChildScene() then
		local baseOnParentPos = self:GetPos()
		local offsetPos = self:GetOffsetPos()
		return self:__FromParentPos(baseOnParentPos, offsetPos, pos)
	else
		return pos
	end
end


-- 将父级场景坐标转换为自身坐标
---@param posList Vector2[]
---@return Vector2[]
function Scene:FromParentPosList(posList)
	local result = {}
	for _, pos in ipairs(posList) do
		table.insert(result, self:FromParentPos(pos))
	end
	return result
end

-- 将父级场景坐标转换为自身坐标
---@param range AStarRange
---@return AStarRange
function Scene:FromParentRange(range)
	if self:IsChildScene() then
		local leftBottom = self:FromParentPos(Vector2.New(range.leftBottomX, range.leftBottomY))
		local rightTop = self:FromParentPos(Vector2.New(range.rightTopX, range.rightTopY))
		return AStarRange.New(leftBottom.x, leftBottom.y, rightTop.x, rightTop.y)
	else
		return range
	end
end

-- 检测指定点是否属于该地图内
---@param pos Vector2
function Scene:IsInMapRange(pos)
	local projectGrids = self:GetProjectGrids()
	if projectGrids == nil or not AStarUtil.IsInRange(projectGrids, pos.x, pos.y) then
		return false
	end
	return projectGrids[pos.x][pos.y] ~= nil and projectGrids[pos.x][pos.y] ~= 0-- 投影层不为空的范围就是图内
end

-- 随机获取地图上一点
---@param canPassObstacleTypes Vector2[]
---@param canPassTerrainTypes Vector2[]
---@param randomManager RandomManager
function Scene:GetRandomPos(canPassObstacleTypes, canPassTerrainTypes, randomManager)
	randomManager = randomManager or global.client.randomManager
	local width = self:GetWidth()
	local height = self:GetHeight()
	local x = randomManager:RandomInt(0, width)
	local y = randomManager:RandomInt(0, height)

	local result = Vector2.New(x, y)
	if canPassObstacleTypes ~= nil or canPassTerrainTypes ~= nil then
		canPassObstacleTypes = canPassObstacleTypes or AStarMapPathConst.Air_Can_Pass_Obstacle_Types
		canPassTerrainTypes = canPassTerrainTypes or AStarMapPathConst.Air_Can_Pass_Terrain_Types
		result = AStarUtil.__FindAroundFreePoint(self:GetMapPath(), result, nil, canPassObstacleTypes,
			canPassTerrainTypes, randomManager)
	end
	return result
end

return Scene