---@class Scenes
local Scenes = Class("Scenes")
------------------------场景容器------------------------------
function Scenes:Init(parentDoer, subDoerKey)
	---@type Scene
	self.parentDoer = parentDoer
	self.subDoerKey = subDoerKey
end
------------------------DoXXX--------------------------------
-- 卸载
function Scenes:DoRelease()
	SubDoerUtil3.DoReleaseSubDoer(self.parentDoer, self.subDoerKey)
end

-- 保存
function Scenes:DoSave(dict, dict_tmp, saveKey)
	saveKey = saveKey or "scenes"
	local scenes = self:GetScenes()
	local dictScenes = {}
	local dictScenesTmp = {}
	for _, scene in ipairs(scenes) do
		local dictScene = {}
		local dictSceneTmp = {}
		scene:PrepareSave(dictScene, dictSceneTmp)
		local rid = scene:GetRid()
		dictScenes[rid] = dictScene
		dictScenesTmp[rid] = table.GetNilIfEmpty(dictSceneTmp)
	end
	dict[saveKey] = table.GetNilIfEmpty(dictScenes)
	dict_tmp[saveKey] = table.GetNilIfEmpty(dictScenesTmp)
end

-- 还原
function Scenes:DoRestore(dict, dictTmp, restoreKey)
	restoreKey = restoreKey or "scenes"
	self:ClearScenes()
	local dictScenes = table.Remove_Dict(dict, restoreKey)
	local dictScenesTmp = table.Remove_Dict(dictTmp, restoreKey)
	if not table.IsNilOrEmpty(dictScenes) then
		for rid, value in pairs(dictScenes) do
			local sceneDictToEdit = self:GetSceneDict_ToEdit()
			local dictScene = dictScenes[rid]
			---@type Scene
			local scene = global.client.sceneFactory:NewDoer(rid)
			scene:SetEnv(self.parentDoer)
			local dictSceneTmp
			if dictScenesTmp then
				dictSceneTmp = dictScenesTmp[rid]
			end
			scene:FinishRestore(dictScene, dictSceneTmp)
			sceneDictToEdit[rid] = scene
		end
	end
end
--------------------------OnXXX-------------------

--------------------------------------------------
---@param filterFunc fun(sub_doer:Doer)
---@return Scene[]
function Scenes:GetScenes(id, filterFunc)
	return SubDoerUtil3.GetSubDoers(self.parentDoer, self.subDoerKey, id, filterFunc)
end

-- 可以直接插入删除
---@return table<string,Scene>
function Scenes:GetSceneDict_ToEdit()
	return SubDoerUtil3.GetSubDoerDict_ToEdit(self.parentDoer, self.subDoerKey)
end

---@param idOrRid string
---@return Scene
function Scenes:GetScene(idOrRid)
	return SubDoerUtil3.GetSubDoer(self.parentDoer, self.subDoerKey, idOrRid)
end

function Scenes:ClearScenes()
	SubDoerUtil3.ClearSubDoers(self.parentDoer, self.subDoerKey)
end

return Scenes