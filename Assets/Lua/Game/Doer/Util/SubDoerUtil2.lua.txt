---@class SubDoerUtil2
local SubDoerUtil2 = Class("SubDoerUtil2")

----------------------------------------------------------------------
-- 里面的结构是  dict<id = List<Doer>>
----------------------------------------------------------------------
----------------------------------------------------------------------
-- DoXXX
----------------------------------------------------------------------
-- 卸载doer中的sub_doer_key子doers
---@param parentDoer Doer
---@param releaseSubDoerFunc fun(sub_doer:Doer)
function SubDoerUtil2.DoReleaseSubDoer(parentDoer, subDoerKey, releaseSubDoerFunc)
	--销毁
	local subDoers = SubDoerUtil2.GetSubDoers(parentDoer, subDoerKey)
	for i = #subDoers, 1, -1 do
		local subDoer = subDoers[i]
		releaseSubDoerFunc(subDoer)
		subDoer:SetEnv(nil)
		subDoer:Destruct()
	end
	table.RemoveAll_Dict(SubDoerUtil2.GetSubDoerDict_ToEdit(parentDoer, subDoerKey))
end

----------------------------------------------------------------------
-- 容器
----------------------------------------------------------------------
-- 获取doer中的sub_doer_key子doers  有id一层的包裹
---@param parentDoer Doer
---@param filterFunc fun(sub_doer:Doer)
---@return Doer[]
function SubDoerUtil2.GetSubDoers(parentDoer, subDoerKey, id, filterFunc)
	---@type table<string,Doer[]>
	local dict = SubDoerUtil2.GetSubDoerDict_ToEdit(parentDoer, subDoerKey)
	if not id then
		local result = {}
		if not filterFunc then
			for id, subDoerList in pairs(dict) do
				table.InsertRange_Array(result, nil, subDoerList)
			end
		else
			for id, subDoerList in pairs(dict) do
				for _, subDoer in ipairs(subDoerList) do
					if filterFunc(subDoer) then
						table.insert(result, subDoer)
					end
				end
			end
		end
		return result
	end
	local list = SubDoerUtil2.GetSubDoers_ToEdit(parentDoer, subDoerKey, id)
	local result = {}
	for _, subDoer in ipairs(list) do
		if not filterFunc or filterFunc(subDoer) then
			table.insert(result, subDoer)
		end
	end
	return result
end

-- 获取doer中的sub_doer_key子doers  有id一层的包裹 可以直接插入删除
---@param parentDoer Doer
---@return Doer[]
function SubDoerUtil2.GetSubDoers_ToEdit(parentDoer, subDoerKey, id)
	local dict = SubDoerUtil2.GetSubDoerDict_ToEdit(parentDoer, subDoerKey)
	local list = table.GetOrAddDefault_Dict(dict, id, function()
		return {}
	end)
	return list
end

---@return table<string,Doer[]>
function SubDoerUtil2.GetSubDoerDict_ToEdit(parentDoer, subDoerKey)
	local dict = parentDoer:GetOrAddTmp(subDoerKey, function()
		return {}
	end)
	return dict
end

---@return Doer
function SubDoerUtil2.GetSubDoer(parentDoer, subDoerKey, idOrRid)
	local isId = IdUtil.IsId(idOrRid)
	local id = isId and idOrRid or IdUtil.RidToId(idOrRid)
	local dict = SubDoerUtil2.GetSubDoerDict_ToEdit(parentDoer, subDoerKey)
	local list = dict[id]
	if not table.IsNilOrEmpty(list) then
		for _, subDoer in ipairs(list) do
			if isId then
				-- id的情况
				return subDoer
			else
				-- rid的情况
				if subDoer:GetRid() == idOrRid then
					return subDoer
				end
			end
		end
	end
end


-- doer中sub_doer_key的子doers
---@param parentDoer Doer
---@param filterFunc fun(sub_doer:Doer)
function SubDoerUtil2.HasSubDoers(parentDoer, subDoerKey, id, filterFunc)
	return not table.IsNilOrEmpty(SubDoerUtil2.GetSubDoers(parentDoer, subDoerKey, id, filterFunc))
end

-- 获取doer中的sub_doer_key的子doer数量  并不是sub_doer:GetCount()累加，而是sub_doers的个数
---@param parentDoer Doer
function SubDoerUtil2.GetSubDoersCount(parentDoer, subDoerKey, id, filterFunc)
	return table.Count(SubDoerUtil2.GetSubDoers(parentDoer, subDoerKey, id, filterFunc))
end

-- 获取doer中的sub_doer_key的子doer数量  sub_doer:GetCount()累加
---@param parentDoer Doer
function SubDoerUtil2.GetSubDoerCount(parentDoer, subDoerKey, id, filterFunc)
	local subDoers = SubDoerUtil2.GetSubDoers(parentDoer, subDoerKey, id, filterFunc)
	local count = 0
	for _, subDoer in ipairs(subDoers) do
		count = count + subDoer:GetCount()
	end
	return count
end

function SubDoerUtil2.GetSubDoerIds(parentDoer, subDoerKey)
	local dict = SubDoerUtil2.GetSubDoerDict_ToEdit(parentDoer, subDoerKey)
	local result = {}
	for id, _ in pairs(dict) do
		table.insert(result, id)
	end
	return result
end


--add_subDoer 中设置数量
---@param addSubDoer Doer
function SubDoerUtil2.AddSubDoers(parentDoer, subDoerKey, addSubDoer)
	local id = addSubDoer:GetId()
	addSubDoer:SetOwner(parentDoer)
	local isCanFold = addSubDoer:IsCanFold()
	local subDoers = SubDoerUtil2.GetSubDoers_ToEdit(parentDoer, subDoerKey, id)
	if isCanFold then
		-- 可以折叠的
		if table.IsNilOrEmpty(subDoers) then
			table.insert(subDoers, addSubDoer)
		else
			subDoers[1]:AddCount(addSubDoer:GetCount())
			addSubDoer:SetEnv(nil)
			addSubDoer:Destruct()
		end
	else
		-- 不可折叠的
		table.insert(subDoers, addSubDoer)
	end
end

function SubDoerUtil2.RemoveSubDoers(parentDoer, subDoerKey, id, count, subDoerFactory)
	local subDoers = SubDoerUtil2.GetSubDoers_ToEdit(parentDoer, subDoerKey, id)
	local currentCount = 0
	local result = {}
	if table.IsNilOrEmpty(subDoers) then
		return result
	end
	if not count then
		-- 全部删除
		for i = #subDoers, 1, -1 do
			local subDoer = subDoers[i]
			table.remove(subDoers, i)
			subDoer:SetEnv(nil)
			table.insert(result, subDoer)
		end
		table.Reverse_Array(result)
		return result
	end
	local isCanFold = subDoers[1]:CanFold()
	for i = #subDoers, 1, -1 do
		local subDoer = subDoers[i]
		if not isCanFold then
			-- 不可折叠的
			table.remove(subDoers, i)
			subDoer:SetEnv(nil)
			currentCount = currentCount + 1
			table.insert(result, subDoer)
			if currentCount == count then
				return result
			end
		else
			-- 可折叠的
			local subDoerCount = subDoer:GetCount()
			if subDoerCount > count then
				-- 有多
				subDoer:AddCount(-count)
				local clone = subDoerFactory:NewDoer(subDoer:GetId())
				clone:SetCount(count)
				table.insert(result, clone)
			else
				-- 不够或者相等
				table.remove(subDoers, i)
				subDoer:SetEnv(nil)
				table.insert(result, subDoer)
			end
			return result
		end
	end
	return result
end

function SubDoerUtil2.IsCanRemoveSubDoers(parentDoer, subDoerKey, id, count)
	local currentCount = SubDoerUtil2.GetSubDoerCount(parentDoer, subDoerKey, id)
	if currentCount >= count then
		return true
	else
		return false
	end
end

function SubDoerUtil2.RemoveSubDoer(parentDoer, subDoerKey, subDoerOrRid)
	if IsString(subDoerOrRid) then
		-- rid
		local id = IdUtil.RidToId(subDoerOrRid)
		local subDoers = SubDoerUtil2.GetSubDoers_ToEdit(parentDoer, subDoerKey, id)
		for i = #subDoers, 1, -1 do
			local subDoer = subDoers[i]
			if subDoer:GetRid() == subDoerOrRid then
				subDoer:SetEnv(nil)
				table.remove(subDoers, i)
				return subDoer
			end
		end
	else
		local id = subDoerOrRid:GetId()
		local subDoers = SubDoerUtil2.GetSubDoers_ToEdit(parentDoer, subDoerKey, id)
		for i = #subDoers, 1, -1 do
			local subDoer = subDoers[i]
			if subDoer == subDoerOrRid then
				subDoer:SetEnv(nil)
				table.remove(subDoers, i)
				return subDoer
			end
		end
	end
end






-- 清除doer中sub_doer_key的子doers
---@param parentDoer Doer
---@param clearSubDoerFunc fun(sub_doer:Doer)
function SubDoerUtil2.ClearSubDoers(parentDoer, subDoerKey, clearSubDoerFunc)
	---@type table<string,Doer[]>
	local dict = SubDoerUtil2.GetSubDoerDict_ToEdit(parentDoer, subDoerKey)
	for id, subDoerList in pairs(dict) do
		for i = #subDoerList, 1, -1 do
			local subDoer = subDoerList[i]
			clearSubDoerFunc(subDoer)
			subDoer:SetEnv(nil)
			subDoer:Destruct()
		end
	end
	table.RemoveAll_Dict(dict)
end

return SubDoerUtil2