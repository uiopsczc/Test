---@class SubDoerUtil3
local SubDoerUtil3 = Class("SubDoerUtil3")

----------------------------------------------------------------------
-- 里面的结构是  Dict<rid,Doer>
----------------------------------------------------------------------
----------------------------------------------------------------------
-- DoXXX
----------------------------------------------------------------------
-- 卸载doer中的sub_doer_key子doers
---@param parentDoer Doer
---@param releaseSubDoerFunc fun(sub_doer:Doer)
function SubDoerUtil3.DoReleaseSubDoer(parentDoer, subDoerKey, releaseSubDoerFunc)
	--销毁
	local subDoers = SubDoerUtil3.GetSubDoers(parentDoer, subDoerKey)
	for i = #subDoers, 1, -1 do
		local subDoer = subDoers[i]
		releaseSubDoerFunc(subDoer)
		subDoer:SetEnv(nil)
		subDoer:Destruct()
	end
	table.RemoveAll_Dict(SubDoerUtil3.GetSubDoerDict_ToEdit(parentDoer, subDoerKey))
end

----------------------------------------------------------------------
-- 容器
----------------------------------------------------------------------
-- 获取doer中的sub_doer_key子doers  没有id一层的包裹
---@param parentDoer Doer
---@param filterFunc fun(subDoer:Doer)
---@return Doer[]
function SubDoerUtil3.GetSubDoers(parentDoer, subDoerKey, id, filterFunc)
	---@type Doer[]
	local dict = SubDoerUtil3.GetSubDoerDict_ToEdit(parentDoer, subDoerKey)
	if not id then
		local result = {}
		for _, subDoer in pairs(dict) do
			if not filterFunc or filterFunc(subDoer) then
				table.insert(result, subDoer)
			end
			return result
		end
	end
	local result = {}
	for _, subDoer in pairs(dict) do
		if subDoer:GetId() == id then
			if not filterFunc or filterFunc(subDoer) then
				table.insert(result, subDoer)
			end
		end
	end
	return result
end

-- 获取doer中的sub_doer_key子doers  没有id一层的包裹 可以直接插入删除
---@return table<string,Doer>
function SubDoerUtil3.GetSubDoerDict_ToEdit(parentDoer, subDoerKey)
	return parentDoer:GetOrAddTmp(subDoerKey, function()
		return {}
	end)
end




-- doer中sub_doer_key的子doers
---@param parentDoer Doer
---@param filterFunc fun(sub_doer:Doer)
function SubDoerUtil3.HasSubDoers(parentDoer, subDoerKey, id, filterFunc)
	return not table.IsNilOrEmpty(SubDoerUtil3.GetSubDoers(parentDoer, subDoerKey, id, filterFunc))
end

-- 获取doer中的sub_doer_key的子doer数量
---@param parentDoer Doer
function SubDoerUtil3.GetSubDoersCount(parentDoer, subDoerKey, id, filterFunc)
	return table.Count(SubDoerUtil3.GetSubDoers(parentDoer, subDoerKey, id, filterFunc))
end


-- 获取doer中的sub_doer_key的id_or_rid子doer
---@param parentDoer Doer
---@return Doer
function SubDoerUtil3.GetSubDoer(parentDoer, subDoerKey, idOrRid)
	if IdUtil.IsId(idOrRid) then
		--id的情况
		local id = idOrRid
		for _, subDoer in ipairs(SubDoerUtil3.GetSubDoers(parentDoer, subDoerKey)) do
			if subDoer:GetId() == id then
				return subDoer
			end
		end
		return nil
	else
		-- rid的情况
		local rid = idOrRid
		return SubDoerUtil3.GetSubDoerDict_ToEdit(parentDoer, subDoerKey)[rid]
	end
end

-- 清除doer中是否有sub_doer_key的子doers
---@param parentDoer Doer
---@param clearSubDoerFunc fun(sub_doer:Doer)
function SubDoerUtil3.ClearSubDoers(parentDoer, subDoerKey, clearSubDoerFunc)
	local list = SubDoerUtil3.GetSubDoers(parentDoer, subDoerKey)
	for i = #list, 1, -1 do
		local subDoer = list[i]
		clearSubDoerFunc(subDoer)
		subDoer:SetEnv(nil)
		subDoer:Destruct()
	end
	table.RemoveAll_Dict(SubDoerUtil3.GetSubDoerDict_ToEdit(parentDoer, subDoerKey))
end

return SubDoerUtil3