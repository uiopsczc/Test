--AutoGen. DO NOT EDIT!!!
--ExportFrom ZHS召唤兽.xlsx[召唤兽加护技能表]
---@class CfgSummonBeastGuardSkillData
---@field id
---@field summonBeastId
---@field star
---@field starFighting
---@field skillDescLang1
---@field skillDescArgs1
---@field skillDescLang2
---@field skillDescArgs2
---@field skillDescLang3
---@field skillDescArgs3
---@field skillDescLang4
---@field skillDescArgs4
local _



---@type CfgSummonBeastGuardSkillData[]
local dataList = {
  {
    id = [=[1]=],
    summonBeastId = 411001,
    star = 0,
    starFighting = 1000,
    skillDescLang1 = [=[]=],
    skillDescArgs1 = json:decode([=[[]]=]),
    skillDescLang2 = [=[]=],
    skillDescArgs2 = json:decode([=[[1, 2, 3]]=]),
    skillDescLang3 = [=[]=],
    skillDescArgs3 = json:decode([=[{}]=]),
    skillDescLang4 = [=[]=],
    skillDescArgs4 = json:decode([=[[]]=]),
  },
  {
    id = [=[2]=],
    summonBeastId = 411001,
    star = 1,
    starFighting = 2000,
    skillDescLang1 = [=[]=],
    skillDescArgs1 = json:decode([=[[]]=]),
    skillDescLang2 = [=[]=],
    skillDescArgs2 = json:decode([=[["hello", "world"]]=]),
    skillDescLang3 = [=[]=],
    skillDescArgs3 = json:decode([=[{}]=]),
    skillDescLang4 = [=[]=],
    skillDescArgs4 = json:decode([=[[]]=]),
  },
  {
    id = [=[3]=],
    summonBeastId = 411001,
    star = 2,
    starFighting = 3000,
    skillDescLang1 = [=[]=],
    skillDescArgs1 = json:decode([=[[]]=]),
    skillDescLang2 = [=[]=],
    skillDescArgs2 = json:decode([=[[]]=]),
    skillDescLang3 = [=[]=],
    skillDescArgs3 = json:decode([=[{"ab": "cd", "ef": 6}]=]),
    skillDescLang4 = [=[]=],
    skillDescArgs4 = json:decode([=[[]]=]),
  },
  {
    id = [=[4]=],
    summonBeastId = 411002,
    star = 0,
    starFighting = 4000,
    skillDescLang1 = [=[]=],
    skillDescArgs1 = json:decode([=[[]]=]),
    skillDescLang2 = [=[]=],
    skillDescArgs2 = json:decode([=[[]]=]),
    skillDescLang3 = [=[]=],
    skillDescArgs3 = json:decode([=[{}]=]),
    skillDescLang4 = [=[]=],
    skillDescArgs4 = json:decode([=[[]]=]),
  },
  {
    id = [=[5]=],
    summonBeastId = 411001,
    star = 5,
    starFighting = 1000,
    skillDescLang1 = [=[陈智权]=],
    skillDescArgs1 = json:decode([=[[]]=]),
    skillDescLang2 = [=[]=],
    skillDescArgs2 = json:decode([=[[]]=]),
    skillDescLang3 = [=[]=],
    skillDescArgs3 = json:decode([=[{}]=]),
    skillDescLang4 = [=[]=],
    skillDescArgs4 = json:decode([=[[]]=]),
  },
}

local indexDict = {
  uniqueIndexesList = {
    id = {
      [
        [=[1]=]
      ] = 1,
      [
        [=[2]=]
      ] = 2,
      [
        [=[3]=]
      ] = 3,
      [
        [=[4]=]
      ] = 4,
      [
        [=[5]=]
      ] = 5,
    },
    summonBeastId_and_star = {
      [
        [=[411001.0]=]
      ] = 1,
      [
        [=[411001.1]=]
      ] = 2,
      [
        [=[411001.2]=]
      ] = 3,
      [
        [=[411002.0]=]
      ] = 4,
      [
        [=[411001.5]=]
      ] = 5,
    },
  },
  multiplyIndexesList = {
    summonBeastId = {
      [
        [=[411001]=]
      ] = {
        1,
        2,
        3,
        5,
      },
      [
        [=[411002]=]
      ] = {
        4,
      },
    },
    summonBeastId_and_starFighting = {
      [
        [=[411001.1000]=]
      ] = {
        1,
        5,
      },
      [
        [=[411001.2000]=]
      ] = {
        2,
      },
      [
        [=[411001.3000]=]
      ] = {
        3,
      },
      [
        [=[411002.4000]=]
      ] = {
        4,
      },
    },
  },
}

local cfg = {}

---@return CfgSummonBeastGuardSkillData[]
function cfg.All()
  return dataList
end

---@return CfgSummonBeastGuardSkillData
function cfg.Get(index)
  return dataList[index]
end

---@return CfgSummonBeastGuardSkillData
function cfg.GetById(id)
  local key = tostring(id)
  return cfg.Get(indexDict.uniqueIndexesList.id[key])
end

function cfg.IsContainsKeyById(id)
  local key = tostring(id)
  return indexDict.uniqueIndexesList.id[key] ~= nil
end

---@return CfgSummonBeastGuardSkillData
function cfg.GetBySummonBeastIdAndStar(summonBeastId,star)
  local keys = {tostring(summonBeastId),tostring(star)}
  local key = table.concat(keys, ".")
  return cfg.Get(indexDict.uniqueIndexesList.summonBeastId_and_star[key])
end

function cfg.IsContainsKeyBySummonBeastIdAndStar(summonBeastId,star)
  local keys = {tostring(summonBeastId),tostring(star)}
  local key = table.concat(keys, ".")
  return indexDict.uniqueIndexesList.summonBeastId_and_star[key] ~= nil
end

---@return CfgSummonBeastGuardSkillData[]
function cfg.GetBySummonBeastId(summonBeastId)
  local key = tostring(summonBeastId)
  if not self._multiplyIndexesList_SummonBeastIdDict then
    self._multiplyIndexesList_SummonBeastIdDict = {}
  end
  if self._multiplyIndexesList_SummonBeastIdDict[key] then
    return self._multiplyIndexesList_SummonBeastIdDict[key]
  end
  ---@type CfgSummonBeastGuardSkillData[]
  local result = {}
  local indexes = indexDict.multiplyIndexesList.summonBeastId[key]
  for _, index in ipairs(indexes) do
    table.insert(result, cfg.Get(index))
  end
  self._multiplyIndexesList_SummonBeastIdDict[key] = result
  return self._multiplyIndexesList_SummonBeastIdDict[key]
end

function cfg.IsContainsKeyBySummonBeastId(summonBeastId)
  local key = tostring(summonBeastId)
  return indexDict.multiplyIndexesList.summonBeastId[key] ~= nil
end

---@return CfgSummonBeastGuardSkillData[]
function cfg.GetBySummonBeastIdAndStarFighting(summonBeastId,starFighting)
  local keys = {tostring(summonBeastId),tostring(starFighting)}
  local key = table.concat(keys, ".")
  if not self._multiplyIndexesList_SummonBeastIdAndStarFightingDict then
    self._multiplyIndexesList_SummonBeastIdAndStarFightingDict = {}
  end
  if self._multiplyIndexesList_SummonBeastIdAndStarFightingDict[key] then
    return self._multiplyIndexesList_SummonBeastIdAndStarFightingDict[key]
  end
  ---@type CfgSummonBeastGuardSkillData[]
  local result = {}
  local indexes = indexDict.multiplyIndexesList.summonBeastId_and_starFighting[key]
  for _, index in ipairs(indexes) do
    table.insert(result, cfg.Get(index))
  end
  self._multiplyIndexesList_SummonBeastIdAndStarFightingDict[key] = result
  return self._multiplyIndexesList_SummonBeastIdAndStarFightingDict[key]
end

function cfg.IsContainsKeyBySummonBeastIdAndStarFighting(summonBeastId,starFighting)
  local keys = {tostring(summonBeastId),tostring(starFighting)}
  local key = table.concat(keys, ".")
  return indexDict.multiplyIndexesList.summonBeastId_and_starFighting[key] ~= nil
end

return cfg
