--AutoGen. DO NOT EDIT!!!
--ExportFrom CS测试\CS测试表.xlsx[测试表]
---@class CfgTestData
---@field id
---@field name
---@field country
---@field ageDict
local _



---@type CfgTestData[]
local dataList = {
  {
    id = [=[3]=],
    name = [=[chenzhiquan]=],
    country = [=[china]=],
    ageDict = json:decode([=[{}]=]),
  },
  {
    id = [=[2]=],
    name = [=[uiopsczc]=],
    country = [=[usa]=],
    ageDict = json:decode([=[{"星哥": [1, 2, 3]}]=]),
  },
  {
    id = [=[1]=],
    name = [=[dadaxing]=],
    country = [=[sb]=],
    ageDict = json:decode([=[{"星仔不不": [4, 5, 6]}]=]),
  },
}

local indexDict = {
  uniqueIndexesList = {
    id = {
      [
        [=[3]=]
      ] = 1,
      [
        [=[2]=]
      ] = 2,
      [
        [=[1]=]
      ] = 3,
    },
    name = {
      [
        [=[chenzhiquan]=]
      ] = 1,
      [
        [=[uiopsczc]=]
      ] = 2,
      [
        [=[dadaxing]=]
      ] = 3,
    },
  },
  multiplyIndexesList = {
    id_and_name = {
      [
        [=[3.chenzhiquan]=]
      ] = {
        1,
      },
      [
        [=[2.uiopsczc]=]
      ] = {
        2,
      },
      [
        [=[1.dadaxing]=]
      ] = {
        3,
      },
    },
    name_and_country = {
      [
        [=[chenzhiquan.china]=]
      ] = {
        1,
      },
      [
        [=[uiopsczc.usa]=]
      ] = {
        2,
      },
      [
        [=[dadaxing.sb]=]
      ] = {
        3,
      },
    },
  },
}

local cfg = {}

---@return CfgTestData[]
function cfg.All()
  return dataList
end

---@return CfgTestData
function cfg.Get(index)
  return dataList[index]
end

---@return CfgTestData
function cfg.GetById(id)
  local key = tostring(id)
  return cfg.Get(indexDict.uniqueIndexesList.id[key])
end

function cfg.IsContainsKeyById(id)
  local key = tostring(id)
  return indexDict.uniqueIndexesList.id[key] ~= nil
end

---@return CfgTestData
function cfg.GetByName(name)
  local key = tostring(name)
  return cfg.Get(indexDict.uniqueIndexesList.name[key])
end

function cfg.IsContainsKeyByName(name)
  local key = tostring(name)
  return indexDict.uniqueIndexesList.name[key] ~= nil
end

---@return CfgTestData[]
function cfg.GetByIdAndName(id,name)
  local keys = {tostring(id),tostring(name)}
  local key = table.concat(keys, ".")
  if not self._multiplyIndexesList_IdAndNameDict then
    self._multiplyIndexesList_IdAndNameDict = {}
  end
  if self._multiplyIndexesList_IdAndNameDict[key] then
    return self._multiplyIndexesList_IdAndNameDict[key]
  end
  ---@type CfgTestData[]
  local result = {}
  local indexes = indexDict.multiplyIndexesList.id_and_name[key]
  for _, index in ipairs(indexes) do
    table.insert(result, cfg.Get(index))
  end
  self._multiplyIndexesList_IdAndNameDict[key] = result
  return self._multiplyIndexesList_IdAndNameDict[key]
end

function cfg.IsContainsKeyByIdAndName(id,name)
  local keys = {tostring(id),tostring(name)}
  local key = table.concat(keys, ".")
  return indexDict.multiplyIndexesList.id_and_name[key] ~= nil
end

---@return CfgTestData[]
function cfg.GetByNameAndCountry(name,country)
  local keys = {tostring(name),tostring(country)}
  local key = table.concat(keys, ".")
  if not self._multiplyIndexesList_NameAndCountryDict then
    self._multiplyIndexesList_NameAndCountryDict = {}
  end
  if self._multiplyIndexesList_NameAndCountryDict[key] then
    return self._multiplyIndexesList_NameAndCountryDict[key]
  end
  ---@type CfgTestData[]
  local result = {}
  local indexes = indexDict.multiplyIndexesList.name_and_country[key]
  for _, index in ipairs(indexes) do
    table.insert(result, cfg.Get(index))
  end
  self._multiplyIndexesList_NameAndCountryDict[key] = result
  return self._multiplyIndexesList_NameAndCountryDict[key]
end

function cfg.IsContainsKeyByNameAndCountry(name,country)
  local keys = {tostring(name),tostring(country)}
  local key = table.concat(keys, ".")
  return indexDict.multiplyIndexesList.name_and_country[key] ~= nil
end

return cfg
