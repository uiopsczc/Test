---@class UnitManager:TickObject
local UnitManager = Class("UnitManager", TickObject)

function UnitManager:Init(...)
	UnitManager.super.Init(self, ...)
	self._graphicComponent:SetGameObject(GameObject.Find("UnitManager") or GameObject("UnitManager"))
	---@type table<string,Unit> @key是faction
	self.unitDict = {}
	self:InitFactionUnitDict()
	self:InitFactionStateInfoDict()

	self:AddListener(UnitEventNameConst.On_Unit_Guid_Change, function(...)
		self:OnUnitGuidChange(...)
	end)
	self:AddListener(UnitEventNameConst.On_Unit_Faction_Change, function(...)
		self:OnUnitFactionChange(...)
	end)
end

function UnitManager:__Update(deltaTime, unscaledDeltaTime)
	UnitManager.super.__Update(self, deltaTime, unscaledDeltaTime)
	for _, unit in pairs(self.unitDict) do
		if not unit:IsDead() and not unit:IsDestroyed() then
			unit:ReduceSpellCoolDown(deltaTime)
		end
	end
end

function UnitManager:CreateUnit(argDict)
	local unitOld = self:GetUnit(argDict.guid)
	if unitOld then
		self:RemoveUnit(unitOld:GetGuid())
	end
	local unit = self:AddChild(argDict.guid, Unit)
	unit:Build(argDict)
	self.unitDict[unit.key] = unit
	self.factionUnitDict[unit:GetFaction()][unit:GetGuid()] = unit
	if unit.cfgUnitData.aiClassPathLua then
		unit:RunAI(unit.cfgUnitData.aiClassPathLua)
	end
	return unit
end

---@param unit Unit
function UnitManager:UpdateUnit(unit, argDict)
	local newGuid = argDict.guid
	local oldGuid = unit:GetGuid()
	if newGuid and oldGuid then
		self:Broadcast(UnitEventNameConst.On_Unit_Guid_Change, oldGuid, newGuid)
	end
	if newGuid then
		argDict.guid = nil
	end
	unit:UpdateUnit(argDict)
end

function UnitManager:GetUnit(guid)
	return self:GetChild(guid)
end

function UnitManager:GetUnitDict()
	return self.unitDict
end

function UnitManager:RemoveUnit(guid)
	local unit = self:GetUnit(guid)
	if unit then
		self:RemoveChild(guid)
		self.unitDict[guid] = nil
		if unit:GetFaction() then
			self.factionUnitDict[unit:GetFaction()][guid] = nil
		end
	end
end

function UnitManager:OnUnitGuidChange(oldGuid, newGuid)
	local unit = self:GetUnit(oldGuid)
	if unit and oldGuid ~= newGuid then
		self.unitDict[oldGuid] = nil
		self.keyToChildDict[oldGuid] = nil
		local index = table.IndexOf_Array(self.childrenKeyList, oldGuid)

		self.unitDict[newGuid] = unit
		self.keyToChildDict[newGuid] = unit
		self.childrenKeyList[index] = newGuid
	end
end

----------------------------------------------------------------------
-- Faction相关
----------------------------------------------------------------------
function UnitManager:InitFactionUnitDict()
	---@type table<string,table<string,Unit>>  @key是faction,sub_key是guid
	self.factionUnitDict = {}
	for _, faction in ipairs(FactionConst.Faction_List) do
		self.factionUnitDict[faction] = {}
	end
end

function UnitManager:InitFactionStateInfoDict()
	-- 初始化阵营间能否攻击，加血等
	---@type table<string,table<string,FactionState>>
	self.factionState_dict = {}

	self:SetFactionStateIsCanAttack(FactionConst.A_Faction, FactionConst.A_Faction, false)
	self:SetFactionStateIsCanHelp(FactionConst.A_Faction, FactionConst.A_Faction, true)
	self:SetFactionStateIsCanAttack(FactionConst.A_Faction, FactionConst.B_Faction, true)
	self:SetFactionStateIsCanHelp(FactionConst.A_Faction, FactionConst.B_Faction, false)

	self:SetFactionStateIsCanAttack(FactionConst.B_Faction, FactionConst.A_Faction, true)
	self:SetFactionStateIsCanHelp(FactionConst.B_Faction, FactionConst.A_Faction, false)
	self:SetFactionStateIsCanAttack(FactionConst.B_Faction, FactionConst.B_Faction, false)
	self:SetFactionStateIsCanHelp(FactionConst.B_Faction, FactionConst.B_Faction, true)
end

-- 如果找敌人，找“不是自己阵营且单向阵营关系can_attack = true”
-- 如果是找自己人，找“阵营相同，或者单向阵营关系can_help = true”
-- check_state 参数：
-- 1. enemy 判断是否敌人
-- 2. friend 判断是否自己人
function UnitManager:CheckFaction(faction1, faction2, checkState)
	if faction2 then
		local factionState = self.factionState_dict[faction1][faction2]
		-- 找敌人
		if checkState == "enemy" then
			if faction1 ~= faction2 and factionState.is_can_attack then
				return true
			end
		elseif checkState == "friend" then
			-- 找自己人
			if faction1 == faction2 or factionState.is_can_help then
				return true
			end
		else
			-- all
			return true
		end
	end
end

function UnitManager:SetFactionState(faction1, faction2, stateKey, stateValue, isBothSet)
	if faction1 and faction2 then
		if not self.factionState_dict[faction1] then
			self.factionState_dict[faction1] = {}
		end
		if not self.factionState_dict[faction1][faction2] then
			self.factionState_dict[faction1][faction2] = FactionState.New()
		end
		self.factionState_dict[faction1][faction2][stateKey] = stateValue

		if isBothSet then
			self:SetFactionState(faction2, faction1, stateKey, stateValue)
		end
	end
end

function UnitManager:SetFactionStateIsCanAttack(faction1, faction2, isCanAttack, isBothSet)
	self:SetFactionState(faction1, faction2, "is_can_attack", isCanAttack, isBothSet)
end

function UnitManager:SetFactionStateIsCanHelp(faction1, faction2, isCanHelp, isBothSet)
	self:SetFactionState(faction1, faction2, "is_can_help", isCanHelp, isBothSet)
end

function UnitManager:OnUnitFactionChange(unitGuid, oldFaction, newFaction)
	local unit = self:GetUnit(unitGuid)
	if unit and oldFaction ~= newFaction then
		self.factionUnitDict[oldFaction][unitGuid] = nil
		self.factionUnitDict[newFaction][unitGuid] = unit
	end
end

function UnitManager:GetMatchFactionList(faction, checkScope)
	local factionList = {}
	for _, curFaction in ipairs(FactionConst.Faction_List) do
		if self:CheckFaction(curFaction, faction, checkScope) then
			table.insert(factionList, curFaction)
		end
	end
	return factionList
end

function UnitManager:GetFactionUnitList(factionList)
	local factionUnitList = {}
	for _, faction in ipairs(factionList) do
		for _, unit in pairs(self.factionUnitDict[faction]) do
			table.insert(factionUnitList, unit)
		end
	end
	return factionUnitList
end
----------------------------------------------------------------------
-- 选择Unit相关
----------------------------------------------------------------------
---@return Unit[]
function UnitManager:SelectUnit(conditionDict)
	local rangeInfo = conditionDict.rangeInfo
	local origin = conditionDict.origin
	local startPosition = origin
	local scope = conditionDict.scope
	if not IsVector3(origin) then
		startPosition = origin:GetPosition()
	end
	local maxDistance = rangeInfo.radius
	if rangeInfo.mode == "rect" then
		maxDistance = math.max(maxDistance or 0, rangeInfo.height)
		maxDistance = math.max(maxDistance, rangeInfo.width)
	end

	local order = conditionDict.order
	local faction = conditionDict.faction
	local candidateList = conditionDict.candidateList
	local isOnlyAttackable = conditionDict.isOnlyAttackable
	local isCanSelectHideUnit = conditionDict.isCanSelectHideUnit

	local targetUnitList = {}
	local matchFactionList = self:GetMatchFactionList(faction, scope)

	-- 有候选目标时，则在候选目标里选择，不考虑忽略阵营
	local checkUnitList = candidateList or self:GetFactionUnitList(matchFactionList)
	for _, unit in ipairs(checkUnitList) do
		if not unit:IsDestroyed() and not unit:IsDead() and
			self:__CheckUnit(unit, origin, rangeInfo, faction, scope, isOnlyAttackable, isCanSelectHideUnit) then
			table.insert(targetUnitList, unit)
		end
	end

	if order == "distance" and #targetUnitList > 1 then
		table.QuickSort_Array(targetUnitList, function(a, b)
			return a:Distance(origin) <= b:Distance(origin)
		end)
	end
	return targetUnitList
end

---@param unit Unit
---@param origin @原点
function UnitManager:__CheckUnit(unit, origin, rangeInfo, faction, scope, isOnlyAttackable, isCanSelectHideUnit)
	if unit.cfgUnitData.type == "技能物体" then
		return
	end
	if isOnlyAttackable then
		if unit:IsInvincible() then
			return false
		end
	end
	if scope ~= "all" then
		if (not scope) or (scope and scope ~= "friend") then
			if not self:CheckFaction(faction, unit:GetFaction(), "enemy") then
				return false
			end
		else
			if not self:CheckFaction(faction, unit:GetFaction(), "friend") then
				return false
			end
		end
	end
	if not isCanSelectHideUnit then
		if unit:IsHide() and not unit:IsExpose() then
			return false
		end
	end
	if not origin or not rangeInfo then
		return false
	end

	if rangeInfo.mode == "circle" then
		local radius = rangeInfo.radius
		if not radius or radius < 0 then
			return false
		end
		if unit:Distance(origin) > radius then
			return false
		end
		local angle = rangeInfo.angle
		if not angle then
			return true
		end
		local forward = rangeInfo.rotation:Forward()
		if not IsVector3(origin) then
			origin = origin:GetPosition()
		end
		local right = forward * Quaternion.AngleAxis(90)
		local dirR = (unit:GetPosition() + (right * radius)) - origin
		local dirL = (unit:GetPosition() + (-right * radius)) - origin
		return (Vector3.Angle(forward, dirL) < angle / 2) or (Vector3.Angle(forward, dirR) < angle / 2)
	elseif rangeInfo.mode == "rect" then
		if not rangeInfo.height or not rangeInfo.width or rangeInfo.height < 0 or rangeInfo.width < 0 then
			return false
		end
		if not rangeInfo.rotation then
			rangeInfo.rotation = Quaternion.New(0, 0, 0, 0)
		end
		local pos = unit:GetPosition()
		if not IsVector3(origin) then
			origin = origin:GetPosition()
		end
		pos = pos - origin
		pos = pos * (-rangeInfo.rotation)
		local unitRadius = unit:GetRadius() or 0
		if rangeInfo.isUseCenter then
			return math.abs(pos.x) < rangeInfo.width / 2 + unitRadius and math.abs(pos.z) < rangeInfo.height / 2 + unitRadius
		else
			--左下角
			return math.abs(pos.x) < rangeInfo.width + unitRadius and math.abs(pos.z) < rangeInfo.height + unitRadius
		end
	end
	return false
end

return UnitManager