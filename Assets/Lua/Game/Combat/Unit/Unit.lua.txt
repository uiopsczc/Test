---@class Unit:GameObjectEntity
---@field _position Vector3
---@field _rotation Quaternion
---@field _scale number
---@field _buildOkAnimationName string
local Unit = Class("Unit", GameObjectEntity)

function Unit:Init()
	Unit.super.Init(self)
	self._isInSight = true -- 是否在视野内，用于优化，由unitManager设置
	---@type UnitStateComponent
	self._unitStateComponent = self:AddComponent(nil, UnitStateComponent)
	---@type UnitSpellComponent
	self._unitSpellComponent = self:AddComponent(nil, UnitSpellComponent)
	---@type UnitGraphicComponent
	self._unitGraphicComponent = self:GetGraphicComponent()
	---@type BuffsComponent
	self._buffsComponent = self:AddComponent(nil, BuffsComponent, self)
	---@type PropertyComponent
	self._propertyComponent = self:AddComponent(nil, PropertyComponent, self)
	---@type UnitMoveComponent
	self._unitMoveComp = self:AddChild(nil, UnitMoveComponent, self)

end

---@return UnitGraphicComponent
function Unit:CreateGraphicComponent()
	return self:AddComponent(nil, UnitGraphicComponent, self:GetResLoadComponent())
end

function Unit:UpdateUnit(argDict)
	for key, value in pairs(argDict) do
		if key == "hp" then
			self:SetHp(value)
		elseif key == "faction" then
			self:SetFaction(value)
		elseif key == "level" then
			self:SetLevel(value)
		elseif key == "position" then
			self:SetPosition(value)
		elseif key == "rotation" then
			self:SetRotation(value)
		elseif key == "unitScale" then
			self._unitGraphicComponent:SetUnitScale(value)
		else
			self[key] = value
		end
	end
end

----------------------------------------------------------------------
-- 构建模型相关
----------------------------------------------------------------------
function Unit:Build(argDict)
	self._unitId = argDict.unitId
	self._cfgUnitData = CfgUnit.get_by_id(self._unitId)
	self._level = argDict.level
	self._playerName = argDict.playerName
	self._showNameOffset = argDict.showNameOffset
	self._isNotShowHeadBlood = argDict.isNotShowHeadBlood
	-- 是否需要保持尸体
	self._isKeepDeadBody = argDict.isKeepDeadBody or self._cfgUnitData.isKeepDeadBody
	if argDict.ownerUnitGuid then
		self._ownerUnit = global.client.combat:GetUnitManager():GetUnit(argDict.ownerUnitGuid)
	end
	self._faction = argDict.faction
	self:SetPosition(argDict.position or Vector3.zero)
	self:SetEulerAngles(argDict.eulerAngles or Vector3.zero)
	local scale = argDict.scale
	if not scale then
		self._cfgUnitData.scale = self._cfgUnitData.scale and Vector3.New(self._cfgUnitData.scale[1], self._cfgUnitData.scale[2], self._cfgUnitData.scale[3]) or Vector3.one
	end
	self:SetScale(scale)

	---@type UnitLockTargetInfo
	self._unitLockTargetInfo = UnitLockTargetInfo.New()
	---@type PropertyComponent
	self._propertyComponent:InitArgDict(argDict)
	self._unitGraphicComponent:Build(argDict)

	self._unitStateComponent:InitMixedStates()
	-- 添加被动buff
	local passiveBuffIds = self:GetPassiveBuffIds()
	if passiveBuffIds then
		for _, passiveBuffId in ipairs(passiveBuffIds) do
			self._buffsComponent:AddBuff(passiveBuffId, self)
		end
	end
	-- 设置hpPct百分比
	if argDict.hpPct then
		self:SetHp(self:GetMaxHp() * argDict.hpPct, true)
	else
		self:SetHp(argDict.hp or self:GetMaxHp(), true)
	end
	self:UpdateMixedStates()
end

----------------------------------------------------------------------
-- 伤害相关
----------------------------------------------------------------------
function Unit:TakeDamage(damageValue, sourceUnit, spell)
	if self:IsDead() or self:IsInvincible() then
		return 0
	end
	if self:IsCanNotBeTakeDamage() then
		return 0
	end
	if self._aiComp and self._aiComp.BeHit then
		self._aiComp:BeHit(sourceUnit, damageValue)
	end
	--以后用于计算血条收到伤害效果
	local oldHp = self:GetHp()
	self:SetHp(math.max(0, self:GetHp() - damageValue))
	self:OnHpChange(sourceUnit, oldHp, self:GetHp())
	self:Broadcast(UnitEventNameConst.On_Unit_Hurt, sourceUnit, self, spell, damageValue)

	if self:GetHp() <= 0 then
		self:Broadcast(UnitEventNameConst.On_Before_Unit_Dead, sourceUnit, self, spell, damageValue) --回调监听
		self:OnKilled(sourceUnit, spell)
	end
	return damageValue
end

-- 治疗
function Unit:Heal(healValue, sourceUnit)
	if self:IsDead() or self:IsCanNotBeHeal() then
		return 0
	end
	local oldHp = self:GetHp()
	self:SetHp(math.min(self:GetHp() + healValue, self:GetMaxHp()))
	self:OnHpChange(sourceUnit, oldHp, self:GetHp())
	return healValue
end
----------------------------------------------------------------------
-- 死亡相关
----------------------------------------------------------------------
---@param spell SpellBase
function Unit:OnKilled(sourceUnit, spell, isPlayDeadAnimation, isWaitingRebirth, isKeepDeadBody)
	self:Broadcast(UnitEventNameConst.On_Unit_Kill_Target, sourceUnit, self, spell)
	if self._unitMoveComp:GetMoveType() == "beThrown" or self._unitMoveComp:IsGetCaught() then
		self._unitMoveComp:SetMoveType(nil)
		self._unitMoveComp:SetIsGetCaught(false)
		---@type UnitBeThrownInfo
		local unitBeThrownInfo = UnitBeThrownInfo.New()
		unitBeThrownInfo:SetEndPos(global.client.combat:GetPathManager():GetGroundPos(self._position))
		unitBeThrownInfo:SetDuration(0.1)
		unitBeThrownInfo:SetHeight(0)
		self:BeThrown(unitBeThrownInfo)
	end

	if self._unitModelInfoDict["main"]:GetPath() ~= self:GetModelPath() then
		self:BuildModel(self:GetModelPath())
	end

	self._unitStateComponent:SetIsDead(true)
	self:UpdateMixedStates()
	if isKeepDeadBody then
		self._isKeepDeadBody = true
	end
	if isPlayDeadAnimation then
		self:MoveStop()
		local deadBodyDelay = self._cfgUnitData.deadBodyDelay or 0.5
		local deathEffectId = self:GetDeathEffectId()
		if deathEffectId then
			local cfgEffectData = CfgEffect.get_by_id(deathEffectId)
			local groundEffectPos = self:GetSocketPosition(cfgEffectData.socketName1)
			global.client.combat:GetEffectManager():CreateGroundEffect(deathEffectId, self, groundEffectPos, self:GetRotation():ToEulerAngles(), cfgEffectData.duration)
		end
		local animation = self._unitGraphicComponent:GetAnimation()
		local animatorComp = self._unitGraphicComponent:GetAnimatorComp()
		if IsNotNil(animation) then
			---@type CS.UnityEngine.AnimationState
			local dieAnimationState = animation:get_Item(AnimationNameConst.die)
			if dieAnimationState then
				self._unitGraphicComponent:PlayAnimation(AnimationNameConst.die)
				deadBodyDelay = dieAnimationState.length + 1
			end
			if not isWaitingRebirth then
				self:AddTimer(function()
					self:_OnDieOver()
				end, nil, deadBodyDelay)
			end
		else
			animatorComp:PlayAnimation(AnimationNameConst.die, true)
			self:AddTimer(function()
				self:_OnDieOver()
			end, nil, deadBodyDelay)
		end
	else
		global.client.combat:GetUnitManager():RemoveUnit(self:GetKey())
	end
end

function Unit:_OnDieOver()
	if self._isKeepDeadBody then
		return
	end
	if self:GetDeathEffectId() then
		self:SetIsMoveWithMoveAnimation(false)
		self:AddTimer(function()
			self:_OnDieBuryOver()
		end, nil, 3)
	else
		self:_OnDieBuryOver()
	end
end

function Unit:_OnDieBuryOver()
	global.client.combat:GetUnitManager():RemoveUnit(self:GetKey())
end

----------------------------------------------------------------------
-- Faction相关
----------------------------------------------------------------------
function Unit:SetFaction(newFaction)
	local oldFaction = self._faction
	self._faction = newFaction
	self:OnFactionChange(oldFaction, newFaction)
end

function Unit:GetFaction()
	return self._faction
end

function Unit:OnFactionChange(oldValue, newValue)
	if oldValue ~= newValue then
		self:Broadcast(UnitEventNameConst.On_Unit_Faction_Change, self:GetGuid(), oldValue, newValue)
	end
end

----------------------------------------------------------------------
-- 属性相关
----------------------------------------------------------------------
function Unit:OnPropertyChanged(oldCalcPropDict, newCalcPropDict, calcPropDictDiff)
	for key, value in pairs(calcPropDictDiff) do
		local oldValue = oldCalcPropDict[key]
		if key == "技能冷却减少百分比" or key == "攻击速度" then
			self:OnSpellCoolDownRateChange()
		elseif key == "移动速度" then
			self:OnSpeedChange(oldValue, value)
		elseif key == "生命上限" then
			self:OnMaxHpChange(oldValue, value)
		end
	end
end

function Unit:GetCalcPropValue(propertyKey)
	return self._propertyComponent:GetCalcPropDict()[propertyKey]
end



----------------------------------------------------------------------
-- Buff,State相关
----------------------------------------------------------------------
function Unit:IsHasBuff(buffId)
	return self._buffsComponent:IsHasBuff(buffId)
end

function Unit:GetBuffCount()
	return self._buffsComponent:GetBuffCount()
end

function Unit:GetDebuffCount()
	return self._buffsComponent:GetDebuffCount()
end

function Unit:IsHasState(stateName)
	return self._buffsComponent:IsHasState(stateName)
end


----------------------------------------------------------------------
-- Move相关
----------------------------------------------------------------------
---@param moveToTargetPos Vector3
---@param duration number
function Unit:MoveTo(moveToTargetPos, duration)
	if not self:GetGraphicComponent():GetTransform() then
		return
	end
	moveToTargetPos = self._cfgUnitData.offsetY and (moveToTargetPos + Vector3(0, self._cfgUnitData.offsetY, 0)) or moveToTargetPos
	global.client.moveManager:MoveTo(self:GetTransform(), moveToTargetPos, duration)
end

function Unit:StopMoveTo()
	if not self:GetTransform() then
		return
	end
	global.client.moveManager:StopMoveTo(self:GetTransform())
end

function Unit:Move(targetPos, speed)
	if not self:IsCanMove() then
		return
	end
	self._unitMoveComp:Move(targetPos, speed)
end

function Unit:MoveByPath(path, speed)
	if not self:IsCanMove() then
		return
	end
	self._unitMoveComp:MoveByPath(path, speed)
end

function Unit:MoveStop(rotation, pos)
	self._unitMoveComp:MoveStop(rotation, pos)
end

function Unit:BeThrown(unitBeThrownInfo)
	if self:IsDead() or self:IsImmuneControl() then
		return
	end
	self._unitMoveComp:BeThrown(unitBeThrownInfo)
end

function Unit:StopBeThrown(isEnd)
	self._unitMoveComp:StopBeThrown(isEnd)
end

function Unit:SetIsMoveWithMoveAnimation(isMoveWithMoveAnimation)
	self._unitMoveComp:SetIsMoveWithMoveAnimation(isMoveWithMoveAnimation)
end

function Unit:FaceTo(rotation)
	if not self:GetTransform() then
		return
	end
end

function Unit:OnlyFaceTo(rotation)
	if not self:GetTransform() then
		return
	end
end

function Unit:FaceToDir(dir)
	if not self:GetTransform() then
		return
	end
end

function Unit:OnlyFaceToDir(dir)
	if not self:GetTransform() then
		return
	end
end

function Unit:LookAt(unitOrEulerAngle, mode)
	self._unitMoveComp:LookAt(unitOrEulerAngle, mode)
end

---@param target Unit|CS.UnityEngine.Transform|Vector3|IPosition
function Unit:Distance(target)
	local radius = self._radius
	if IsUnit(target) then
		radius = radius + target:GetRadius()
		target = target:GetPosition()
	elseif IsTransform(target) then
		target = target.position
	elseif IsVector3(target) then
		target = target
	elseif IsIPosition(target) then
		if target.unit then
			return self:Distance(target.unit)
		else
			return self:Distance(target:GetPosition())
		end
	end
	return Vector3.Distance(self:GetPosition() - target) - radius
end

----------------------------------------------------------------------
--
----------------------------------------------------------------------
function Unit:PlayAnimation(animationName, blendTime, speed, faceToPosition, isNotMoveStop)
	self._unitGraphicComponent:PlayAnimation(animationName, blendTime, speed, faceToPosition, isNotMoveStop)
end

function Unit:StopAnimation(animationName, blendTime)
	self._unitGraphicComponent:StopAnimation(animationName, blendTime)
end


----------------------------------------------------------------------
-- AI相关
----------------------------------------------------------------------
function Unit:RunAI(aiClassPath)
	local aiClass = aiClassPath and ClassLoadUtil.Load(aiClassPath) or AIBaseComp
	if self._aiComp then
		self:RemoveChild(self._aiComp:GetKey())
	end
	self._aiComp = self:AddChild(nil, aiClass, self)
end

----------------------------------------------------------------------
-- SetGet相关
----------------------------------------------------------------------
function Unit:GetName()
	return  self._cfgUnitData.name
end

function Unit:GetType()
	return  self._cfgUnitData.type
end

function Unit:GetOriginalRadius()
	return self._cfgUnitData.radius
end

function Unit:GetModelPath()
	return self._cfgUnitData.modelPath
end

function Unit:GetPassiveBuffIds()
	return self._cfgUnitData.passiveBuffIds
end

function Unit:GetDeathEffectId()
	return self._cfgUnitData.deathEffectId
end




function Unit:SetLevel(level)
	self._level = level
	self:OnSetLevel()
end

function Unit:OnSetLevel()
	self._propertyComponent:CalculateProp()
end

function Unit:GetLevel()
	return self._level
end

function Unit:SetRadius(scale)
	self._radius = self:GetOriginalRadius() * scale
end

function Unit:GetRadius()
	return self._radius or self:GetOriginalRadius()
end

function Unit:GetMaxHp()
	return self:GetCalcPropValue("生命上限")
end

function Unit:SetHp(hp, isNotBroadcast)
	local oldValue = self._hp
	hp = math.fmod(hp) -- 取整
	self._hp = math.min(hp, self:GetMaxHp())
	if not isNotBroadcast then
		self:OnHpChange(nil, oldValue, self._hp)
	end
end

function Unit:OnHpChange(sourceUnit, oldValue, newValue)
	self:Broadcast(UnitEventNameConst.On_Unit_Hp_Change, sourceUnit, self, oldValue, newValue)
end

function Unit:OnMaxHpChange(oldValue, newValue)
	self:Broadcast(UnitEventNameConst.On_MaxHp_Change, self, oldValue, newValue)
end

function Unit:GetHp()
	return self._hp
end

function Unit:GetSpeed()
	return self:GetCalcPropValue("移动速度")
end

function Unit:OnSpeedChange(oldValue, newValue)
	self._unitMoveComp:OnSpeedChange(oldValue, newValue)
end


-- 能否移动
function Unit:IsCanMove()
	return self._unitStateComponent:IsCanMove()
end

-- 能否攻击（包括普攻和技能）
function Unit:IsCanAttack()
	return self._unitStateComponent:IsCanAttack()
end

-- 能否普攻
function Unit:IsCanNormalAttack()
	return self._unitStateComponent:IsCanNormalAttack()
end

-- 能否释放技能
function Unit:IsCanCastSkill()
	return self._unitStateComponent:IsCanCastSkill()
end

-- 能否被控制
function Unit:IsCanControl ()
	return self._unitStateComponent:IsCanControl()
end

-- 是否混乱状态
function Unit:IsConfused ()
	return self._unitStateComponent:IsConfused()
end

-- 是否无敌
function Unit:IsInvincible()
	return self._unitStateComponent:IsInvincible()
end

-- 是否昏眩状态
function Unit:IsStun()
	return self._unitStateComponent:IsStun()
end

-- 是否冰冻状态
function Unit:IsFreeze()
	return self._unitStateComponent:IsFreeze()
end

-- 是否沉默状态
function Unit:IsSilent()
	return self._unitStateComponent:IsSilent()
end

-- 是否免控状态
function Unit:IsImmuneControl()
	return self._unitStateComponent:IsImmuneControl()
end

-- 是否不受伤害状态
function Unit:IsCanNotBeTakeDamage()
	return self._unitStateComponent:IsCanNotBeTakeDamage()
end

-- 是否不能被治疗状态
function Unit:IsCanNotBeHeal ()
	return self._unitStateComponent:IsCanNotBeHeal()
end

-- 是否隐身状态
function Unit:IsHide()
	return self._unitStateComponent:IsHide()
end

-- 是否反隐状态
function Unit:IsExpose()
	return self._unitStateComponent:IsExpose()
end

-- 是否死亡
function Unit:IsDead()
	return self._unitStateComponent:IsDead()
end

--是否在视野内
function Unit:IsInSight()
	return self._isInSight
end

function Unit:SetCurrentAttack(currentAttack)
	self._unitSpellComponent:SetCurrentAttack(currentAttack)
end

function Unit:GetCurrentAttack()
	return self._unitSpellComponent:GetCurrentAttack()
end

function Unit:IsNormalAttacking()
	return self._unitSpellComponent:IsNormalAttacking()
end

function Unit:GetPropertyComponent()
	return self._propertyComponent
end

function Unit:SetActionDict(actionDict)
	self._actionDict = actionDict
end

function Unit:GetActionDict()
	return self._actionDict
end

function Unit:GetUnitId()
	return self._unitId
end

function Unit:GetBuffsComponent()
	return self._buffsComponent
end

function Unit:GetSkillIdList()
	return self._unitSpellComponent:GetSkillIdList()
end

function Unit:SetIsMoveOccupy(isMoveOccupy)
	self._isMoveOccupy = isMoveOccupy
end

function Unit:IsMoveOccupy()
	return self._isMoveOccupy
end

function Unit:IsInSight()
	return self._isInSight
end

function Unit:GetUnitLockTargetInfo()
	return self._unitLockTargetInfo
end

function Unit:GetAnimation()
	return self._unitGraphicComponent:GetAnimation()
end

function Unit:GetUnitGraphicComponent()
	return self._unitGraphicComponent
end

function Unit:GetUnitSpellComponent()
	return self._unitSpellComponent
end

function Unit:GetCfgUnitData()
	return self._cfgUnitData
end

function Unit:GetUnitMoveComp()
	return self._unitMoveComp
end


function Unit:_Destroy()
	GameObjectEntity._Destroy(self)
	self:Broadcast(UnitEventNameConst.On_Unit_Destroy, self)

end

return Unit