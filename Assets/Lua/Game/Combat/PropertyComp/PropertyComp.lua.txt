---@class PropertyComp:Class
---@field isChanging boolean
---@field unit Unit
local PropertyComp = Class("PropertyComp")

PropertyComp.split = "@"
function PropertyComp:Init(argDict)
	---@type table<string,any>
	self.argDict = argDict
	self.unitId = argDict.unitId
	self.level = argDict.level
	---@type table<string,table<string,number>>
	self.propSetDict = {}
	---@type table<string,number>
	self.basePropDict = {}
	---@type table<string,number>
	self.calcPropDict = {}
end

---@param unit Unit
function PropertyComp:OnBuild(unit)
	self.unit = unit
	self.level = self.unit:GetLevel()
	self.unitId = self.unitId
end

---@param propSet table<string,number>
---@param key string
---@param subKey string
function PropertyComp:AddPropSet(propSet, key, subKey)
	local propertyKey = string.Combine(PropertyComp.split, key, subKey)
	self.propSetDict[propertyKey] = propSet
	self:__CalculateProp()
end

---@param key string
---@param subKey string
function PropertyComp:RemovePropSet(key, subKey)
	local propertyKey = string.Combine(PropertyComp.split, key, subKey)
	self.propSetDict[propertyKey] = nil
	self:__CalculateProp()
end

function PropertyComp:__CalculateProp()
	if self.isChanging then
		return
	end
	local oldCalcPropDict = clone(self.calcPropDict)
	self.basePropDict = {}
	-- 基础属性统计
	for _, cfgPropertyData in ipairs(CfgProperty.All()) do
		self.basePropDict[cfgPropertyData.id] = 0
	end
	for _, propSet in pairs(self.propSetDict) do
		for key, _ in pairs(propSet) do
			local value = table.GetOrAddDefault_Dict(self.basePropDict, key, function()
				return 0
			end)
			self.basePropDict[key] = value + propSet[key]
		end
	end
	--综合属性计算
	self.calcPropDict = {}
	for key, _ in pairs(self.basePropDict) do
		self.calcPropDict[key] = self.basePropDict[key]
	end

	if self.unit then
		local newCalcPropDict = self.calcPropDict
		local calcPropDictDiff = table.GetDiff(oldCalcPropDict, self.calcPropDict)
		self.unit:OnPropertyChanged(oldCalcPropDict, newCalcPropDict, calcPropDictDiff)
	end
end

function PropertyComp:StartChange()
	self.isChanging = true
end

function PropertyComp:EndChange()
	self.isChanging = false
	self:__CalculateProp()
end

function PropertyComp:CalculateOriginalDamageValue(argDict)
end

function PropertyComp:CalculateRealDamageValue(damageValue, targetUnit, argDict)
end

function PropertyComp:CalculateOriginalHealValue(argDict)
end

function PropertyComp:CalculateRealHealValue(healValue, targetUnit, argDict)
end

function PropertyComp:Destroy()
end

return PropertyComp