---@class SourceTargetEffectComponent:EffectComponent
---@field sourceIPosition IPosition
---@field targetIPosition IPosition
local SourceTargetEffectComponent = Class("SourceTargetEffectComponent", EffectComponent)

function SourceTargetEffectComponent:Init()
	SourceTargetEffectComponent.super.Init(self)
	self.onReachCallbackList = {}
end

function SourceTargetEffectComponent:AddOnReachCallback(callback)
	table.insert(self.onReachCallbackList, callback)
end

function SourceTargetEffectComponent:SetSocket()
	self.sourceSocketName = self.effectEntity.cfgEffectData.socketName1 or "missile"
	self.targetSocketName = self.effectEntity.cfgEffectData.socketName2 or "chest"

	if self.sourceIPosition then
		self.sourceIPosition:SetSocketName(self.sourceSocketName)
	end
	if self.targetIPosition then
		self.targetIPosition:SetSocketName(self.targetSocketName)
	end
end

function SourceTargetEffectComponent:Calculate(deltaTime)
	self.sourcePosition = self.sourceIPosition:GetPosition()
	self.targetPosition = self.targetIPosition:GetPosition()
	self.currentPosition = self.sourcePosition
	self:CalculateEulerAngles()
end

function SourceTargetEffectComponent:CalculateEulerAngles()
	local diff = self.targetPosition - self.currentPosition
	if diff == Vector3.zero then
		self.currentEulerAngles = Vector3.zero
	else
		self.currentEulerAngles = Quaternion.LookRotation(diff, Vector3.up):ToEulerAngles()
	end
end

function SourceTargetEffectComponent:OnEffectReach()
	DelegateUtil.InvokeCallback(self.onReachCallbackList)
	self.effectEntity:OnEffectReach()
end

function SourceTargetEffectComponent:__Update(deltaTime, unscaledDeltaTime)
	SourceTargetEffectComponent.super.__Update(self, deltaTime, unscaledDeltaTime)
	self:Calculate(deltaTime)
	self.effectEntity:ApplyToTransformComponent(self.currentPosition, self.currentEulerAngles)
end

function SourceTargetEffectComponent:__Destroy()
	SourceTargetEffectComponent.super.__Destroy(self)
	self.onReachCallbackList = nil
end

return SourceTargetEffectComponent