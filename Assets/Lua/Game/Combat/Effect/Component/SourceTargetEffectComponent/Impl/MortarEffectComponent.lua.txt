---@class MortarEffectComponent:SourceTargetEffectComponent
local MortarEffectComponent = Class("MortarEffectComponent", SourceTargetEffectComponent)

---@param sourceIPosition IPosition
---@param targetIPosition IPosition
---@param gravity Vector3
---@param startAngle number
function MortarEffectComponent:Init(sourceIPosition, targetIPosition, gravity, startAngle)
	MortarEffectComponent.super.Init(self)

	self.sourceIPosition = sourceIPosition
	self.targetIPosition = targetIPosition
	self:SetSocket()
	self.gravity = gravity
	self.startAngle = startAngle

	self:__InitFields()

	self:Calculate(0)
	self.effectEntity:ApplyToTransformComponent(self.currentPosition, self.currentEulerAngles)
end

function MortarEffectComponent:__InitFields()
	self.sourcePosition = self.sourceIPosition:GetPosition()
	self.targetPosition = self.targetIPosition:GetPosition()
	self.currentEulerAngles = Quaternion.LookRotation(self.targetPosition - self.sourcePosition, Vector3.up).eulerAngles
	local targetPositionXZ = self.targetPosition:SetZeroY()
	local sourcePositionXZ = self.sourcePosition:SetZeroY()
	local distance = Vector3.Distance(targetPositionXZ, sourcePositionXZ)
	local rad = math.atan(self.startAngle, distance)
	local dirHorizon = (targetPositionXZ - sourcePositionXZ).normalized / math.tan(rad)
	local dir = dirHorizon + Vector3.New(0, 1, 0)
	local gravityY = math.abs(self.gravity.y)
	local height = self.sourcePosition.y - self.targetPosition.y
	local rate = math.tan(rad) * gravityY * distance /
		math.sqrt(2 * gravityY * (height + distance * math.tan(rad)))

	self.velocity = dir * rate
	self.remainDuration = distance / (dirHorizon.magnitude * rate)
	self.allDuration = self.remainDuration
	self.startPosition = self.sourcePosition
	self.vertical = rate
	self.direction = self.velocity
	self.height = self.startPosition.y

	self.currentPosition = self.startPosition
end

function MortarEffectComponent:Calculate(deltaTime)
	self.remainDuration = self.remainDuration - deltaTime
	if self.remainDuration <= 0 then
		self:OnEffectReach()
		return
	end
	self.direction = self.direction + self.gravity * deltaTime
	self.currentEulerAngles = Quaternion.LookRotation(self.direction).eulerAngles
	local passDuration = self.allDuration - self.remainDuration
	local interp = self.remainDuration / self.allDuration
	local positionNew = self.startPosition * interp + self.targetPosition * (1 - interp)
	local height = self.height + self.vertical * passDuration + self.gravity.y * passDuration * passDuration * 0.5
	positionNew.y = height
	self.currentPosition = positionNew
end

return MortarEffectComponent