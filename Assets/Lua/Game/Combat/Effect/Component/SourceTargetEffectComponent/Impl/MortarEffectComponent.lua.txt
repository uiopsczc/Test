---@class MortarEffectComponent:SourceTargetEffectComponent
local MortarEffectComponent = Class("MortarEffectComponent", SourceTargetEffectComponent)

---@param sourceIPosition IPosition
---@param targetIPosition IPosition
---@param gravity Vector3
---@param startAngle number
function MortarEffectComponent:Init(sourceIPosition, targetIPosition, gravity, startAngle)
	MortarEffectComponent.super.Init(self)

	self._sourceIPosition = sourceIPosition
	self._targetIPosition = targetIPosition
	self:SetSocket()
	self._gravity = gravity
	self._startAngle = startAngle

	self:_InitFields()

	self:Calculate(0)
	self:GetEffectEntity():ApplyToTransformComponent(self._currentPosition, self._currentEulerAngles)
end

function MortarEffectComponent:_InitFields()
	self._sourcePosition = self._sourceIPosition:GetPosition()
	self._targetPosition = self._targetIPosition:GetPosition()
	self._currentEulerAngles = Quaternion.LookRotation(self._targetPosition - self._sourcePosition, Vector3.up).eulerAngles
	local targetPositionXZ = self._targetPosition:SetZeroY()
	local sourcePositionXZ = self._sourcePosition:SetZeroY()
	local distance = Vector3.Distance(targetPositionXZ, sourcePositionXZ)
	local rad = math.atan(self._startAngle, distance)
	local dirHorizon = (targetPositionXZ - sourcePositionXZ).normalized / math.tan(rad)
	local dir = dirHorizon + Vector3.New(0, 1, 0)
	local gravityY = math.abs(self._gravity.y)
	local height = self._sourcePosition.y - self._targetPosition.y
	local rate = math.tan(rad) * gravityY * distance /
		math.sqrt(2 * gravityY * (height + distance * math.tan(rad)))

	self._velocity = dir * rate
	self._remainDuration = distance / (dirHorizon.magnitude * rate)
	self._allDuration = self._remainDuration
	self._startPosition = self._sourcePosition
	self._vertical = rate
	self._direction = self._velocity
	self._height = self._startPosition.y

	self._currentPosition = self._startPosition
end

function MortarEffectComponent:Calculate(deltaTime)
	self._remainDuration = self._remainDuration - deltaTime
	if self._remainDuration <= 0 then
		self:OnEffectReach()
		return
	end
	self._direction = self._direction + self._gravity * deltaTime
	self._currentEulerAngles = Quaternion.LookRotation(self._direction).eulerAngles
	local passDuration = self._allDuration - self._remainDuration
	local interp = self._remainDuration / self._allDuration
	local positionNew = self._startPosition * interp + self._targetPosition * (1 - interp)
	local height = self._height + self._vertical * passDuration + self._gravity.y * passDuration * passDuration * 0.5
	positionNew.y = height
	self._currentPosition = positionNew
end

return MortarEffectComponent