---@class LineEffectComponent:SourceTargetEffectComponent
local LineEffectComponent = Class("LineEffectComponent", SourceTargetEffectComponent)

---@param sourceIPosition IPosition
---@param targetIPosition IPosition
function LineEffectComponent:Init(sourceIPosition, targetIPosition, staySourceDuration, speed, accSpeed)
	LineEffectComponent.super.Init(self)
	self.sourceIPosition = sourceIPosition
	self.targetIPosition = targetIPosition
	self:SetSocket()
	self.speed = speed or 0
	self.accSpeed = accSpeed or 0
	self.staySourceDuration = staySourceDuration or 0

	self:Calculate(0)
	self.effectEntity:ApplyToTransformComponent(self.currentPosition, self.currentEulerAngles)
end

function LineEffectComponent:Calculate(deltaTime)
	self.staySourceDuration = self.staySourceDuration - deltaTime
	if self.staySourceDuration >= 0 then
		self.sourcePosition = self.sourceIPosition:GetPosition()
		self.targetPosition = self.targetIPosition:GetPosition()
		self.currentPosition = self.sourcePosition
		self:CalculateEulerAngles()
		return
	end

	self.speed = self.speed + self.accSpeed
	local remainDuration = Vector3.Distance(self.currentPosition, self.targetPosition) / self.speed
	local pct = math.Clamp01(deltaTime / remainDuration)
	self.currentPosition = Vector3.Lerp(self.currentPosition, self.targetPosition, pct)

	self:CalculateEulerAngles()
	if pct == 1 then
		self:OnEffectReach()
	end
end

return LineEffectComponent