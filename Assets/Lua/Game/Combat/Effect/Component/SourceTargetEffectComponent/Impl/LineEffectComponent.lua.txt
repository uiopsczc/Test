---@class LineEffectComponent:SourceTargetEffectComponent
local LineEffectComponent = Class("LineEffectComponent", SourceTargetEffectComponent)

---@param sourceIPosition IPosition
---@param targetIPosition IPosition
function LineEffectComponent:Init(sourceIPosition, targetIPosition, staySourceDuration, speed, accSpeed)
	LineEffectComponent.super.Init(self)
	self._sourceIPosition = sourceIPosition
	self._targetIPosition = targetIPosition
	self:SetSocket()
	self._speed = speed or 0
	self._accSpeed = accSpeed or 0
	self._staySourceDuration = staySourceDuration or 0

	self:Calculate(0)
	self:GetEffectEntity():ApplyToTransformComponent(self._currentPosition, self._currentEulerAngles)
end

function LineEffectComponent:Calculate(deltaTime)
	self._staySourceDuration = self._staySourceDuration - deltaTime
	if self._staySourceDuration >= 0 then
		self._sourcePosition = self._sourceIPosition:GetPosition()
		self._targetPosition = self._targetIPosition:GetPosition()
		self._currentPosition = self._sourcePosition
		self:CalculateEulerAngles()
		return
	end

	self._speed = self._speed + self._accSpeed
	local remainDuration = Vector3.Distance(self._currentPosition, self._targetPosition) / self._speed
	local pct = math.Clamp01(deltaTime / remainDuration)
	self._currentPosition = Vector3.Lerp(self._currentPosition, self._targetPosition, pct)

	self:CalculateEulerAngles()
	if pct == 1 then
		self:OnEffectReach()
	end
end

return LineEffectComponent