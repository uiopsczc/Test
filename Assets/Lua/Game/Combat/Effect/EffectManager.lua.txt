---@class EffectManager:TickObject
local EffectManager = Class("EffectManager", TickObject)

function EffectManager:Init()
	EffectManager.super.Init(self)
	self.resLoadComponent._resLoad._isNotCheckDestroy = true --effectManager销毁的时候才去把assetBundle销毁
	self:AddListener(UnitEventNameConst.On_Unit_Destroy, function(...)
		self:DestroyByUnit(...)
	end)
	---@type string[]
	self.gameObjectPoolNameList = {}
end



----------------------------------------------------------------------
-- Create相关
----------------------------------------------------------------------
---@param pos Vector3
---@param eulerAngles Vector3
---@param unit Unit
---@return EffectEntity
function EffectManager:CreateEffectEntity(effectId, unit, pos, eulerAngles)
	---@type EffectEntity
	local effectEntity = self:AddChild(nil, EffectEntity, effectId, unit)
	table.Append_Array(self.gameObjectPoolNameList, effectEntity._graphicComponent:GetEffectGameObjectPoolName(), true)
	if pos then
		effectEntity.transformComponent:SetPosition(pos)
	end
	if eulerAngles then
		effectEntity.transformComponent:SetEulerAngles(eulerAngles)
	end
	return effectEntity
end

---@param unit Unit
---@param forceEulerAngles Vector3
---@param sectorAngle number
---@return EffectEntity
function EffectManager:CreateAttachEffect(effectId, unit, duration, forceEulerAngles, sectorAngle)
	local effectEntity = self:CreateEffectEntity(effectId, unit, nil, nil)
	effectEntity:AddComponent(nil, AttachEffectComponent, unit:ToUnitPosition(), forceEulerAngles, sectorAngle)
	if duration then
		effectEntity:AddComponent(nil, DurationEffectComponent, duration)
	end

	return effectEntity
end

---@param unit Unit
---@param position Vector3
---@param eulerAngles Vector3
---@param duration number
---@param isHide boolean
---@return EffectEntity
function EffectManager:CreateGroundEffectEntity(effectId, unit, position, eulerAngles, duration, isHide)
	local effectEntity = self:CreateEffectEntity(effectId, unit, position, eulerAngles)
	effectEntity:AddComponent(nil, DurationEffectComponent, duration)
	effectEntity._graphicComponent:SetIsShow(not isHide)
	return effectEntity
end

---@param unit Unit
---@param sourceIPosition IPosition
---@param targetIPosition IPosition
---@param speed number
---@param accSpeed number
---@return EffectEntity
function EffectManager:CreateLineEffectEntity(effectId, unit, sourceIPosition, targetIPosition, speed, accSpeed)
	local effectEntity = self:CreateEffectEntity(effectId, unit)
	effectEntity:AddComponent(nil, LineEffectComponent, sourceIPosition, targetIPosition, 0, speed, accSpeed)
	return effectEntity
end

---@param unit Unit
---@param startPosition Vector3
---@param spinDir Vector3
---@param startSpinAngle number
---@param spinSpeed number
---@param spinLength number
---@param forwardDir number
---@param forwardSpeed number
---@return EffectEntity
function EffectManager:CreateSpinLineEffect(effectId, unit, startPosition, spinDir, startSpinAngle, spinSpeed, spinLength, forwardDir, forwardSpeed)
	local effectEntity = self:CreateEffectEntity(effectId, unit)
	effectEntity:AddComponent(nil, SpinLineEffectComponent, startPosition, spinDir, startSpinAngle, spinSpeed, spinLength, forwardDir, forwardSpeed)
	return effectEntity
end

---@param unit Unit
---@param sourceIPosition IPosition
---@param targetIPosition IPosition
---@param gravity Vector3
---@param startAngle number
---@return EffectEntity
function EffectManager:CreateMortarMissileEffectEntity(effectId, unit, sourceIPosition, targetIPosition, gravity, startAngle)
	local effectEntity = self:CreateEffectEntity(effectId, unit)
	effectEntity:AddComponent(nil, MortarEffectComponent, sourceIPosition, targetIPosition, gravity, startAngle)
	return effectEntity
end


-----------------------------------------------------------------------------------------------------

function EffectManager:RemoveEffectEntity(key)
	self:RemoveChild(key)
end

---@return EffectEntity
function EffectManager:GetEffectEntity(key)
	return self:GetChild(key)
end

-- 销毁
function EffectManager:DestroyByUnit(unit)
	for _, child in self:ForeachChildOfType(EffectEntity) do
		if child.unit == unit then
			self:RemoveEffectEntity(child.key)
		end
	end
end

function EffectManager:__Destroy()
	EffectManager.super.__Destroy(self)
	for _, poolName in ipairs(self.gameObjectPoolNameList) do
		PoolCatManagerUtil.RemovePool(poolName)
	end
	table.Clear(self.gameObjectPoolNameList)
end

return EffectManager