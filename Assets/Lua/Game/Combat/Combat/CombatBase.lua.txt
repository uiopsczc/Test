---@class CombatBase:TickObject
---@field _time number
local CombatBase = Class("CombatBase", TickObject)

function CombatBase:Init(arg_dict)
	CombatBase.super.Init(self)
	self._argDict = arg_dict or {}
	self._isFixedDurationUpdate = true

	---@type RandomManager
	self._randomManager = RandomManager.New(arg_dict["randomSeed"])
	---@type TimerManager
	self._timerManager = TimerManager.New()

	---@type EffectManager
	self._effectManager = self:AddChild("EffectManager", EffectManager)
	---@type CameraManager
	self._cameraManager = self:AddChild("CameraManager", require("LuaCat.Camera.CameraManager"))
	---@type UnitManager
	self._unitManager = self:AddChild("UnitManager", UnitManager)
	---@type SpellManager
	self._spellManager = self:AddChild("SpellManager", SpellManager)
	---@type PathManager
	self._pathManager = self:AddChild("PathManager", PathManager)
end

function CombatBase:GetTimerManager()
	return self._timerManager
end

function CombatBase:Start()
	CombatBase.super.Start(self)
	Log("=============== Combat:Start ===============")
	self._time = 0
	self._frame = 0
	self._isFinished = false
	self._fixedUpdateRemainDuration = CombatConst.Fixed_Update_Duration
	self._isStarted = true
	local gameLevelClass = ClassLoadUtil.Load(self._argDict.gameLevelClassPath) or GameLevelBase
	self._gameLevel = self:AddChild(nil, gameLevelClass)
	self._gameLevel:Start()
end

function CombatBase:Update(deltaTime, unscaledDeltaTime)
	if not self._isFixedDurationUpdate then
		self._frame = self._frame + 1
		self._time = self._time + deltaTime
		if not self:IsCanUpdate() then
			return
		end
		CombatBase.super.Update(self, deltaTime, unscaledDeltaTime)
	else
		self._fixedUpdateRemainDuration = self._fixedUpdateRemainDuration - deltaTime
		local deltaTime = CombatConst.Fixed_Update_Duration
		local unscaledDeltaTime = CombatConst.Fixed_Update_Duration
		while self._fixedUpdateRemainDuration <= 0 do
			self._frame = self._frame + 1
			self._time = self._time + deltaTime
			self._fixedUpdateRemainDuration = self._fixedUpdateRemainDuration + deltaTime
			if not self:IsCanUpdate() then
				return
			end
			CombatBase.super.Update(self, deltaTime, unscaledDeltaTime)
		end
	end
end

function CombatBase:_Update(deltaTime, unscaledDeltaTime)
	CombatBase.super._Update(self, deltaTime, unscaledDeltaTime)
	self._timerManager:Update(deltaTime, unscaledDeltaTime)
	self._timerManager:CoUpdate(deltaTime, unscaledDeltaTime)
end

function CombatBase:_LateUpdate(deltaTime, unscaledDeltaTime)
	CombatBase.super._LateUpdate(self, deltaTime, unscaledDeltaTime)
	self._timerManager:LateUpdate(deltaTime, unscaledDeltaTime)
	self._timerManager:CoLateUpdate(deltaTime, unscaledDeltaTime)
end

function CombatBase:_FixedUpdate(deltaTime, unscaledDeltaTime)
	CombatBase.super._FixedUpdate(self, deltaTime, unscaledDeltaTime)
	self._timerManager:FixedUpdate(deltaTime, unscaledDeltaTime)
	self._timerManager:CoFixedUpdate(deltaTime, unscaledDeltaTime)
end

----------------------------------------------------------------------
-- SetGet相关
----------------------------------------------------------------------
function CombatBase:SetIsFinished(isFinished)
	self._isFinished = isFinished
end

function CombatBase:IsStarted()
	return self._isStarted
end

function CombatBase:IsFinished()
	return self._isFinished
end

function CombatBase:IsCanUpdate()
	return self:IsStarted() and not self:IsFinished() and CombatBase.super.IsCanUpdate(self)
end

function CombatBase:GetSpellManager()
	return self._spellManager
end

function CombatBase:GetUnitManager()
	return self._unitManager
end



return CombatBase
