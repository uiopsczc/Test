---@class UnitMoveComp:TickObject
---@field _unitMoveInfo UnitMoveInfo
---@field _unitBeThrownInfo UnitBeThrownInfo
---@field _isGetCaught boolean
local UnitMoveComp = Class("UnitMoveComp", TickObject)

---@param unit Unit
function UnitMoveComp:Init(unit)
	UnitMoveComp.super.Init(self, unit)
	self._unit = unit
	self._walkStepLength = unit._cfgUnitData.walkStepLength or 1
	self._moveType = nil  -- move beThrown
	self._isMoveWithMoveAnimation = true
	self._adjustDistSqr = 3 * 3

	self._unitMoveInfo = UnitMoveInfo.New()
	self._unitMoveInfo:SetSpeed(unit:GetSpeed())
	self._unitMoveInfo:SetTargetPos(unit:GetPosition())
	self._unitMoveInfo:SetEndRotation(unit:GetRotation())
	---@type UnitLookAtInfo
	self._unitLookAtInfo = UnitLookAtInfo.New()
end

function UnitMoveComp:_Update(deltaTime, unscaledDeltaTime)
	UnitMoveComp.super._Update(self, deltaTime, unscaledDeltaTime)
	self:_UpdateMove(deltaTime)
	--if self.unitLookAtInfo:HasLookAt() then
	--  self:__UpdateLookAt(deltaTime)
	--end
	if self._unitBeThrownInfo then
		self:_UpdateBeThrown(deltaTime)
	end
end

function UnitMoveComp:_Destroy()
	UnitMoveComp.super._Destroy(self)
	self._unit = nil
end

function UnitMoveComp:OnBuild()
end

function UnitMoveComp:OnBuildOk()
	local unit = self._unit
	if self._moveType == "move" then
		if self._unitMoveInfo:IsHasAnimationName() and self._isMoveWithMoveAnimation then
			unit:PlayAnimation(self._unitMoveInfo:GetAnimationName(), 0, self._unitMoveInfo:GetAnimationSpeed())
		end
		unit:MoveTo(self._unitMoveInfo:GetTargetPos(), self._unitMoveInfo:GetRemainDuration())
	end
end

----------------------------------------------------------------------
-- Move相关
----------------------------------------------------------------------
function UnitMoveComp:Move(targetPos, speed, animationName)
	self:MoveByPath({ targetPos }, speed, animationName)
end

function UnitMoveComp:MoveByPath(path, speed, animationName)
	local unit = self._unit
	if not unit:IsCanMove() then
		return
	end
	self._moveType = "move"
	if path[1] and not unit:IsInSight() then
		unit:SetPosition(path[1])
	end
	self._unitMoveInfo:SetPath(path)
	if speed then
		self._unitMoveInfo:SetSpeed(speed)
	end
	if animationName then
		self._unitMoveInfo:SetAnimationName(animationName)
	end
	local lastMoveAnimationSpeed = self._unitMoveInfo:GetAnimationSpeed()
	self._unitMoveInfo:SetAnimationSpeed(self._unitMoveInfo:GetSpeed() / self._walkStepLength)
	if self._unitMoveInfo:IsHasAnimationName()
		and self._isMoveWithMoveAnimation
		and math.abs(self._unitMoveInfo:GetAnimationSpeed() - lastMoveAnimationSpeed) > 0.2 then
		unit:PlayAnimation(self._unitMoveInfo:GetAnimationName(), 0.2, self._unitMoveInfo:GetAnimationSpeed())
	end
	self:_MoveNextTarget(2)
end

function UnitMoveComp:_MoveNextTarget(index)
	local unit = self._unit
	if index then
		self._unitMoveInfo:SetTargetIndexInPath(index)
	else
		self._unitMoveInfo:SetTargetIndexInPath(self._unitMoveInfo:GetTargetIndexInPath() + 1)
	end
	self._unitMoveInfo:SetTargetPos(self._unitMoveInfo:GetPath()[self._unitMoveInfo:GetTargetIndexInPath()])
	if self._unitMoveInfo:GetTargetPos() then
		local originPos = self._unitMoveInfo:GetPath()[self._unitMoveInfo:GetTargetIndexInPath() - 1]
		local distance = Vector3.Distance(self._unitMoveInfo:GetTargetPos(), originPos)
		self._unitMoveInfo:SetRemainDuration(distance / self._unitMoveInfo:GetSpeed())
		unit:MoveTo(self._unitMoveInfo:GetTargetPos(), self._unitMoveInfo:GetRemainDuration())
		self._unitMoveInfo:SetEndRotation(Quaternion.LookRotation(self._unitMoveInfo:GetTargetPos() - unit:GetPosition()) or unit:GetRotation())
		self._unitMoveInfo:SetRotateRemainDuration(Quaternion.Angle(self._unitMoveInfo:GetEndRotation(), unit:GetRotation()) / 1080)
	else
		self:MoveStop()
	end
end

function UnitMoveComp:MoveStop(rotation, pos)
	local unit = self._unit
	if pos and
		(not unit:IsInSight() or
			(unit:GetPosition() - pos):SqrMagnitude() > self._adjustDistSqr) then
		unit:SetPosition(pos)
	end
	if rotation then
		self._unitMoveInfo:SetEndRotation(rotation)
		self._unitMoveInfo:SetRotateRemainDuration(Quaternion.Angle(rotation, unit:GetRotation()) / 720)
	end
	if not self._moveType then
		return
	end
	if self._moveType == "move"
		and self._isMoveWithMoveAnimation
		and self._unitMoveInfo:IsHasAnimationName() then
		if IsNotNil(unit:GetAnimation()) then
			unit:StopAnimation(self._unitMoveInfo:GetAnimationName(), 0.2)  -- animation动画是层叠的，停掉walk自动就播放idle
		else
			unit._animatorComp:PlayAnimation(AnimationNameConst.idle, true)
		end
	end
	self._moveType = nil
	self._unitMoveInfo:SetRemainDuration(0)
	self._unitMoveInfo:SetAnimationSpeed(-1)
	unit:StopMoveTo()
end

function UnitMoveComp:_UpdateMove(deltaTime)
	local unit = self._unit
	local deltaTimeRemainDuration = deltaTime
	while self._moveType == "move" and deltaTimeRemainDuration > 0 do
		local newPos
		if self._unitMoveInfo:GetRemainDuration() > deltaTimeRemainDuration then
			newPos = Vector3.Lerp(unit:GetPosition(), self._unitMoveInfo:GetTargetPos(), deltaTimeRemainDuration / self._unitMoveInfo:GetRemainDuration())
			self._unitMoveInfo:SetRemainDuration(self._unitMoveInfo:GetRemainDuration() - deltaTimeRemainDuration)
			deltaTimeRemainDuration = 0
		else
			newPos = self._unitMoveInfo:GetTargetPos()
			deltaTimeRemainDuration = deltaTimeRemainDuration - self._unitMoveInfo:GetRemainDuration()
		end
		local lookDir
		if unit:GetUnitLockTargetInfo():IsHasLockTarget() then
			lookDir = unit:GetUnitLockTargetInfo():GetLockTargetPosition() - unit:GetPosition()
		else
			lookDir = newPos - unit:GetPosition()
		end
		unit:OnlyFaceToDir(lookDir)
		unit:SetPosition(newPos)
		if deltaTimeRemainDuration > 0 then
			self:_MoveNextTarget()
		end
	end
	if self._unitMoveInfo:GetLookAtUnit() then
		if self._unitMoveInfo:GetLookAtUnit():IsDead() then
			self.lookAtUnit = nil
			return
		end
		local dir = self._unitMoveInfo:GetLookAtUnit():GetPosition() - unit:GetPosition()
		local angle = Vector3.Angle(unit:GetRotation():Forward(), dir)
		if angle > 5 then
			local targetRotation = Quaternion.LookRotation(dir) or unit:GetRotation()
			unit:SetRotation(Quaternion.Slerp(unit:GetRotation(), targetRotation, 0.3))
		end
	else
		if self._unitMoveInfo:GetRotateRemainDuration() > 0 then
			if self._unitMoveInfo:GetRotateRemainDuration() <= deltaTime then
				unit:SetRotation(self._unitMoveInfo:GetEndRotation())
				self._unitMoveInfo:SetRotateRemainDuration(0)
			else
				unit:SetRotation(Quaternion.Slerp(unit:GetRotation(), self._unitMoveInfo:GetEndRotation(), deltaTime / self._unitMoveInfo:GetRotateRemainDuration()))
				self._unitMoveInfo:SetRotateRemainDuration(self._unitMoveInfo:GetRotateRemainDuration() - deltaTime)
			end
		end
	end
end


----------------------------------------------------------------------
-- beThrown相关
----------------------------------------------------------------------
---@param unitBeThrownInfo UnitBeThrownInfo
function UnitMoveComp:BeThrown(unitBeThrownInfo)
	local endPos = unitBeThrownInfo:GetEndPos()
	local duration = unitBeThrownInfo:GetDuration()
	local height = unitBeThrownInfo:GetHeight()
	local endRotation = unitBeThrownInfo:GetEndRotation()
	local rotateDuration = unitBeThrownInfo:GetRotateDuration()
	if self._moveType == "beThrown" then
		return
	end
	local unit = self._unit
	self._moveType = "beThrown"
	if unitBeThrownInfo:IsHasAnimationName() and IsNotNil(unit:GetAnimation()) then
		self._unit:PlayAnimation(unitBeThrownInfo:GetAnimationName())
	end
	self._unitBeThrownInfo = unitBeThrownInfo
	self._unit:UpdateMixedStates()
	self._unitBeThrownInfo:SetOrgHeight(unit:GetPosition().y)
	self._unitBeThrownInfo:SetStartPos(unit:GetPosition())
	self._unitBeThrownInfo:SetRemainDuration(duration)
	local deltaHeight = endPos.y - unit:GetPosition().y
	-- 起点和落点，取最高的，加上height，为真正的最高高度
	local maxHeight
	if deltaHeight > 0 then
		maxHeight = math.max((deltaHeight + height), 0)
	else
		maxHeight = height
	end
	self._unitBeThrownInfo:SetMaxHeight(maxHeight)
	if maxHeight == 0 then
		self._unitBeThrownInfo:SetHeightAccelerate(deltaHeight * 2 / (duration * duration))
		self._unitBeThrownInfo:SetHeightSpeed(0)
	else
		local hTime = duration / (math.sqrt(1 - deltaHeight / maxHeight) + 1)
		self._unitBeThrownInfo:SetHeightAccelerate(-2 * maxHeight / (hTime * hTime))
		self._unitBeThrownInfo:SetHeightSpeed(self._unitBeThrownInfo:GetHeightAccelerate() * hTime)
	end
	if endRotation and rotateDuration then
		self._unitBeThrownInfo:SetRotateRemainDuration(rotateDuration)
		self._unitBeThrownInfo:SetStartRotation(unit:GetRotation())
	end
end

function UnitMoveComp:StopBeThrown(isEnd)
	if isEnd then
		if self._unitBeThrownInfo then
			self._unitBeThrownInfo:SetRemainDuration(0.02)
			self:_UpdateBeThrown(0.02)
		end
		return
	end

	if self._unitBeThrownInfo and not self._unitBeThrownInfo:IsNotStopAnimation() and self._unitBeThrownInfo:IsHasAnimationName() then
		self._unit:StopAnimation(self._unitBeThrownInfo:GetAnimationName(), 0.2)
	end

	local isBackToGround = self._unitBeThrownInfo and self._unitBeThrownInfo._isBackToGround or false
	self._unitBeThrownInfo = nil
	self._moveType = nil
	self._unit:UpdateMixedStates()

	if isBackToGround then
		---@type UnitBeThrownInfo
		local unitBeThrownInfo = UnitBeThrownInfo.New()
		unitBeThrownInfo:SetEndPos(global.client.combat:GetPathManager():GetGroundPos(self._unit:GetPosition()))
		unitBeThrownInfo:SetDuration(0.1)
		unitBeThrownInfo:SetHeight(0)
		unitBeThrownInfo:SetIsBackToGround(false)
		self:BeThrown(unitBeThrownInfo)
	end
end

-- 更新beThrown
function UnitMoveComp:_UpdateBeThrown(deltaTime)
	local unit = self._unit
	self._unitBeThrownInfo:SetRemainDuration(self._unitBeThrownInfo:GetRemainDuration() - deltaTime)
	if self._unitBeThrownInfo:GetRemainDuration() <= 0 then
		self:StopBeThrown()
		return
	end
	local passedDuration = self._unitBeThrownInfo:GetDuration() - self._unitBeThrownInfo:GetRemainDuration() -- 已经运行的时间
	-- 计算高度
	local curHeight
	if self._unitBeThrownInfo:GetCalcHeightFunc() then
		curHeight = self._unitBeThrownInfo:GetOrgHeight() + self._unitBeThrownInfo:GetCalcHeightFunc()(self._unitBeThrownInfo)
	else
		curHeight = self._unitBeThrownInfo:GetOrgHeight() + self._unitBeThrownInfo:GetHeightSpeed() * passedDuration + self._unitBeThrownInfo:GetHeightAccelerate() * passedDuration * passedDuration * 0.5
	end
	-- 计算水平位置
	local interp = math.pow((1 - passedDuration / self._unitBeThrownInfo:GetDuration()), self._unitBeThrownInfo:GetInterp())
	local newPos = self._unitBeThrownInfo:GetStartPos() * interp + self._unitBeThrownInfo:GetEndPos() * (1 - interp)

	newPos.y = curHeight
	unit:SetPosition(newPos)

	if self._unitBeThrownInfo:GetRotateDuration() and self._unitBeThrownInfo:GetRotateRemainDuration() then
		self._unitBeThrownInfo:SetRotateRemainDuration(self._unitBeThrownInfo:GetRotateRemainDuration() - deltaTime)
		if self._unitBeThrownInfo:GetRotateRemainDuration() <= 0 then
			self._unitBeThrownInfo:SetRotateDuration(nil)
			self._unitBeThrownInfo:SetRotateRemainDuration(nil)
			unit:SetRotation(self._unitBeThrownInfo:GetEndRotation())
		else
			unit:SetRotation(Quaternion.Slerp(self._unitBeThrownInfo:GetStartRotation(), self._unitBeThrownInfo:GetEndRotation(), self._unitBeThrownInfo:GetRotateRemainDuration() / self._unitBeThrownInfo:GetRotateDuration()))
		end
	end
end
----------------------------------------------------------------------
-- LookAt相关  暂时没用
----------------------------------------------------------------------
-- 模式为lock时，可以占据LookAt， 其他地方调用LookAt将不起作用，除非mode为force强行LookAt
-- 在不需占据LookAt时，需传入unlock解锁
---@param unitOrEulerAngle Unit|Vector3
function UnitMoveComp:LookAt(unitOrEulerAngle, mode)
	self._unitLookAtInfo:SetIsRotateXArrived(false)
	self._unitLookAtInfo:SetIsRotateYArrived(false)
	if mode == "stopLookAt" then
		self._unitLookAtInfo:SetLookAtUnit(nil)
		self._unitLookAtInfo:SetLookAtDir(nil)
		return
	end
	if mode == "unlock" then
		self._unitLookAtInfo._isLocked = false
		return
	end
	if mode ~= "force" and self._unitLookAtInfo:IsLocked() then
		return
	end
	self._unitLookAtInfo:SetMode(mode or "idle")
	if mode == "lock" then
		self._unitLookAtInfo:SetIsLocked(true)
	end
	if unitOrEulerAngle then
		if IsUnit(unitOrEulerAngle) then
			self._unitLookAtInfo:SetLookAtUnit(unitOrEulerAngle)
			self._unitLookAtInfo:SetLookAtDir(nil)
		else
			self._unitLookAtInfo:SetLookAtDir(unitOrEulerAngle)
			self._unitLookAtInfo:SetLookAtUnit(nil)
		end
	end
end

----------------------------------------------------------------------
-- Util相关
----------------------------------------------------------------------
function UnitMoveComp:OnSpeedChange(oldValue, newValue)
	local unit = self._unit
	local factor = newValue / oldValue
	self._unitMoveInfo:SetSpeed(self._unitMoveInfo:GetSpeed() * factor)
	if self._moveType == "move" then
		self._unitMoveInfo:SetRemainDuration(self._unitMoveInfo:GetRemainDuration() / factor)
		local oldMoveAnimationSpeed = self._unitMoveInfo:GetAnimationSpeed()
		self._unitMoveInfo:SetAnimationSpeed(self._unitMoveInfo:GetAnimationSpeed() * factor)
		if unit:GetTransform() then
			unit:MoveTo(self._unitMoveInfo:GetTargetPos(), self._unitMoveInfo:GetRemainDuration())
			if self._unitMoveInfo:IsHasAnimationName() and self._isMoveWithMoveAnimation and
				math.abs(self._unitMoveInfo:GetAnimationSpeed() - oldMoveAnimationSpeed) > 0.2 then
				unit:PlayAnimation(self._unitMoveInfo:GetAnimationName(), 0.2, self._unitMoveInfo:GetAnimationSpeed())
			end
		end
	end
end

function UnitMoveComp:SetIsMoveWithMoveAnimation(isMoveWithMoveAnimation)
	local unit = self._unit
	self._isMoveWithMoveAnimation = isMoveWithMoveAnimation
	if self._moveType == "move" then
		if isMoveWithMoveAnimation then
			if self._unitMoveInfo:IsHasAnimationName() then
				unit:PlayAnimation(self._unitMoveInfo:GetAnimationName(), 0, self._unitMoveInfo:GetAnimationSpeed())
			end
		else
			unit:StopAnimation(self._unitMoveInfo:GetAnimationName(), 0.2)
		end
	end
end

----------------------------------------------------------------------
-- SetGet相关
----------------------------------------------------------------------
function UnitMoveComp:GetMoveType()
	return self._moveType
end

function UnitMoveComp:SetMoveType(moveType)
	self._moveType = moveType
end

function UnitMoveComp:IsGetCaught()
	return self._isGetCaught
end

function UnitMoveComp:SetIsGetCaught(isGetCaught)
	self._isGetCaught = isGetCaught
end

function UnitMoveComp:GetUnitBeThrownInfo()
	return self._unitBeThrownInfo
end




return UnitMoveComp
--endregion
