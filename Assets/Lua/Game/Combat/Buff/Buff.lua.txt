---@class Buff:TickObject
local Buff = Class("Buff", TickObject)

---@param buffManager BuffManager
function Buff:Init(buffManager, buffId)
	Buff.super.Init(self)
	---@type BuffManager
	self._buffManager = buffManager
	self._buffId = buffId
	self._cfgBuffData = CfgBuff.get_by_id(buffId)
	---@type BuffCache[]
	self._buffCacheList = {} -- 因为有些buff可以同时存在多个，但效果只有一个生效,效果不累加
	---@field EffectBase[]
	self._effectList = {} -- 一个buff可能有多个特效
end

function Buff:CreateBuffCache(duration, sourceUnit, sourceSpell, argDict)
	---@type BuffCache
	local buffCache = BuffCache.New()
	buffCache:SetDuration(duration)
	buffCache:SetRemainDuration(duration)
	buffCache:SetSourceUnit(sourceUnit)
	buffCache:SetSourceSpell(sourceSpell)
	buffCache:SetArgDict(argDict)
	table.insert(self._buffCacheList, buffCache)
	if #self._buffCacheList == 1 then
		-- 第一个的时候才添加
		self:AddEffects()
		self:AddPropertyDict()
		self:AddTriggerSpell()
		self._buffManager:AddState(self._cfgBuffData.state)
	end
	return self
end

function Buff:_Update(deltaTime, unscaledDeltaTime)
	Buff.super._Update(self, deltaTime, unscaledDeltaTime)
	for i = #self._buffCacheList, 1, -1 do
		local buffCache = self._buffCacheList[i]
		buffCache:SetRemainDuration(buffCache:GetRemainDuration() - deltaTime)
		if buffCache:GetRemainDuration() <= 0 then
			table.remove(self._buffCacheList, i)
		end
	end
	if #self._buffCacheList == 0 then
		self._buffManager:RemoveBuffByBuff(self)
	end
end

function Buff:RemoveBuffCache(sourceUnitGuid, sourceSpellGuid)
	for i = #self._buffCacheList, 1, -1 do
		local buffCache = self._buffCacheList[i]
		local isThisUnit = not sourceUnitGuid or (buffCache._sourceUnit and buffCache._sourceUnit:GetGuid() == sourceUnitGuid)
		local isThisSpell = not sourceSpellGuid or (buffCache._sourceSpell and buffCache._sourceSpell:GetGuid() == sourceSpellGuid)
		if isThisUnit and isThisSpell then
			table.remove(self._buffCacheList, i)
		end
	end
	if #self._buffCacheList == 0 then
		self._buffManager:RemoveBuffByBuff(self)
	end
end

function Buff:AddEffects()
	local effectIds = self._cfgBuffData.effectIds
	if table.IsNilOrEmpty(effectIds) then
		return
	end
	for _, effectId in ipairs(effectIds) do
		local cfgEffectData = CfgEffect.get_by_id(effectId)
		local effect = global.client.combat._effectManager:CreateAttachEffect(effectId, self._buffManager._unit, cfgEffectData.duration) -- TODO 如何初始化effectBase
		table.insert(self._effectList, effect)
	end
end

function Buff:RemoveEffects()
	for _, effect in ipairs(self._effectList) do
		global.client.combat._effectManager:RemoveEffectEntity(effect.key)
	end
end

function Buff:AddPropertyDict()
	local newPropertyDict = self._cfgBuffData.propertyDict and DoerAttrParserUtil.ConvertTableWithTypeString(self._cfgBuffData.property_dict) or {}
	if table.Count(newPropertyDict) > 0 then
		local propertyComp = self._buffManager._unit._propertyComp
		propertyComp:StartChange()
		propertyComp:AddPropSet(newPropertyDict, "buff", self:GetGuid())
		propertyComp:EndChange()
	end
end

function Buff:RemovePropertyDict()
	local newPropertyDict = self._cfgBuffData.propertyDict and DoerAttrParserUtil.ConvertTableWithTypeString(self._cfgBuffData.propertyDict) or {}
	if table.Count(newPropertyDict) > 0 then
		local propertyComp = self._buffManager:GetUnit():GetPropertyComp()
		propertyComp:StartChange()
		propertyComp:RemovePropSet("buff", self:GetGuid())
		propertyComp:EndChange()
	end
end

function Buff:AddTriggerSpell()
	local triggerSpellId = self._cfgBuffData.triggerSpellId
	if table.IsNilOrEmpty(triggerSpellId) then
		return
	end
	local spell = global.client.combat:GetSpellManager():CastSpell(self._buffCacheList[1]:GetSourceUnit() or self._buffManager:GetUnit(), triggerSpellId, self._buffManager:GetUnit())
	self._triggerSpellGuid = spell:GetGuid()
end

function Buff:RemoveTriggerSpell()
	if self._triggerSpellGuid then
		local spell = global.client.combat:GetSpellManager():GetSpell(self._triggerSpellGuid)
		if not spell then
			return
		end
		if spell.OnBuffRemove then
			spell:OnBuffRemove(self)
			return
		end
		global.client.combat:GetSpellManager():RemoveSpell(self._triggerSpellGuid)
	end
end

function Buff:_Destroy()
	Buff.super._Destroy(self)
	self:RemoveEffects()
	self:RemovePropertyDict()
	self:RemoveTriggerSpell()
	self._buffManager:RemoveState(self._cfgBuffData.state)
end

return Buff