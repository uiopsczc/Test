---@class BuffsComponent:GameComponent
local BuffsComponent = Class("BuffManager", GameComponent)

---@param unit Unit
function BuffsComponent:Init(unit)
	BuffsComponent.super.Init(self)
	self._unit = unit
	---@type table<string,number>
	self._stateDict = {}
	---@type table<string,Buff>
	self._buffDict = {}
	---@type table<string,Buff[]>
	self._buffListDict = {} -- 一个buff_id可能有多个相同的buff（不同时长，效果累加）同时存在，（效果不累加的放在buff类中处理）
end

---@param sourceUnit Unit
function BuffsComponent:AddBuff(buffId, sourceUnit, forceDuration, argDict)
	local cfgBuffData = CfgBuff.GetById(buffId)
	local duration = forceDuration or (not cfgBuffData.duration or cfgBuffData.duration == 0) and math.huge or cfgBuffData.duration
	local sourceSpell = argDict.sourceSpell
	local type1 = cfgBuffData.type1 -- buff or debuff
	if type1 == "debuff" and self._unit:IsInvincible() then
		return
	end
	if self._unit:IsImmuneControl() and (cfgBuffData.type2 == "控制" or (cfgBuffData.state and StateConst.Control_State_Dict[cfgBuffData.state])) then
		--显示免疫
		return
	end

	if cfgBuffData.isUnique and self:IsHasBuff(buffId) then
		-- cfgBuffData.is_unique是指该buff只有一个生效
		self._buffListDict[buffId][1]:CreateBuffCache(duration, sourceUnit, sourceSpell, argDict)
	else
		---@type Buff
		local buff = Buff.New(self, buffId)
		buff:CreateBuffCache(duration, sourceUnit, sourceSpell, argDict)
		self._buffDict[buff:GetKey()] = buff
		local buffList = table.GetOrAddDefault_Dict(self._buffListDict, buffId, function()
			return {}
		end)
		table.insert(buffList, buff)
	end
end

function BuffsComponent:_Update(deltaTime, unscaledDeltaTime)
	GameComponent._Update(self, deltaTime, unscaledDeltaTime)
	for buffId, buff in pairs(self._buffDict) do
		buff:Update(deltaTime, unscaledDeltaTime)
	end
end

function BuffsComponent:RemoveBuff(buffIdList, sourceUnitGuid, spellGuid)
	local curBuffIdList
	if IsString(buffIdList) then
		curBuffIdList = { buffIdList }
	else
		curBuffIdList = buffIdList
	end
	for _, buffId in ipairs(curBuffIdList) do
		self:_RemoveBuff(buffId, sourceUnitGuid, spellGuid)
	end
end

--  可能删除多个buff
function BuffsComponent:_RemoveBuff(buffId, sourceUnitGuid, sourceSpellGuid)
	if not self._buffListDict[buffId] then
		return
	end
	for i = #self._buffListDict[buffId], 1, -1 do
		self._buffListDict[buffId][i]:RemoveBuffCache(sourceUnitGuid, sourceSpellGuid)
	end
end

---@param buff Buff
function BuffsComponent:RemoveBuffByBuff(buff)
	self._buffDict[buff:GetKey()] = nil
	table.RemoveByValue_Array(self._buffListDict[buff:GetBuffId()], buff)
	self:RemoveChild(buff:GetKey())
end

function BuffsComponent:IsHasBuff(buffId)
	if not self._buffListDict[buffId] then
		return false
	end
	if #self._buffListDict[buffId] == 0 then
		return false
	end
	return true
end

function BuffsComponent:GetBuffCount()
	return table.Count(self._buffDict)
end

function BuffsComponent:GetDebuffCount()
	local count = 0
	for _, buff in pairs(self._buffDict) do
		if buff._cfgBuffData.type1 == "debuff" then
			count = count + 1
		end
	end
	return count
end

function BuffsComponent:IsHasState(stateName)
	if string.IsNilOrWhiteSpace(stateName) then
		return false
	end
	local currentValue = table.GetOrAddDefault_Dict(self._stateDict, stateName, function()
		return 0
	end)
	return currentValue > 0
end

function BuffsComponent:AddState(stateName)
	if string.IsNilOrWhiteSpace(stateName) then
		return
	end
	local currentValue = table.GetOrAddDefault_Dict(self._stateDict, stateName, function()
		return 0
	end)
	currentValue = currentValue + 1
	self._stateDict[stateName] = currentValue

	if currentValue == 1 and self._unit then
		--第一次添加
		if stateName == StateConst.ImmuneControl then
			self:RemoveControlBuff()
		end
		if stateName == StateConst.Hide then
			self._unit:UpdateHideState()
		end
		if stateName == StateConst.Expose then
			self._unit:UpdateHideState()
		end
		if stateName == StateConst.Silent then
			self:Broadcast(UnitEventNameConst.On_Unit_Is_Silent_Change, self._unit, not self:IsHasState(StateConst.Silent), self:IsHasState(StateConst.Silent))
		end
		if stateName == StateConst.Confused then
			self:Broadcast(UnitEventNameConst.On_Unit_Is_Confused_Change, self._unit, not self:IsHasState(StateConst.Confused), self:IsHasState(StateConst.Confused))
		end
		self._unit:UpdateMixedStates()
	end
end

function BuffsComponent:RemoveState(stateName)
	if string.IsNilOrWhiteSpace(stateName) then
		return
	end
	local currentValue = table.GetOrAddDefault_Dict(self._stateDict, stateName, function()
		return 0
	end)
	currentValue = currentValue - 1
	if currentValue < 0 then
		ErrorFormat("%s state_name = %s", stateName, currentValue)
	end
	currentValue = math.max(0, currentValue)
	self._stateDict[stateName] = currentValue

	if self.currentValue == 0 and self._unit then
		-- 最后一次删除
		if stateName == StateConst.Hide then
			self._unit:UpdateHideState()
		end
		if stateName == StateConst.Expose then
			self._unit:UpdateHideState()
		end
		if stateName == StateConst.Silent then
			self:Broadcast(UnitEventNameConst.On_Unit_Is_Silent_Change, self._unit, not self:IsHasState(StateConst.Silent), self:IsHasState(StateConst.Silent))
		end
		if stateName == StateConst.Confused then
			self:Broadcast(UnitEventNameConst.On_Unit_Is_Confused_Change, self._unit, not self:IsHasState(StateConst.Confused), self:IsHasState(StateConst.Confused))
		end
		self._unit:UpdateMixedStates()
	end
end

-- 去掉控制类型的buff
function BuffsComponent:RemoveControlBuff()
	for _, buffGuid in ipairs(table.Keys_Dict(self._buffDict)) do
		local buff = self._buffDict[buffGuid]
		if not buff:IsDestroyed() and buff._cfgBuffData.type2 == "控制" then
			self:RemoveBuff(buffGuid)
		end
	end
end

----------------------------------------------------------------------
-- SetGet相关
----------------------------------------------------------------------
function BuffsComponent:GetUnit()
	return self._unit
end

function BuffsComponent:_Destroy()
	BuffsComponent.super._Destroy(self)
	for _, buffId in ipairs(table.Keys_Dict(self._buffDict)) do
		self:RemoveBuff(buffId)
	end
end

return BuffsComponent