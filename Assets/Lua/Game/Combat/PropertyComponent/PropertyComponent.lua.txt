---@class PropertyComponent:Class
---@field _isChanging boolean
---@field _unit Unit
local PropertyComponent = Class("PropertyComp")

PropertyComponent.split = "@"
---@param unit Unit
function PropertyComponent:Init(unit)
	self._unit = unit
end

function PropertyComponent:InitArgDict(argDict)
	---@type table<string,any>
	self._argDict = argDict
	self._unitId = argDict.unitId
	self._level = argDict.level
	---@type table<string,table<string,number>>
	self._propSetDict = {}
	---@type table<string,number>
	self._basePropDict = {}
	---@type table<string,number>
	self._calcPropDict = {}
end



---@param propSet table<string,number>
---@param key string
---@param subKey string
function PropertyComponent:AddPropSet(propSet, key, subKey)
	local propertyKey = string.Combine(PropertyComponent.split, key, subKey)
	self._propSetDict[propertyKey] = propSet
	self:CalculateProp()
end

---@param key string
---@param subKey string
function PropertyComponent:RemovePropSet(key, subKey)
	local propertyKey = string.Combine(PropertyComponent.split, key, subKey)
	self._propSetDict[propertyKey] = nil
	self:CalculateProp()
end

function PropertyComponent:CalculateProp()
	if self._isChanging then
		return
	end
	local oldCalcPropDict = clone(self._calcPropDict)
	self._basePropDict = {}
	-- 基础属性统计
	for _, cfgPropertyData in ipairs(CfgProperty.All()) do
		self._basePropDict[cfgPropertyData.id] = 0
	end
	for _, propSet in pairs(self._propSetDict) do
		for key, _ in pairs(propSet) do
			local value = table.GetOrAddDefault_Dict(self._basePropDict, key, function()
				return 0
			end)
			self._basePropDict[key] = value + propSet[key]
		end
	end
	--综合属性计算
	self._calcPropDict = {}
	for key, _ in pairs(self._basePropDict) do
		self._calcPropDict[key] = self._basePropDict[key]
	end

	if self._unit then
		local newCalcPropDict = self._calcPropDict
		local calcPropDictDiff = table.GetDiff(oldCalcPropDict, self._calcPropDict)
		self._unit:OnPropertyChanged(oldCalcPropDict, newCalcPropDict, calcPropDictDiff)
	end
end

function PropertyComponent:StartChange()
	self._isChanging = true
end

function PropertyComponent:EndChange()
	self._isChanging = false
	self:CalculateProp()
end

function PropertyComponent:CalculateOriginalDamageValue(argDict)
end

function PropertyComponent:CalculateRealDamageValue(damageValue, targetUnit, argDict)
end

function PropertyComponent:CalculateOriginalHealValue(argDict)
end

function PropertyComponent:CalculateRealHealValue(healValue, targetUnit, argDict)
end

----------------------------------------------------------------------
-- TODO相关
----------------------------------------------------------------------
function PropertyComponent:GetCalcPropDict()
	return self._calcPropDict
end


function PropertyComponent:Destroy()
end

return PropertyComponent