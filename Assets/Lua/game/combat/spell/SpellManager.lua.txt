---@class SpellManager:TickObject
local SpellManager = Class("SpellManager", TickObject)

function SpellManager:Init()
  SpellManager.super.Init(self)
  ---@type table<string,SpellListenerInfo[]>
  self.listener_dict = {
    on_start = {}, -- 技能Start之后触发  OnSpellStart
    on_cast = {}, -- 技能OnCast之后触发  OnSpellCast
    on_hurt = {}, -- 被伤害（任何形式）  OnHurt
    on_hurt_target = {}, --  伤害目标（任何形式） OnHurt
    be_hit = {}, -- 被技能打后  OnHit
    on_hit = {}, -- 用技能打目标后  OnHit
    on_cur_spell_hit = {}, -- 用技能打目标后只有是相同的技能才触发  OnHit
    normal_attack = {}, --  放普攻后  OnHit
    before_dead = {}, --  死亡前 BeforeDead
    before_hit = {}, --  用技能打目标前  BeforeHit
    before_be_hit = {}, --  被技能打前  BeforeBeHit
    on_kill_target = {}, -- 杀死目标后 OnKillTarget
    on_hp_change = {}, -- 目标血量改变时 OnHpChange
    on_missile_reach = {}, -- 当子弹到达
  }

  self:AddListener(SpellEventNameConst.On_Spell_Start, function(...) self:OnSpellStart(...) end) --
  self:AddListener(SpellEventNameConst.On_Spell_Cast, function(...) self:OnSpellCast(...) end) --
  self:AddListener(SpellEventNameConst.On_Missile_Reach, function(...) self:OnMissileReach(...) end)
  self:AddListener(UnitEventNameConst.On_Unit_Hp_Change, function(...) self:OnHpChange(...) end)
  self:AddListener(UnitEventNameConst.On_Unit_Hurt, function(...) self:OnHurt(...) end)
  self:AddListener(UnitEventNameConst.Before_Unit_Dead, function(...) self:BeforeDead(...) end)
  self:AddListener(UnitEventNameConst.On_Unit_Kill_Target, function(source_unit, target_unit, spell, ...)
    if spell then
      self:OnKillTarget(...)
    end
  end)
  self:AddListener(UnitEventNameConst.On_Unit_Hit, function(...) self:OnHit(...) end) --
  self:AddListener(UnitEventNameConst.Before_Unit_Hit, function(...) self:BeforeHit(...) end) --

  self:AddListener(UnitEventNameConst.On_Unit_Destroy, function(...) self:OnUnitDestroy(...) end) --
end

----------------------------------------------------------------------
-- 释放技能相关
----------------------------------------------------------------------
---@param source_unit Unit
---@param target_unit Unit
---@param is_control @是否控制类技能
function SpellManager:CastSpell(source_unit, spell_id, target_unit, arg_dict, is_control)
  local is_can_cast, spellDefinition, spell_class = self:CheckIsCanCast(source_unit, spell_id, target_unit, is_control)
  if not is_can_cast then
    return false
  end
  -- 开始释放技能
  ---@type SpellBase
  local spell = self:AddChild(nil, spell_class, source_unit, spell_id, target_unit,spellDefinition, arg_dict)
  if spellDefinition.cast_type == "正常" then
    -- 当玩家是手动操作释放技能时，技能方向就以玩家的输入为准（但如果有目标则会以目标方向释放技能，无视输入）
    -- 当释放的技能类型是正常的话，则需停下来施法
    if source_unit.current_attack then
      self:BreakSpell(source_unit.current_attack:GetGuid())
    end
    local rotation = nil
    local is_not_face_to_target = arg_dict and arg_dict.is_not_face_to_target
    is_not_face_to_target = is_not_face_to_target or spellDefinition.is_not_face_to_target
    local target_position = arg_dict and arg_dict.position or target_unit:GetPosition()
    if target_unit and (not is_not_face_to_target or not is_control) then
      local dir = target_position - source_unit:GetPosition()
      rotation = Quaternion.LookRotation(dir)
      if rotation then
        source_unit:FaceTo(rotation)
      end
    end
    if not spellDefinition.is_can_move_while_cast or not is_control then
      source_unit:MoveStop(rotation)
    end
    source_unit.current_attack = spell
    source_unit:UpdateMixedStates()
  end
  if spellDefinition.type == "普攻" then
    source_unit:NormalAttackStart()
  end
  spell:Start()
  return true
end

---@param source_unit Unit
---@param target_unit Unit
---@return boolean, SpellDefinition
function SpellManager:CheckIsCanCast(source_unit, spell_id, target_unit, is_control)
  local spellDefinition = global.definitionManager:GetSpellDefinition(spell_id)
  if not spellDefinition then
    ErrorFormat("spell_id(%d) is not exist!", spell_id)
    return false
  end
  if not source_unit or (source_unit:IsDead() and spellDefinition.cast_type ~= "触发") then
    return false
  end
  if not source_unit:IsSpellCooldownOk(spell_id) then
    return false
  end
  if not source_unit:CanBreakCurrentSpell(spell_id, spellDefinition) then
    return false
  end

  local scope = spellDefinition.target_type or "enemy"
  --   如果是混乱则找任何可以攻击的人
  if source_unit:IsConfused() then
    scope = "all"
  end
  local is_only_attackable = scope ~= "friend"
  if spellDefinition.is_need_target then
    if not target_unit then
      return false
    end
    if not global.client.combat.unitManager:__CheckUnit(target_unit, source_unit, { mode = "circle", radius = spellDefinition.range }, source_unit:GetFaction(), scope, is_only_attackable) then
      return false
    end
  end
  local spell_class = ClassLoadUtil.Load(spellDefinition.class_path_lua)
  if spell_class.CheckIsCanCast and
      not spell_class.CheckIsCanCast(source_unit, spell_id, target_unit, spellDefinition,is_control) then
    return false
  end
  return true, spellDefinition, spell_class
end


--  RecommendCast的作用：按照技能的作用对象、偏好，返回一堆按顺序排好的推荐目标
---@param source_unit Unit
---@param target_unit_list Unit[]|Unit
---@return Unit[]
function SpellManager:RecommendCast(source_unit, spell_id, target_unit_list, is_control)
  if not source_unit or source_unit:IsDead() then
    return {}
  end
  if not target_unit_list then
    return {}
  end
  local spellDefinition = global.definitionManager:GetSpellDefinition(spell_id)
  local spell_class = ClassLoadUtil.Load(spellDefinition.class_path_lua)
  if not spell_class then
    Error("spell code is not exist: ", spellDefinition.class_path_lua)
    return {}
  end
  if target_unit_list and IsUnit(target_unit_list) then
    local target_unit = target_unit_list
    if self:__IsUnitMatchCondition(source_unit, target_unit, is_control, spellDefinition, spell_class) then
      return { target_unit }
    end
  end
  local new_target_unit_list = {}
  for _, target in ipairs(target_unit_list) do
    if self:__IsUnitMatchCondition(source_unit, target, is_control, spellDefinition, spell_class) then
      table.insert(new_target_unit_list, target)
    end
  end
  return self:RecommendSpellRule(source_unit, new_target_unit_list[1], spellDefinition, source_unit:GetPosition(), new_target_unit_list)
end

---@param spellDefinition SpellDefinition
---@param source_unit Unit
---@param target_unit Unit
---@param target_unit_list Unit[]
function SpellManager:RecommendSpellRule(source_unit, target_unit, spellDefinition, origin_position, target_unit_list)
  --当前敌人
  --随机x个敌人
  --生命最低的x个人敌人
  --全体敌人
  --自己
  --随机x个队友
  --生命最低的x个队友
  --全体队友
  --召唤单位
  --场上所有人(不分敌友)
  if not target_unit then
    return {}
  end
  local select_unit_arg_dict = spellDefinition.select_unit_arg_dict
  if not select_unit_arg_dict then
    return target_unit_list or { target_unit }
  end

  local select_unit_faction = select_unit_arg_dict.select_unit_faction
  local select_unit_count = select_unit_arg_dict.select_unit_count or 1000
  local scope = SpellConst.Select_Unit_Faction_Dict[select_unit_faction]

  -- 这个技能的初始点
  local condition_dict = {
    order = "distance",
    origin = origin_position,
    faction = source_unit:GetFaction(),
    scope = scope,
    range_info = { mode = "circle", radius = spellDefinition.range }
  }
  target_unit_list = target_unit_list or global.client.combat.unitManager:SelectUnit(condition_dict)

  local count = select_unit_count
  local new_target_list = {}
  --TODO select_unit
  --TODO select_unit
  new_target_list = table.Sub_Array(target_unit_list, nil, nil, count)
  if #new_target_list == 0 then
    return { target_unit }
  end

  return new_target_list
end


-- 检查单位是否符合需求
---@param source_unit Unit
---@param spellDefinition SpellDefinition
---@param target_unit Unit
function SpellManager:__IsUnitMatchCondition(source_unit, target_unit, is_control, spellDefinition, spell_class)
  --肯定有target
  if target_unit:IsDead() then
    return false
  end
  if not source_unit:IsConfused() then
    if spellDefinition.target_type == "enemy" and target_unit:IsInvincible() then
      return false
    end
    if spellDefinition.target_type and spellDefinition.target_type ~="all" then
      if not global.client.combat.unitManager:CheckFaction(source_unit:GetFaction(), target_unit:GetFaction(), spellDefinition.target_type) then
        return false
      end
    end
  end
  if not spell_class.IsUnitMatchCondition(source_unit, spellDefinition.id, target_unit, spellDefinition, is_control) then
    return false
  end
  return true
end

----------------------------------------------------------------------
-- 监听回调技能相关
----------------------------------------------------------------------
---@param type string
---@param unit Unit
function SpellManager:RegisterListener(type, unit, obj, tag, func)
  if not self.listener_dict[type] then
    Error("Register Listener with undefine type()!", type)
    return
  end
  ---@type SpellListenerInfo
  local spellListenerInfo = SpellListenerInfo.New()
  spellListenerInfo.type = type
  spellListenerInfo.unit = unit
  spellListenerInfo.obj = obj
  spellListenerInfo.tag = tag
  spellListenerInfo.func = func
  table.insert(self.listener_dict[type], spellListenerInfo)
end

---@param type string
---@param unit Unit
function SpellManager:UnRegisterListener(type, unit, obj, tag)
  if not self.listener_dict[type] then
    ErrorFormat("Unregister Listener with undefine type(%s)!", type)
    return
  end
  for index, listenerInfo in ipairs(self.listener_dict[type]) do
    if listenerInfo.unit == unit and
        listenerInfo.obj == obj and
        listenerInfo.tag == tag then
      table.remove(self.listener_dict[type], index)
      break
    end
  end
end

function SpellManager:RemoveListenersByObj(obj)
  for _, listeners in pairs(self.listener_dict) do
    for i = #listeners, 1, -1 do
      if listeners[i].obj == obj then
        table.remove(listeners, i)
      end
    end
  end
end

---@param listener SpellListenerInfo
function SpellManager:ListenerCallback(listener, source_unit, ...)
  listener.func(source_unit, ...)
end

function SpellManager:BeforeHit(source_unit, target_unit, ...)
  for k, listener in ipairs(self.listener_dict.before_hit) do
    if listener.unit == source_unit then
      self:ListenerCallback(listener, source_unit, target_unit, ...)
    end
  end
  for k, listener in ipairs(self.listener_dict.before_be_hit) do
    if listener.unit == target_unit then
      self:ListenerCallback(listener, source_unit, target_unit, ...)
    end
  end
end

---@param spell SpellBase
function SpellManager:OnHit(source_unit, target_unit, spell, ...)
  for k, listener in ipairs(self.listener_dict.be_hit) do
    if listener.unit == target_unit then
      self:ListenerCallback(listener, source_unit, target_unit, spell, ...)
    end
  end
  -- !注意：触发回调的过程中可能再次插入或者remove listener
  for k, listener in ipairs(self.listener_dict.on_hit) do
    if listener.unit == source_unit then
      self:ListenerCallback(listener, source_unit, target_unit, spell, ...)
    end
  end
  for k, listener in ipairs(self.listener_dict.on_cur_spell_hit) do
    if listener.unit == source_unit and spell == listener.obj then
      self:ListenerCallback(listener, source_unit, target_unit, spell, ...)
    end
  end
  if spell.spellDefinition.type == "普攻" then
    for k, listener in ipairs(self.listener_dict.normal_attack) do
      if listener.unit == source_unit then
        self:ListenerCallback(listener, source_unit, target_unit, spell, ...)
      end
    end
  end
end

function SpellManager:OnKillTarget(source_unit, target_unit, spell, ...)
  for k, listener in ipairs(self.listener_dict.on_kill_target) do
    if listener.unit == source_unit then
      self:ListenerCallback(listener, source_unit, target_unit,spell, ...)
    end
  end
end

function SpellManager:BeforeDead(source_unit, dead_unit, ...)
  for k, listener in ipairs(self.listener_dict.before_dead) do
    if listener.unit == dead_unit then
      self:ListenerCallback(listener, source_unit, dead_unit, ...)
    end
  end
end

function SpellManager:OnHurt(source_unit, target_unit, ...)
  for k, listener in ipairs(self.listener_dict.on_hurt) do
    if listener.unit == target_unit then
      self:ListenerCallback(listener, source_unit, target_unit, ...)
    end
  end
  for k, listener in ipairs(self.listener_dict.on_hurt_target) do
    if listener.unit == source_unit then
      self:ListenerCallback(listener, source_unit, target_unit, ...)
    end
  end
end

function SpellManager:OnHpChange(source_unit, target_unit, ...)
  for k, listener in ipairs(self.listener_dict.on_hp_change) do
    if listener.unit == target_unit then
      self:ListenerCallback(listener, source_unit, target_unit, ...)
    end
  end
end

function SpellManager:OnSpellStart(source_unit, target_unit, spell)
  for k, listener in ipairs(self.listener_dict.on_start) do
    if listener.unit == source_unit and listener.obj == spell then
      self:ListenerCallback(listener, source_unit, target_unit, spell)
    end
  end
end

function SpellManager:OnSpellCast(source_unit, target_unit, spell)
  for k, listener in ipairs(self.listener_dict.on_cast) do
    if listener.unit == source_unit and listener.obj == spell then
      self:ListenerCallback(listener, source_unit, target_unit, spell)
    end
  end
end

function SpellManager:OnMissileReach(source_unit, missile, spell)
  for k, listener in ipairs(self.listener_dict.on_missile_reach) do
    if listener.unit == source_unit and listener.obj == spell then
      self:ListenerCallback(listener, source_unit, missile, spell)
    end
  end
end

----------------------------------------------------------------------
-- Util相关
----------------------------------------------------------------------

---@return SpellBase
function SpellManager:GetSpell(guid)
  return self:GetChild(guid)
end

function SpellManager:BreakSpell(guid)
  local spell = self:GetSpell(guid)
  if spell then
    spell:Break()
  end
end

function SpellManager:RemoveSpell(guid)
  self:RemoveChild(guid)
end

function SpellManager:OnUnitDestroy(unit)
  if unit.current_attack then
    self:BreakSpell(unit.current_attack:GetGuid())
  end
end


function SpellManager:GetSpellRange(spell_id)
  local spellDefinition = global.definitionManager:GetSpellDefinition(spell_id)
  if not spellDefinition then
    ErrorFormat("spell_id(%s) is not exist!", spell_id)
    return false
  end
  local arg_dict = spellDefinition.arg_dict or {}
  local min_range = DoerAttrParserUtil.ConvertValueWithTypeString(arg_dict.min_range)
  return spellDefinition.range, min_range
end

---@param spell SpellBase
function SpellManager:OnSpellAnimationFinished(spell)
  if spell.source_unit.current_attack == spell then
    if spell.source_unit.is_normal_attacking then
      spell.source_unit:NormalAttackFinish()
    end
    spell.source_unit.current_attack = nil
    spell.source_unit:UpdateMixedStates()
  end
end

return SpellManager