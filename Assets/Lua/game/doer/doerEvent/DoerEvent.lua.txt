---@class DoerEvent:Doer
local DoerEvent = Class("DoerEvent", Doer)

function DoerEvent:Execute(desc, owner, doerAttrParser)
  if not self:CheckDoerEventTriggerCondition(doerAttrParser) then
    return false
  end
  local definition = self:GetDefinition()
  local is_not_talk = definition.is_not_talk -- 不弹出talk
  --通用情况
  local trigger_desc = definition.trigger_desc
  local word_list = {}
  if not string.IsNilOrWhiteSpace(trigger_desc) then
    table.insert(word_list, doerAttrParser:ParseString(trigger_desc))
  end
  local ok = 1 -- 0-触发条件失败，1-触发成功，执行失败，2-触发成功，执行成功
  local step_ids = definition.step_ids
  if not table.IsNilOrEmpty(step_ids) then
    for i = 1, table.Count(step_ids) do
      local step_id = step_ids[i]
      local stepDefinition = global.definitionManager.doerEventStepDefinition[step_id]
      ok = self:ExecuteStep(desc .. "步骤" .. i, step_id, owner, doerAttrParser, word_list)
      if ok == 0 then
        break
      elseif ok == 2 and stepDefinition.is_stop_here then
        break
      end
    end
  end
  if not is_not_talk and not table.IsNilOrEmpty(word_list) then
    for _, word in ipairs(word_list) do
      global.client.uiManager:Notify(word)
    end
  end
  return ok > 0
end

---@param doerAttrParser  DoerAttrParser
function DoerEvent:CheckDoerEventTriggerCondition(doerAttrParser)
  local definition = global.definitionManager.doerEventDefinition[self:GetId()]
  local is_not_talk = definition.is_not_talk -- 不弹出talk
  local trigger_condition = definition.trigger_condition -- 触发条件
  if not string.IsNilOrWhiteSpace(trigger_condition) and not doerAttrParser:ParseBoolean(trigger_condition) then
    --不满足触发的情况
    if not is_not_talk then
      local can_not_trigger_desc = definition.can_not_trigger_desc
      if string.IsNilOrWhiteSpace(can_not_trigger_desc) then
        global.client.uiManager:Notify(global.Translate("现在不能触发此操作"))
      else
        global.client.uiManager:Notify(doerAttrParser:ParseString(can_not_trigger_desc))
      end
    end
    return false
  end
  return true
end

---@param doerAttrParser  DoerAttrParser
function DoerEvent:ExecuteStep(desc, doerEventStep_id, owner, doerAttrParser, word_list)
  local definition = global.definitionManager.doerEventStepDefinition[doerEventStep_id]
  local trigger_condition = definition.trigger_condition -- 触发条件
  if not string.IsNilOrWhiteSpace(trigger_condition) and not doerAttrParser:ParseBoolean(trigger_condition) then
    --不满足触发的情况
    local can_not_trigger_desc = definition.can_not_trigger_desc
    if string.IsNilOrWhiteSpace(can_not_trigger_desc) then
      table.insert(word_list, global.Translate("现在不能触发此操作"))
    else
      table.insert(word_list, doerAttrParser:ParseString(can_not_trigger_desc))
    end
    return 0
  end
  local trigger_desc = definition.trigger_desc -- 触发提示语
  if not string.IsNilOrWhiteSpace(trigger_desc) then
    table.insert(word_list, doerAttrParser:ParseString(trigger_desc))
  end
  local execute_condition = definition.execute_condition -- 执行条件
  if not string.IsNilOrWhiteSpace(execute_condition) and not doerAttrParser:ParseBoolean(execute_condition) then
    --不满足触发的情况
    local can_not_execute_desc = definition.can_not_execute_desc -- 不执行提示语
    if not string.IsNilOrWhiteSpace(can_not_execute_desc) then
      table.insert(word_list, doerAttrParser:ParseString(can_not_execute_desc))
    end
    return 1
  end

  local execute_desc = definition.execute_desc -- 执行提示语
  if not string.IsNilOrWhiteSpace(execute_desc) then
    table.insert(word_list, doerAttrParser:ParseString(execute_desc))
  end
  ---@type DoerAttrSetter
  local doerAttrSetter = DoerAttrSetter.New(desc,doerAttrParser)
  -- 设置属性、更改属性
  local set_attr_dict = definition.set_attr_dict
  if not table.IsNilOrEmpty(set_attr_dict) then
    for attr_name, attr_value in pairs(set_attr_dict) do
      doerAttrSetter:Set(attr_name, attr_value,false)
    end
  end
  local add_attr_dict = definition.add_attr_dict
  if not table.IsNilOrEmpty(add_attr_dict) then
    for attr_name, attr_value in pairs(add_attr_dict) do
      doerAttrSetter:Set(attr_name, attr_value,true)
    end
  end


  ---@type User
  local user
  if IsInstanceOf(doerAttrParser:GetU(),"User") then
    user = doerAttrParser:GetU()
  elseif IsInstanceOf(doerAttrParser:GetO(),"User") then
    user = doerAttrParser:GetO()
  elseif IsInstanceOf(doerAttrParser:GetE(),"User") then
    user = doerAttrParser:GetE()
  else
    user = global.client.user
  end

  -- 添加或者删除物品
  local deal_item_dict = definition.deal_item_dict
  if not table.IsNilOrEmpty(deal_item_dict) then
    user:DealItems(deal_item_dict, doerAttrParser)
  end

  -- 接受任务
  local accept_mission_ids = definition.accept_mission_ids
  if not table.IsNilOrEmpty(accept_mission_ids) then
    for _, accept_mission_id in ipairs(accept_mission_ids) do
      user:AcceptMission(owner, accept_mission_id)
    end
  end


  -- 放弃任务
  local give_up_mission_ids = definition.give_up_mission_ids
  if not table.IsNilOrEmpty(give_up_mission_ids) then
    for _, give_up_mission_id in ipairs(give_up_mission_ids) do
      user:GiveUpMission(give_up_mission_id)
    end
  end

  -- 添加已完成任务
  local add_finished_mission_ids = definition.add_finished_mission_ids
  if not table.IsNilOrEmpty(add_finished_mission_ids) then
    for _, add_finished_mission_id in ipairs(add_finished_mission_ids) do
      user:AddFinishedMissionId(add_finished_mission_id)
    end
  end

  -- 删除已完成任务
  local remove_finished_mission_ids = definition.remove_finished_mission_ids
  if not table.IsNilOrEmpty(remove_finished_mission_ids) then
    for _, remove_finished_mission_id in ipairs(remove_finished_mission_ids) do
      user:RemoveFinishedMissionId(remove_finished_mission_id)
    end
  end

  -- 检测完成任务
  user:CheckAutoFinishMissions()
  return 2
end

return DoerEvent