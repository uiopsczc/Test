local Timer = require("LuaCat.Timer.Timer")

---@class TimerManager:Class
---@field _updateTimerList Timer[]
---@field _lateUpdateTimerList Timer[]
---@field _fixedUpdateTimerList Timer[]
---@field _toAddTimerList Timer[]
---@field _toRemoveTimerList Timer[]
---@field _coUpdateTimerList Timer[]
---@field _coLateUpdateTimerList Timer[]
---@field _coFixedUpdateTimerList Timer[]
---@field _coToAddTimerList Timer[]
---@field _coToRemoveTimerList Timer[]
local TimerManager = Class("TimerManager")

function TimerManager:Init()
	-- 成员变量

	self._updateTimerList = {}
	self._lateUpdateTimerList = {}
	self._fixedUpdateTimerList = {}

	self._coUpdateTimerList = {}
	self._coLateUpdateTimerList = {}
	self._coFixedUpdateTimerList = {}
end

local function _Add(timerList, timer)
	table.insert(timerList, timer)
	timer:Start()
end

function TimerManager:GetTimerList(updateMode, isCoroutineTimer)
	if updateMode == Timer.UpdateMode.Update then
		return not isCoroutineTimer and self._updateTimerList or self._coUpdateTimerList
	end

	if updateMode == Timer.UpdateMode.LateUpdate then
		return not isCoroutineTimer and self._lateUpdateTimerList or self._coLateUpdateTimerList
	end

	if updateMode == Timer.UpdateMode.FixedUpdate then
		return not isCoroutineTimer and self._fixedUpdateTimerList or self._coFixedUpdateTimerList
	end
end

---@param timer Timer
function TimerManager:AddTimer2(timer)
	_Add(self:GetTimerList(timer._updateMode, timer._isCoroutineTimer), timer)
end

---@param timer Timer
function TimerManager:RemoveTimer(timer, index)
	local timerList = self:GetTimerList(timer._updateMode, timer._isCoroutineTimer)
	if index then
		table.remove(timerList, index)
	else
		table.RemoveByValue_Array(timerList, timer)
	end
	timer:Finish()
	PoolCatManagerUtil.Despawn(timer)
end

----------------------------------------------------------------------
--
----------------------------------------------------------------------
-- 获取Update定时器
---@return Timer
function TimerManager:AddTimer(targetFunc, targetFuncArgs, delay, interval, updateMode, isUseUnscaledDeltaTime, isCoroutineTimer, isUseFrame)
	---@type Timer
	local timer = PoolCatManagerUtil.Spawn(Timer)
	timer:Init(targetFunc, targetFuncArgs, delay, interval, updateMode, isUseUnscaledDeltaTime, isCoroutineTimer, isUseFrame)
	self:AddTimer2(timer)
	return timer
end

---@return Timer
function TimerManager:AddCoTimer(targetFunc, targetFuncArgs, delay, interval, updateMode, isUseUnscaledDeltaTime, isUseFrame)
	return self:AddTimer(targetFunc, targetFuncArgs, delay, interval, updateMode, isUseUnscaledDeltaTime, true, isUseFrame)
end

function TimerManager:AddUpdateTimer(targetFunc, targetFuncArgs, delay, interval, isUseUnscaledDeltaTime, isUseFrame)
	return self:AddTimer(targetFunc, targetFuncArgs, delay, interval, Timer.UpdateMode.Update, isUseUnscaledDeltaTime, nil, isUseFrame)
end
function TimerManager:AddFixedUpdateTimer(targetFunc, targetFuncArgs, delay, interval, isUseUnscaledDeltaTime, isUseFrame)
	return self:AddTimer(targetFunc, targetFuncArgs, delay, interval, Timer.UpdateMode.FixedUpdate, isUseUnscaledDeltaTime, nil, isUseFrame)
end
function TimerManager:AddLateUpdateTimer(targetFunc, targetFuncArgs, delay, interval, isUseUnscaledDeltaTime, isUseFrame)
	return self:AddTimer(targetFunc, targetFuncArgs, delay, interval, Timer.UpdateMode.LateUpdate, isUseUnscaledDeltaTime, nil, isUseFrame)
end

function TimerManager:AddCoUpdateTimer(targetFunc, targetFuncArgs, delay, interval, isUseUnscaledDeltaTime, isUseFrame)
	return self:AddTimer(targetFunc, targetFuncArgs, delay, interval, Timer.UpdateMode.Update, isUseUnscaledDeltaTime, true, isUseFrame)
end
function TimerManager:AddCoFixedUpdateTimer(targetFunc, targetFuncArgs, delay, interval, isUseUnscaledDeltaTime, isUseFrame)
	return self:AddTimer(targetFunc, targetFuncArgs, delay, interval, Timer.UpdateMode.FixedUpdate, isUseUnscaledDeltaTime, true, isUseFrame)
end
function TimerManager:AddCoLateUpdateTimer(targetFunc, targetFuncArgs, delay, interval, isUseUnscaledDeltaTime, isUseFrame)
	return self:AddTimer(targetFunc, targetFuncArgs, delay, interval, Timer.UpdateMode.LateUpdate, isUseUnscaledDeltaTime, true, isUseFrame)
end

----------------------------------------------------------------------
--
----------------------------------------------------------------------
---@param self TimerManager
---@param timerList Timer[]
local function _DoUpdate(self, timerList, deltaTime, unscaledDeltaTime)
	self.is_updating = true
	for i = 1, #timerList do
		local timer = timerList[i]
		if timer and not timer:IsFinished() then
			timer:DoUpdate(deltaTime, unscaledDeltaTime)
		end
	end
	--check remvoe
	for i = #timerList, 1, -1 do
		local timer = timerList[i]
		if timer:IsFinished() then
			self:RemoveTimer(timer, i)
		end
	end
	self.is_updating = false
end

function TimerManager:Update(deltaTime, unscaledDeltaTime)
	_DoUpdate(self, self._updateTimerList, deltaTime, unscaledDeltaTime)
end

function TimerManager:FixedUpdate(deltaTime, unscaledDeltaTime)
	_DoUpdate(self, self._fixedUpdateTimerList, deltaTime, unscaledDeltaTime)
end

function TimerManager:LateUpdate(deltaTime, unscaledDeltaTime)
	_DoUpdate(self, self._lateUpdateTimerList, deltaTime, unscaledDeltaTime)
end

function TimerManager:CoUpdate(deltaTime, unscaledDeltaTime)
	_DoUpdate(self, self._coUpdateTimerList, deltaTime, unscaledDeltaTime)
end

function TimerManager:CoFixedUpdate(deltaTime, unscaledDeltaTime)
	_DoUpdate(self, self._coFixedUpdateTimerList, deltaTime, unscaledDeltaTime)
end

function TimerManager:CoLateUpdate(deltaTime, unscaledDeltaTime)
	_DoUpdate(self, self._coLateUpdateTimerList, deltaTime, unscaledDeltaTime)
end

function TimerManager:Destroy()
	self._toAddTimerList = {}
	self._toRemoveTimerList = {}

	self._updateTimerList = {}
	self._lateUpdateTimerList = {}
	self._fixedUpdateTimerList = {}

	self._coToAddTimerList = {}
	self._coToRemoveTimerList = {}

	self._coUpdateTimerList = {}
	self._coLateUpdateTimerList = {}
	self._coFixedUpdateTimerList = {}
end

return TimerManager