-- 1、定时器需要暂停使用pause、恢复使用unpause
-- 2、定时器使用stop停止，一旦停止逻辑层脚本就应该将引用置空，因为它随后会被管理类回收，引用已经不再正确

---@class Timer:Class
---@field _delay number
---@field target
---@field _interval  @等于0的时候，每帧都会调用
---@field _isUseUnscaledDeltaTime boolean
---@field _remainDuration number
---@field _state @idle,running,paused,finished
---@field isFinished boolean
local Timer = Class("Timer")

Timer.State = {
	Idle = "Idle",
	Running = "Running",
	Paused = "Paused",
	Finished = "Finished"
}

Timer.UpdateMode = {
	Update = "Update",
	FixedUpdate = "FixedUpdate",
	LateUpdate = "LateUpdate",
}

-- target_func  返回false表示不继续执行，结束
---@param targetFuncArgs table
function Timer:Init(targetFunc, targetFuncArgs, delay, interval, updateMode, isUseUnscaledDeltaTime, isCoroutineTimer, isUseFrame)
	-- 时长，秒或者帧
	self._delay = delay or 0
	-- 回调函数
	self._targetFunc = targetFunc
	-- targetFunc的参数
	self._targetFuncArgs = targetFuncArgs
	-- 间隔
	self._interval = interval or 0
	-- 使用deltaTime计时，还是采用unscaledDeltaTime计时
	self._isUseUnscaledDeltaTime = isUseUnscaledDeltaTime
	-- update_mode: update,lateUpdate,fixedUpdate
	self._updateMode = updateMode or Timer.UpdateMode.Update
	-- 是否是coroutine模式
	self._isCoroutineTimer = isCoroutineTimer
	-- 是否使用frame模式
	self._isUseFrame = isUseFrame
	--  下次触发剩余时间
	self._remainDuration = delay
	-- 当前状态
	self._state = Timer.State.Idle
end

-- 启动计时
function Timer:Start()
	self._state = Timer.State.Running
end

-- 暂停/恢复计时
function Timer:SetIsPaused(isPaused)
	if isPaused and self._state == Timer.State.Paused then
		return
	end
	if not isPaused and not self._state == Timer.State.Paused then
		return
	end
	if isPaused then
		self.preState = self._state
	end
	self._state = isPaused and Timer.State.Paused or self.preState
end

function Timer:DoUpdate(deltaTime, unscaledDeltaTime)
	if self._state ~= Timer.State.Running then
		return
	end
	local targetDeltaTime = self._isUseUnscaledDeltaTime and unscaledDeltaTime or deltaTime
	if self._isUseFrame then
		self._remainDuration = self._remainDuration - 1
	else
		self._remainDuration = self._remainDuration - targetDeltaTime
	end
	--if self.a =="a" then
	--  log(self.remain_duration)
	--end
	if self._remainDuration > 0 then
		return
	end
	while self._remainDuration <= 0 do
		--运行状态
		local status, ret
		if self._targetFuncArgs then
			table.SafePackArray(self._targetFuncArgs)
			status, ret = pcall(self._targetFunc, table.SafeUnpack(self._targetFuncArgs))
		else
			status, ret = pcall(self._targetFunc)
		end
		if not status then
			-- 调用出错
			local err = ret
			self:Finish()
			Error(err)
			return
		else
			local isNotFinished = ret
			if not isNotFinished then
				self:Finish()
				return
			end
		end
		if self._interval > 0 then
			self._remainDuration = self._remainDuration + self._interval
			if self._remainDuration == 0 then
				-- == 0的情况下跳出循环不处理
				break
			end
		else
			break
		end
	end
end

-- 停止计时
function Timer:Stop()
	self:Finish()
end

function Timer:Finish()
	self._state = Timer.State.Finished
end

-- 是否已经完成计时
function Timer:IsFinished()
	return self._state == Timer.State.Finished
end

----------------------------------------------------------------------
-- SetGet相关
----------------------------------------------------------------------
function Timer:SetTargetFuncArgs(targetFuncArgs)
	self._targetFuncArgs = targetFuncArgs
end


function Timer:OnDespawn()
	self._delay = 0
	self._targetFunc = nil
	self._targetFuncArgs = nil
	self._interval = 0
	self._isUseUnscaledDeltaTime = nil
	self._updateMode = Timer.UpdateMode.Update
	self._isCoroutineTimer = nil
	self._isUseFrame = nil
	self._remainDuration = nil
	self._state = Timer.State.Idle
end

return Timer