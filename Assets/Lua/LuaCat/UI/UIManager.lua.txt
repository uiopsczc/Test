require("LuaCat.UI.Define.UIConst")
---@class UIManager:UIObject
local UIManager = Class("UIManager", UIObject)

function UIManager:Init()
	UIManager.super.Init(self)
	self.graphicComponent:SetGameObject(GameObject.Find(UIConst.UIManager_Path), true)
	---@type CS.UnityEngine.Camera
	self.uiCamera = GameObject.Find(UIConst.UICamera_Path):GetComponent(typeof(CS.UnityEngine.Camera))
	---@type CS.UnityEngine.Canvas
	self.uiCanvas = GameObject.Find(UIConst.UICanvas_Path):GetComponent(typeof(CS.UnityEngine.Canvas))
	---@type CS.UnityEngine.RectTransform
	self.uiCanvas_rectTransform = self.uiCanvas:GetComponent(typeof(CS.UnityEngine.RectTransform))
	---@type UIBloodManager
	self.uiBloodManager = self:AddChild(nil, UIBloodManager)
end

function UIManager:PostInit()
	---@type CS.CsCat.UIManager
	self.csUIManager = global.client.csClient.uiManager
	---@type CS.CsCat.UILayerManager
	self.uiLayerManager = self.csUIManager.uiLayerManager
	self:InitListeners()
	self:InitPanels()
	self.uiNotifyManager = self.csUIManager.uiNotifyManager
	UIManager.super.PostInit(self)
end

function UIManager:InitListeners()
end

function UIManager:InitPanels()
	---@type CS.CsCat.UIBlackMaskPanel
	self.uiBlackMaskPanel = self.csUIManager.uiBlackMaskPanel
	---@type CS.CsCat.UILoadingPanel
	self.uiLoadingPanel = self.csUIManager.uiLoadingPanel
	---@type CS.CsCat.UIWaitingPanel
	self.uiWaitingPanel = self.csUIManager.uiWaitingPanel
	---@type CS.CsCat.UIShowLogoPanel
	self.uiShowLogoPanel = self.csUIManager.uiShowLogoPanel
	---@type CS.CsCat.UIFadePanel
	self.uiFadePanel = self.csUIManager.uiFadePanel
	---@type CS.CsCat.UILanternNotifyPanel
	self.uiLanternNotifyPanel = self.csUIManager.uiLanternNotifyPanel
end

-----------------------------UIBlood--------------------------------
---@param parentTransform CS.UnityEngine.Transform
---@param maxValue number
---@param sliderCount number
---@param toValue number
---@param sliderColorList Color[]
---@retrun UIBlood
function UIManager:AddUIBlood(parentTransform, maxValue, sliderCount, toValue, sliderColorList)
	return self.uiBloodManager:AddUIBlood(parentTransform, maxValue, sliderCount, toValue, sliderColorList)
end

---@param uiBlood UIBlood
function UIManager:RemoveUIBlood(uiBlood)
	return self.uiBloodManager:RemoveChild(uiBlood.key)
end

-----------------------------Notify--------------------------------
function UIManager:Notify(desc, parentTransform, isAddToChildPanelStack)
	isAddToChildPanelStack = isAddToChildPanelStack or false
	self.uiNotifyManager:Notify(desc, parentTransform, isAddToChildPanelStack)
end

function UIManager:LanternNotify(desc)
	self.uiNotifyManager:LanternNotify(desc)
end
-----------------------------Fade--------------------------------
function UIManager:HideFade()
	self.uiFadePanel:HideFade()
end

function UIManager:FadeInOut(duration, callback)
	self.uiFadePanel:FadeInOut(duration, callback)
end

function UIManager:FadeTo(fromAlpha, toAlpha, duration, callback)
	if fromAlpha then
		self.uiFadePanel:FadeTo(fromAlpha, toAlpha, duration, callback)
	else
		self.uiFadePanel:FadeTo(toAlpha, duration, callback)
	end

end
----------------------------Loading--------------------------------
function UIManager:SetLoadingPct(pct)
	self.uiLoadingPanel:SetPct(pct)
end

function UIManager:HideLoading()
	self.uiLoadingPanel:HideLoading()
end
----------------------------Waiting--------------------------------
function UIManager:StartWaiting()
	self.uiWaitingPanel:StartWaiting()
end

function UIManager:EndWaiting()
	self.uiWaitingPanel:EndWaiting()
end

function UIManager:HideWaiting()
	self.uiWaitingPanel:HideWaiting()
end
--------------------------------------------------------------------
function UIManager:__Reset()
	UIManager.super.__Reset(self)
	self:CloseAllChildPanels(true)
end

return UIManager