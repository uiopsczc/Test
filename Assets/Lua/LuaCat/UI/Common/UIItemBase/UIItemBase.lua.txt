---@class UIItemBase:UIObject
local UIItemBase = Class("UIItemBase", UIObject)

function UIItemBase:Init(parentTransform)
	UIItemBase.super.Init(self)
	self:GetGraphicComponent():SetParentTransform(parentTransform)
	self:GetGraphicComponent():SetPrefabPath("Assets/PatchResources/UI/UIItemBase/Prefab/UIItemBase.prefab")
end

function UIItemBase:_InitUI()
	UIItemBase.super._InitUI(self)
	self._Img_Bg = self:GetContentTransform():FindComponentInChildren(typeof(CS.UnityEngine.UI.Image), "Img_Bg")
	self._Img_Quality = self:GetContentTransform():FindComponentInChildren(typeof(CS.UnityEngine.UI.Image), "Img_Quality")
	self._Img_Icon = self:GetContentTransform():FindComponentInChildren(typeof(CS.UnityEngine.UI.Image), "Img_Icon")
	self._Txt_Count = self:GetContentTransform():FindComponentInChildren(typeof(CS.UnityEngine.UI.Text), "Txt_Count")
end

function UIItemBase:_InitUIExtensions()
	self._bgGameObject = self._Img_Bg.gameObject
end

function UIItemBase:GetCfgItemData(itemId)
	return CfgItem.GetById(itemId)
end

function UIItemBase:GetCfgQualityData(itemId)
	local cfgItemData = self:GetCfgItemData(itemId)
	return cfgItemData.qualityId == nil and nil or CfgProperty.GetById(cfgItemData.qualityId)
end

function UIItemBase:Show(itemId, itemCount)
	self:SetImgBg(itemId)
	self:SetImgQuality(itemId)
	self:SetImgIcon(itemId)
	self:SetTxtCount(itemCount)
end

function UIItemBase:SetImgBg(itemId)
	local cfgItemData = self:GetCfgItemData(itemId)
	if not string.IsNilOrWhiteSpace(cfgItemData.bgPath) then
		self:SetImageAsync(self._Img_Bg, cfgItemData.bgPath, nil, false)
	end
end

function UIItemBase:SetImgQuality(itemId)
	local cfgQualityData = self:GetCfgQualityData(itemId)
	if cfgQualityData and not string.IsNilOrWhiteSpace(cfgQualityData.iconPath) then
		self:SetImageAsync(self._Img_Quality, cfgQualityData.iconPath, nil, false)
	else
		self._bgGameObject:SetActive(false)
	end
end

function UIItemBase:SetImgIcon(itemId)
	local cfgItemData = self:GetCfgItemData(itemId)
	self:SetImageAsync(self._Img_Icon, cfgItemData.iconPath, nil, false)
end

function UIItemBase:SetTxtCount(itemCount)
	self._Txt_Count.text = (itemCount == 0 or itemCount == 1) and "" or string.format("x%s", itemCount)
end

return UIItemBase