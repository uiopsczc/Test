local UIHUDTextBase = require("LuaCat.UI.Common.UIHUD.UIHUDTextBase.UIHUDTextBase")
---@class UIHUDNumber:UIHUDTextBase
local UIHUDNumber = Class("UIHUDNumber", UIHUDTextBase)

function UIHUDNumber:Init(parentTransform)
	UIHUDNumber.super.Init(self, parentTransform)
	self._defaultShowDuration = 1
	self._halfDuration = self._defaultShowDuration * 0.5
end

function UIHUDNumber:AddLogicEvents()
	self:AddListener(GlobalEventNameConst.Update, self.Update)
end

---@param randomManager RandomManager
function UIHUDNumber:SetRandomManager(randomManager)
	self._randomManager = randomManager
end

---@return RandomManager
function UIHUDNumber:GetRandomManager()
	return self._randomManager or global.client.randomManager
end

function UIHUDNumber:Show(spawnWorldPosition, showString, color)
	self:InvokeAfterAllAssetsLoadDone(function()
		self._duration = self._defaultShowDuration
		local curSpawnWorldPosition
		if IsFunction(spawnWorldPosition) then
			curSpawnWorldPosition = spawnWorldPosition()
		elseif IsInstanceOf(spawnWorldPosition, "Vector3") then
			curSpawnWorldPosition = spawnWorldPosition
		else
			-- transform
			if not spawnWorldPosition then
				self:Reset()
				return
			end
			curSpawnWorldPosition = spawnWorldPosition.position
		end

		self._spawnUIPosition = CameraUtil.WorldToUIPos(nil, global.client.combat._cameraManager._mainCameraBase._camera, curSpawnWorldPosition)
		self._textComp.text = showString
		self._textComp.color = color

		if self:GetRandomManager():RandomBoolean() then
			self._posDiffX = self:GetRandomManager():RandomFloat(30, 100)
		else
			self._posDiffX = self:GetRandomManager():RandomFloat(-100, -30)
		end
		self._posDiffY = self:GetRandomManager():RandomFloat(50, 100)
		self._isShowing = true
		self:GetGraphicComponent():SetIsShow(true)
		self:UpdatePos(0)
	end)
end

function UIHUDNumber:Update(deltaTime, unscaledDeltaTime)
	if not self:IsCanUpdate() then
		return
	end
	self:UpdatePos(deltaTime)
end

function UIHUDNumber:UpdatePos(deltaTime)
	if not self._isShowing then
		return
	end
	self._duration = self._duration - deltaTime
	if self._duration <= 0 then
		self:Reset()
		return
	end

	if self._duration > self._halfDuration then
		self._posDiffY = EaseCat.Cubic.EaseOut2(0, self._posDiffY, (self._defaultShowDuration - self._duration) / self._halfDuration)
	else
		self._posDiffY = EaseCat.Cubic.EaseIn2(self._posDiffY, 0, (self._halfDuration - self._duration) / self._halfDuration)
	end

	local pct = (self._defaultShowDuration - self._duration) / self._defaultShowDuration
	self._posDiffX = EaseCat.Linear.EaseNone2(0, self._posDiffX, pct)

	if not self._isFading and pct >= 0.8 then
		self._isFading = true
		self._textComp:DOFade(0.2, self._duration)
	end

	local pos = self._spawnUIPosition + Vector2(self._posDiffX, self._posDiffY)
	self:GetGraphicComponent():GetRectTransform().anchoredPosition = pos
end

function UIHUDNumber:_Reset()
	UIHUDNumber.super._Reset(self)
	self:GetGraphicComponent():SetIsShow(false)
	self._duration = self._defaultShowDuration
	self._isShowing = false
	self._isFading = false
end

return UIHUDNumber