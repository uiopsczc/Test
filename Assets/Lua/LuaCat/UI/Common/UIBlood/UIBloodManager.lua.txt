---@class UIBloodManager:UIObject
local UIBloodManager = Class("UIBloodManager", UIObject)

function UIBloodManager:Init()
	UIBloodManager.super.Init(self)
	self.graphicComponent:SetGameObject(GameObject.Find(UIConst.UICanvas_Path .. "/UIBloodManager"), true)
	---@type CS.UnityEngine.GameObject[]
	self.uiBloodGameObjectPool = {}
end

---@param parentTransform CS.UnityEngine.Transform
---@param maxValue number
---@param sliderCount number
---@param toValue number
---@param sliderColorList Color[]
---@retrun UIBlood
function UIBloodManager:AddUIBlood(parentTransform, maxValue, sliderCount, toValue, sliderColorList)
	local uiBlood = self:AddChild(nil, UIBlood, parentTransform, maxValue, sliderCount, toValue, sliderColorList)
	return uiBlood
end

---@return CS.UnityEngine.GameObject
function UIBloodManager:SpawnUIBloodGameObject()
	if #self.uiBloodGameObjectPool > 0 then
		return table.remove(self.uiBloodGameObjectPool, #self.uiBloodGameObjectPool)
	end
	return nil
end

---@param uiBloodGameObject CS.UnityEngine.GameObject
function UIBloodManager:DespawnUIBloodGameObject(uiBloodGameObject)
	if not uiBloodGameObject then
		return
	end
	table.insert(self.uiBloodGameObjectPool, uiBloodGameObject)
	uiBloodGameObject.transform:SetParent(self.graphicComponent.transform)
end

function UIBloodManager:__Reset()
	UIBloodManager.super.__Reset(self)
	self.graphicComponent:SetIsShow(false)
end

return UIBloodManager