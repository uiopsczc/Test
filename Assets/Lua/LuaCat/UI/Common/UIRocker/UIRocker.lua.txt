local UIRockerConst = require("LuaCat.UI.Common.UIRocker.Define.UIRockerConst")
---@class UIRocker:UIObject
local UIRocker = Class("UIRocker", UIObject)
---@param uiRockerInput UIRockerInput
function UIRocker:Init(prefabPath, parentTransform, uiRockerInput)
	UIRocker.super.Init(self)
	self._movePctX = 0
	self._movePctY = 0
	self._pointId = 0
	---@type UIRockerInput
	self._uiRockerInput = uiRockerInput
	self:GetGraphicComponent():SetPrefabPath(prefabPath or UIRockerConst.UIRock_Prefab_Path)
	self:GetGraphicComponent():SetParentTransform(parentTransform)
end

function UIRocker:_InitUI()
	UIRocker.super._InitUI(self)
	self._Nego_RockerTriggerArea = self:GetGraphicComponent():GetTransform():Find("Nego_RockerTriggerArea").gameObject
	self._Nego_Rocker = self:GetGraphicComponent():GetTransform():Find("Nego_Rocker").gameObject
	self._Nego_Boll = self._Nego_Rocker.transform:Find("Nego_Boll").gameObject
	self._Nego_Arrow = self._Nego_Rocker.transform:Find("Nego_Arrow").gameObject
end

function UIRocker:_InitUIExtensions()
	UIRocker.super._InitUIExtensions(self)
	---@type CS.UnityEngine.RectTransform
	self._rockerRectTransform = self._Nego_Rocker:GetComponent(typeof(CS.UnityEngine.RectTransform))
	---@type CS.UnityEngine.RectTransform
	self._bollRectTransform = self._Nego_Boll:GetComponent(typeof(CS.UnityEngine.RectTransform))
	---@type CS.UnityEngine.RectTransform
	self._arrowRectTransform = self._Nego_Arrow:GetComponent(typeof(CS.UnityEngine.RectTransform))
	self._bollImage = self._Nego_Boll:GetComponent(typeof(CS.UnityEngine.UI.Image))
	self._canvasGroup = self:GetGraphicComponent():GetGameObject():GetComponent(typeof(CS.UnityEngine.CanvasGroup))

	self._rockerRectTransformSizeDelta = self._rockerRectTransform.sizeDelta
	self._rockerOriginAnchoredPosition = self._rockerRectTransform.anchoredPosition
	self._uiRockerRadius = self._rockerRectTransformSizeDelta.x / 2
	self._uiRockerRadiusInEventData = self._uiRockerRadius --是跟self._rockerRadius一样的
	self._bollOriginAnchoredPosition = self._bollRectTransform.anchoredPosition
end

function UIRocker:AddUIEvents()
	UIRocker.super.AddUIEvents(self)
	self:RegisterOnDrag(self._Nego_RockerTriggerArea, function(...)
		self:OnRockerDrag(...)
	end)
	self:RegisterOnPointerDown(self._Nego_RockerTriggerArea, function(...)
		self:OnUIRockerPointerDown(...)
	end)
	self:RegisterOnPointerUp(self._Nego_RockerTriggerArea, function(...)
		self:OnUIRockerPointerUp(...)
	end)
end

function UIRocker:AddLogicEvents()
	self:AddListener(GlobalEventNameConst.Update, self.Update)
end


-- 响应的时候是否需要设值alpha值
-- 按住时设置alpha为1
-- 松开时设置alpha为0
function UIRocker:SetIsNeedResponseWithSetAlpha(isNeedResponseWithSetAlpha)
	self._isNeedResponseWithSetAlpha = isNeedResponseWithSetAlpha
end

function UIRocker:_SetIsEnabled(isEnabled)
	UIRocker.super._SetIsEnabled(self, isEnabled)
	if not isEnabled then
		self:OnUIRockerPointerUp()
	end
end

function UIRocker:SetUIRockerAnchoredPosition(x, y)
	self._rockerRectTransform.anchoredPosition = Vector2(x, y)
end

function UIRocker:SetBollAnchoredPosition(x, y)
	self._bollRectTransform.anchoredPosition = Vector2(x, y)
end

function UIRocker:SetArrowLocalRotation(z)
	self._arrowRectTransform.localRotation = Quaternion.Euler(0, 0, z)
end

function UIRocker:SetArrowActive(isActive)
	self._Nego_Arrow:SetActive(isActive)
end

function UIRocker:Update(deltaTime, unscaledDeltaTime)
	if not self:IsCanUpdate() then
		return
	end
	if self._movePctX ~= 0 or self._movePctY ~= 0 then
		self._uiRockerInput:AxisMove(self._movePctX, self._movePctY)
	end
end

function UIRocker:OnUIRockerPointerDown(eventData)
	if not self:GetIsEnabled() then
		return
	end
	self._pointId = eventData.pointerId
	self._uiRockerDownPosInEventData = eventData.pressPosition
	self._uiRockerDownAnchoredPosition = CameraUtil.ScreenToUIPos(nil, nil, Vector3.New(eventData.pressPosition.x, eventData.pressPosition.y, 0), self._rockerRectTransform.pivot)
	local offset = self._rockerRectTransform.pivot - Vector2.New(0.5, 0.5)-- 还原到点击的位置为中心点
	local uiRockerDownAnchoredPosition = self._uiRockerDownAnchoredPosition + Vector2.New(offset.x * self._rockerRectTransform.sizeDelta.x, offset.y * self._rockerRectTransform.sizeDelta.y)-- 还原到点击的位置为中心点
	self:SetUIRockerAnchoredPosition(uiRockerDownAnchoredPosition.x, uiRockerDownAnchoredPosition.y)
	self._bollImage.color = Color.New(1, 1, 1, 1)

	if self._isNeedResponseWithSetAlpha then
		self._canvasGroup.alpha = 1
	end
end

function UIRocker:OnUIRockerPointerUp(eventData)
	self._isDragging = false
	if not self:GetIsEnabled() then
		return
	end
	if eventData and self._pointId ~= eventData.pointerId then
		return
	end
	self:SetUIRockerAnchoredPosition(self._rockerOriginAnchoredPosition.x, self._rockerOriginAnchoredPosition.y)
	self:SetBollAnchoredPosition(self._bollOriginAnchoredPosition.x, self._bollOriginAnchoredPosition.y)
	self:SetArrowActive(false)
	self:SetArrowLocalRotation(0)
	self._movePctX = 0
	self._movePctY = 0

	self._uiRockerInput:AxisMove(0, 0)
	self._bollImage.color = Color.New(1, 1, 1, 0.3)
	if self._isNeedResponseWithSetAlpha then
		self._canvasGroup.alpha = 0
	end
end

function UIRocker:OnRockerDrag(eventData)
	if not self:GetIsEnabled() then
		return
	end
	if self._pointId ~= eventData.pointerId then
		return
	end
	local dx = eventData.position.x - self._uiRockerDownPosInEventData.x
	local dy = eventData.position.y - self._uiRockerDownPosInEventData.y
	local distance = math.sqrt(dx * dx + dy * dy)

	local clampedDx = math.Clamp(dx, -self._uiRockerRadiusInEventData, self._uiRockerRadiusInEventData) -- 不能超过半径
	local clampedDy = math.Clamp(dy, -self._uiRockerRadiusInEventData, self._uiRockerRadiusInEventData) -- 不能超过半径
	local pctX = math.abs(dx) / distance -- 比例，用于还原到圆内的坐标
	local pctY = math.abs(dy) / distance -- 比例，用于还原到圆内的坐标

	self:SetBollAnchoredPosition(clampedDx * pctX, clampedDy * pctY)
	local dir = Vector3(dx, dy, 0)
	local angle = Vector3.Angle(dir, Vector3.up)
	if not (Vector3.Cross(dir, Vector3.forward).y > 0) then
		angle = -angle
	end
	self:SetArrowActive(true)
	self:SetArrowLocalRotation(angle)
	self._movePctX = distance == 0 and 0 or clampedDx * pctX / self._uiRockerRadiusInEventData
	self._movePctY = distance == 0 and 0 or clampedDy * pctY / self._uiRockerRadiusInEventData
	if self._movePctX == 0 and self._movePctY == 0 then
		self:SetArrowActive(false)
		self:SetBollAnchoredPosition(0, 0)
	end
	self._isDragging = true
end

function UIRocker:_Reset()
	UIRocker.super._Reset(self)
	if not self:GetGraphicComponent():GetGameObject() then
		return
	end
	self:OnUIRockerPointerUp()
end

function UIRocker:_Destroy()
	UIRocker.super._Destroy(self)
	if not self:GetGraphicComponent():GetGameObject() then
		return
	end
	self:OnUIRockerPointerUp()
end

return UIRocker