require("luacat.redDot.define.RedDotConst")
---@class RedDotManager:GameEntity
local RedDotManager = Class("RedDotManager", GameEntity)

function RedDotManager:Init()
	RedDotManager.super.Init(self)
	self.listenDict = {} --dict<tag, dict<"listener" = a_listener, "red_dot_info_dict" = dict<gameObject = red_dot_info>>>
	self.redDotInfoDict = {}  --dict<gameObject = red_dot_info>
end

function RedDotManager:PostInit()
	RedDotManager.super.PostInit(self)
	self:AddUpdateTimer(function()
		self:__CheckCleanRedDotInfoDict()
		return true
	end, nil, 0, 5)
end

function RedDotManager:__ListenEvent(tag, redDotInfo)
	if not tag then
		return
	end
	if not self.listenDict[tag] then
		self.listenDict[tag] = { listener = nil, redDotInfoDict = {} }
		self.listenDict[tag].listener = self:AddListener(tag, function()
			for gameObject, redDotInfo in pairs(self.listenDict[tag].redDotInfoDict) do
				self:__RefreshRedDot(redDotInfo)
			end
		end)
	end
	self.listenDict[tag].redDotInfoDict[redDotInfo.gameObject] = redDotInfo
end

function RedDotManager:__CheckCleanRedDotInfoDict()
	for gameObject, redDotInfo in pairs(self.redDotInfoDict) do
		if IsNil(gameObject) then
			local tag = redDotInfo.tag
			if tag then
				local listenInnerDict = self.listenDict[tag]
				listenInnerDict.redDotInfoDict[gameObject] = nil
				if next(listenInnerDict.redDotInfoDict) == nil then
					self:RemoveListener(listenInnerDict.listener)
					self.listenDict[tag] = nil
				end
			end
			self.redDotInfoDict[gameObject] = nil
		end
	end
end

function RedDotManager:__RefreshRedDot(redDotInfo)
	local gameObject = redDotInfo.gameObject
	if IsNil(gameObject) then
		return
	end
	local checkFunc = redDotInfo.check_func
	local checkFuncParams = redDotInfo.check_func_params or {}
	local isActive = checkFunc(table.SafeUnpack(checkFuncParams)) and true or false
	local imageParams = redDotInfo.imageParams
	self:__AddRedDotImage(gameObject, isActive, imageParams)
end

---@param itemGameObject CS.UnityEngine.GameObject
---@return CS.UnityEngine.UI.Image
function RedDotManager:__AddRedDotImage(itemGameObject, isActive, imageParams)

	local redDotTransform = itemGameObject.transform:Find(RedDotConst.Red_Dot_Name)
	if redDotTransform then
		redDotTransform.gameObject:SetActive(isActive)
		return redDotTransform:GetComponent(typeof(CS.UnityEngine.UI.Image))
	else
		-- 设置位置
		local xOffset = imageParams.xOffset or 0
		local yOffset = imageParams.yOffset or 0
		---@type CS.UnityEngine.UI.Image
		local redDotImage = itemGameObject:NewChildWithImage(RedDotConst.Red_Dot_Name)
		redDotImage.raycastTarget = false
		---@type CS.UnityEngine.RectTransform
		local redDotRectTransform = redDotImage:GetComponent(typeof(CS.UnityEngine.RectTransform))
		--设置red_dot_rectTransform的(0,0)为基于父节点的右上角
		redDotRectTransform.anchorMax = Vector2(1, 1)
		redDotRectTransform.anchorMin = Vector2(1, 1)
		redDotRectTransform.pivot = Vector2(1, 1)
		local isSetNativeSize = not imageParams.width or not imageParams.height
		redDotRectTransform.gameObject:SetActive(false)
		CS.CsCat.AutoAssetSetImageSprite.Set(redDotImage, RedDotConst.Red_Dot_Image_AssetPath, isSetNativeSize, isSetNativeSize and Vector2(0, 0) or Vector2(imageParams.width, imageParams.height), function(image, sprite)
			if IsNil(redDotRectTransform.gameObject) then
				return
			end
			redDotRectTransform.gameObject:SetActive(isActive)
			local sizeDelta = redDotRectTransform.sizeDelta
			redDotRectTransform.anchoredPosition = Vector2(xOffset, yOffset)
			--red_dot_rectTransform.anchoredPosition = Vector2(sizeDelta.x/2+x_offset,sizeDelta.y/2+y_offset)
		end)
		return redDotImage
	end
end

function RedDotManager:__CleanListenEventByTag(tag)
	local listenInnerDict = self.listenDict[tag]
	if listenInnerDict then
		for gameObject, red_dot_info in pairs(listenInnerDict.redDotInfoDict) do
			if not IsNil(gameObject) then
				self.redDotInfoDict[gameObject] = nil

				local redDotTransform = gameObject.transform:Find(RedDotConst.Red_Dot_Name)
				if not IsNil(redDotTransform) then
					redDotTransform.gameObject:SetActive(false)
				end
			end
		end
		self:RemoveListener(listenInnerDict.listener)
	end
	self.listenDict[tag] = nil
end

---@param gameObject CS.UnityEngine.GameObject
function RedDotManager:__CleanListenEventByGameObject(gameObject)
	local redDotInfo = self.redDotInfoDict[gameObject]
	if redDotInfo then
		local tag = redDotInfo.tag
		local listenInnerDict = self.listenDict[tag]
		listenInnerDict.redDotInfoDict[gameObject] = nil
		if next(listenInnerDict.redDotInfoDict) == nil then
			self.listenDict[tag] = nil
			self:RemoveListener(listenInnerDict.listener)
		end
	end
	self.redDotInfoDict[gameObject] = nil

	if not IsNil(gameObject) then
		local redDotTransform = gameObject.transform:Find(RedDotConst.Red_Dot_Name)
		if not IsNil(redDotTransform) then
			redDotTransform.gameObject:SetActive(false)
		end
	end
end

--------------------------------------Util-------------------------------
function RedDotManager:AddRedDot(gameObject, tag, imageParams, ...)
	if self.redDotInfoDict[gameObject] then
		return
	end
	local info = global.client.redDotLogic:GetRedDotInfoByTag(tag)
	local redDotInfo = {
		gameObject = gameObject,
		tag = tag,
		checkFunc = info.check_func,
		imageParams = imageParams or {},
		checkFuncParams = table.SafePack(...)
	}
	self:__ListenEvent(tag, redDotInfo)
	self.redDotInfoDict[gameObject] = redDotInfo
end

function RedDotManager:CleanListenEvent(tagOrGameObject)
	if IsString(tagOrGameObject) then
		self:__CleanListenEventByTag(tagOrGameObject)
	else
		self:__CleanListenEventByGameObject(tagOrGameObject)
	end
end

return RedDotManager