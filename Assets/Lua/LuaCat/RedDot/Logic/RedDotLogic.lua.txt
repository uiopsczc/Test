require("LuaCat.RedDot.Define.RedDotConst")
---@class RedDotLogic:GameEntity
local RedDotLogic = Class("RedDotLogic", GameEntity)

function RedDotLogic:Init()
	RedDotLogic.super.Init(self)
	self._redDotInfoDict = {} -- dict<tag = redDotInfo>
	for _, redDotInfo in ipairs(RedDotConst.Red_Dot_Info_List) do
		self:AddRedDotInfo(redDotInfo.tag, redDotInfo.checkFunc, redDotInfo.listenNameList, redDotInfo.childTagList, redDotInfo.childTagAllParamsFuncDict)
	end

	self._listenTriggerNameDict = {} --dict<listenName = dict<triggerName(selfOrParentTag) = true>>
	self._tagTriggerNameDict = {}  --  dict<tag = dict<triggerName(selfOrParentTag) = true>>
	self._listenerDict = {} -- dict<listenName = listener> listener触发listenTriggerNameDict中对应的triggerName
	self:_ListenAllEvent()
end

function RedDotLogic:AddRedDotInfo(tag, checkFunc, listenNameList, childTagList, childTagAllParamsFuncDict)
	if self._redDotInfoDict[tag] then
		error(string.format("重复的tag %s", tag))
	end
	if childTagList then
		self._redDotInfoDict[tag] = self:_CreateRedDotInfoContainsChildTagList(tag, checkFunc, listenNameList, childTagList, childTagAllParamsFuncDict)
	else
		self._redDotInfoDict[tag] = { tag = tag, checkFunc = checkFunc, listenNameList = listenNameList, childTagList = childTagList }
	end
end

function RedDotLogic:_CreateRedDotInfoContainsChildTagList(tag, checkFunc, listenNameList, childTagList, childTagAllParamsFuncDict)
	local warpCheckFunc = function(...)
		for _, childTag in ipairs(childTagList) do
			local childRedDotInfo = self._redDotInfoDict[childTag]
			if childTagAllParamsFuncDict and childTagAllParamsFuncDict[childTag] then
				local childTagAllParams = childTagAllParamsFuncDict[childTag]()
				for _, childTagParams in ipairs(childTagAllParams) do
					if childRedDotInfo.checkFunc(table.SafeUnpack(childTagParams)) then
						-- 一般是这里调用
						return true
					end
				end
			else
				if childRedDotInfo.checkFunc() then
					-- 一般是这里调用
					return true
				end
			end
		end
		if checkFunc then
			return checkFunc(...)
		end
	end
	return {
		tag = tag,
		checkFunc = warpCheckFunc,
		listenNameList = listenNameList,
		childTagList = childTagList
	}
end

function RedDotLogic:_ListenAllEvent()
	for tag, redDotInfo in pairs(self._redDotInfoDict) do
		local listenNameList = redDotInfo.listenNameList or {}
		-- child_tag触发的时候连带触发其父tag,构建child_tag对应的父tag引用
		self:_RecordAllTrigger(nil, tag, redDotInfo) -- 因为可能没有child_red_dot_info.listen_name_list
		for _, listenName in ipairs(listenNameList) do
			self:_RecordAllTrigger(listenName, tag, redDotInfo)
			if not self._listenerDict[listenName] then
				self._listenerDict[listenName] = self:AddListener(listenName, function()
					-- 这里再转触发给red_dot_mgr
					local dict = self._listenTriggerNameDict[listenName]
					for triggerName, _ in pairs(dict) do
						self:Broadcast(triggerName)
					end
				end)
			end
		end
	end
end

function RedDotLogic:_RecordAllTrigger(listenName, triggerName, redDotInfo)
	local tag = redDotInfo.tag
	self:_RecordTagTrigger(tag, triggerName)
	self:_RecordListenTrigger(listenName, triggerName)
	if redDotInfo.childTagList then
		for _, childTag in ipairs(redDotInfo.childTagList) do
			local childRedDotInfo = self._redDotInfoDict[childTag]
			-- child_tag触发的时候连带触发其父tag,构建child_tag对应的父tag引用
			self:_RecordAllTrigger(nil, triggerName, childRedDotInfo) -- 因为可能没有childRedDotInfo.listenNameList
			for _, listenName in ipairs(childRedDotInfo.listenNameList) do
				self:_RecordAllTrigger(listenName, triggerName, childRedDotInfo)
			end
		end
	end
end

function RedDotLogic:_RecordListenTrigger(listenName, triggerName)
	if not listenName then
		return
	end
	self._listenTriggerNameDict[listenName] = self._listenTriggerNameDict[listenName] or {}
	self._listenTriggerNameDict[listenName][triggerName] = true
end

function RedDotLogic:_RecordTagTrigger(tag, triggerName)
	if not tag then
		return
	end
	self._tagTriggerNameDict[tag] = self._tagTriggerNameDict[tag] or {}
	self._tagTriggerNameDict[tag][triggerName] = true
end

----------------------------------------------------------------------
-- Util相关
----------------------------------------------------------------------
function RedDotLogic:GetRedDotInfoByTag(tag)
	local redDotInfo = self._redDotInfoDict[tag]
	if not redDotInfo then
		error(string.format("不存在的tag  %s", tag))
	end
	return redDotInfo
end

function RedDotLogic:TriggerTag(tag)
	local dict = self._tagTriggerNameDict[tag]
	if not dict then
		error("不存在的TagBtnOnClick tag %s", tag)
	end
	for triggerName, _ in pairs(dict) do
		self:Broadcast(triggerName)
	end
end

return RedDotLogic