-- 与Unity的Random保持一致
---@class RandomManager
local RandomManager = Class("RandomManager")
function RandomManager:Init(seed)
  self.random_seed = seed or nil
  if self.random_seed then
    self.seed = math.floor(self.random_seed) % 0x10000000
  else
    self.seed = math.random(0, 0x10000000 - 1)
    self.random_seed = self.seed
  end
end

local function __Randomize(self)
  self.seed = (22695477 * self.seed + 1) % 0x10000000
end

function RandomManager:GetSeedOriginal()
  return self.random_seed
end

function RandomManager:GetSeedCurrent()
  return self.seed
end

function RandomManager:_Random()
  __Randomize(self)
  return self.seed / 0x10000000
end

function RandomManager:RandomBoolean()
  if self:RandomFloat() < 0.5 then
    return true
  else
    return false
  end
end

-- 包括m和不包括n
function RandomManager:RandomInt(m, n)
  __Randomize(self)
  if n then
    return math.floor(m + self.seed / 0x10000000 * (n - m))
  else
    return math.floor(0 + self.seed / 0x10000000 * (m - 0))
  end
end

-- 包括m,包括n
function RandomManager:RandomFloat(m, n)
  __Randomize(self)
  local r = self.seed / (0x10000000 - 1)
  if r > 0.99999 then
    r = 1
  end
  if m and n then
    return m + r * (n - m)
  elseif m and not n then
    return 0 + r * (m - 0)
  else
    return r
  end
end

function RandomManager:RandomSelect(array, count, is_unique)
  is_unique = is_unique or false
  count = count or 1
  local info_array = {
    --{index = xx,weight =yy}....
  }

  for i, v in ipairs(array) do
    local index = i
    local weight
    if IsTable(v) and v.weight then
      weight = v.weight
    else
      weight = 1 -- 默认是1
    end
    table.insert(info_array, { index = index, weight = weight })
  end

  -- is_unique为true的时候,count为最多为array的长度
  if is_unique and count > #array then
    count = #array
  end

  local total_weight_org = 0
  for _, info in ipairs(info_array) do
    total_weight_org = total_weight_org + info.weight
  end

  local result = {}
  local total_weight = total_weight_org
  local total_weight_remove = 0
  for i = 1, count do
    total_weight = total_weight_org - total_weight_remove
    for j = #info_array, 1, -1 do
      local info = info_array[j]
      local weight = info.weight
      local index = info.index
      local data = array[index]
      if self:RandomFloat() <= weight / total_weight then
        table.insert(result, data)
        if is_unique then
          table.remove(info_array, j)
          total_weight_remove = total_weight_remove + weight
        end
        break
      end
      total_weight = total_weight - weight
    end
  end

  return result
end

function RandomManager:Destroy()
  self.seed = nil
end

return RandomManager