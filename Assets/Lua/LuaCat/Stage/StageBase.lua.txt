---@class StageBase:TickObject
---@field scenePath string
local StageBase = Class("StageBase", TickObject)

function StageBase:Init()
	StageBase.super.Init(self)
	self.loadSceneMode = CS.UnityEngine.SceneManagement.LoadSceneMode.Additive
	self.isShowFade = false
	self.isShowLoading = true
	---@type UIPanel[]
	self.panelList = {}
	self.loadingScene = {}
	self.onShowCallback = {}
end

function StageBase:LoadPanels()
end

function StageBase:Start()
	StageBase.super.Start(self)
	self:StartCoroutine(nil, function()
		self:StartLoading()
	end)
	--Coroutine.YieldStart(function() self:StartLoading() end)
end

function StageBase:StartLoading()
	local lastPct = 0
	self:SetLoadingPct(lastPct)

	self:LoadPanels()
	self:WaitUntilAllPanelsLoadDone()
	lastPct = 0.1
	self:SetLoadingPct(lastPct)

	if self.scenePath then
		---@type CS.UnityEngine.AsyncOperation
		self.asyncOperation = CS.UnityEngine.SceneManagement.SceneManager.LoadSceneAsync(self.scenePath, self.loadSceneMode)
		self:WaitUntilScenePathLoadDone()
	end
	lastPct = 0.2
	self:SetLoadingPct(lastPct)

	self:WaitUntilPreLoadAssetsLoadDone(function(pct)
		self:SetLoadingPct(lastPct + math.Lerp(pct, 0, 0.9 - lastPct))
	end)

	self:WaitUntilAllAssetsLoadDone()
	self:SetLoadingPct(1)

	self:WaitForSeconds(0.05)
	self:YieldStart(function()
		self:IEPreShow()
		self:YieldBreak()
	end)
	self:HideLoading()

	self:Broadcast(StageEventNameConst.On_Stage_Loaded, self)
	self:Show()
end

function StageBase:IEPreShow()
end

function StageBase:Show()
	DelegateUtil.InvokeCallback(self.onShowCallback)
end

-------------------------Fade-------------------------
function StageBase:HideFade()
	if global.client.uiManager.uiFadePanel.graphicComponent.gameObject.activeInHierarchy then
		global.client.uiManager:FadeTo(nil, 0, FadeConst.Stage_Fade_Default_Hide_Duration, function()
			global.client.uiManager:HideFade()
		end)
	end
end
-------------------------Loading-------------------------
function StageBase:SetLoadingPct(pct)
	if self.isShowLoading then
		global.client.uiManager:SetLoadingPct(pct)
	end
end

function StageBase:HideLoading()
	if self.isShowLoading then
		global.client.uiManager:HideLoading()
	end
end

function StageBase:WaitUntilPreLoadAssetsLoadDone(callback)
	local assetAsyncloaderProcessingList = global.client.csClient.assetBundleManager.assetBundleAsyncLoaderProcessingListessingList
	local assetBundleAsyncLoaderProcessingList = global.client.csClient.assetBundleManager.assetBundleAsyncLoaderProcessingList
	local totalLoadingCount = assetAsyncloaderProcessingList.Count + assetBundleAsyncLoaderProcessingList.Count
	local curPct = 0
	local nextPct = 0
	while assetAsyncloaderProcessingList.Count > 0 or assetBundleAsyncLoaderProcessingList.Count > 0 do
		curPct = (assetAsyncloaderProcessingList.Count + assetBundleAsyncLoaderProcessingList.Count) / totalLoadingCount
		if curPct > nextPct then
			nextPct = curPct
		end
		callback(curPct)
		self:WaitForFrames(1)
	end
	callback(1)
end

function StageBase:WaitUntilScenePathLoadDone()
	self:WaitUntil(function()
		return self.asyncOperation.isDone
	end)
end

function StageBase:WaitUntilAllAssetsLoadDone()
	self:WaitUntil(function()
		return self.isAllAssetsLoadDone
	end)
end

function StageBase:WaitUntilAllPanelsLoadDone()
	self:WaitUntil(function()
		for _, panel in ipairs(self.panelList) do
			if not panel.isAllAssetsLoadDone then
				return false
			end
		end
		return true
	end)
end

function StageBase:IEPreDestroy()
	global.client.uiManager:Reset()
	global.poolCatManager:Trim()
	if self.scenePath then
		local asyncOperation = CS.UnityEngine.SceneManagement.SceneManager.UnloadSceneAsync(self:GetSceneName())
		global.client:WaitUntil(function()
			return asyncOperation.isDone
		end)
	end
end

function StageBase:GetSceneName()
	return string.FileName(string.WithoutSuffix(self.scenePath))
end

return StageBase