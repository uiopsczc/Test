---@class StageBase:TickObject
---@field _scenePath string
local StageBase = Class("StageBase", TickObject)

function StageBase:Init()
	StageBase.super.Init(self)
	self._loadSceneMode = CS.UnityEngine.SceneManagement.LoadSceneMode.Additive
	self._isShowFade = false
	self._isShowLoading = true
	---@type UIPanel[]
	self._panelList = {}
	self._loadingScene = {}
	self._onShowCallback = {}
end

function StageBase:LoadPanels()
end

function StageBase:Start()
	StageBase.super.Start(self)
	self:StartCoroutine(nil, function()
		self:StartLoading()
	end)
	--Coroutine.YieldStart(function() self:StartLoading() end)
end

function StageBase:StartLoading()
	local lastPct = 0
	self:SetLoadingPct(lastPct)

	self:LoadPanels()
	self:WaitUntilAllPanelsLoadDone()
	lastPct = 0.1
	self:SetLoadingPct(lastPct)

	if self._scenePath then
		---@type CS.UnityEngine.AsyncOperation
		self._asyncOperation = CS.UnityEngine.SceneManagement.SceneManager.LoadSceneAsync(self._scenePath, self._loadSceneMode)
		self:WaitUntilScenePathLoadDone()
	end
	lastPct = 0.2
	self:SetLoadingPct(lastPct)

	self:WaitUntilPreLoadAssetsLoadDone(function(pct)
		self:SetLoadingPct(lastPct + math.Lerp(pct, 0, 0.9 - lastPct))
	end)

	self:WaitUntilAllAssetsLoadDone()
	self:SetLoadingPct(1)

	self:WaitForSeconds(0.05)
	self:YieldStart(function()
		self:IEPreShow()
		self:YieldBreak()
	end)
	self:HideLoading()

	self:Broadcast(StageEventNameConst.On_Stage_Loaded, self)
	self:Show()
end

function StageBase:IEPreShow()
end

function StageBase:Show()
	DelegateUtil.InvokeCallback(self._onShowCallback)
end

----------------------------------------------------------------------
-- Fade
----------------------------------------------------------------------
function StageBase:HideFade()
	if global.client.uiManager:GetUIFadePanel():GetGraphicComponent():GetGameObject().activeInHierarchy then
		global.client.uiManager:FadeTo(nil, 0, FadeConst.Stage_Fade_Default_Hide_Duration, function()
			global.client.uiManager:HideFade()
		end)
	end
end

----------------------------------------------------------------------
-- Loading
----------------------------------------------------------------------
function StageBase:SetLoadingPct(pct)
	if self._isShowLoading then
		global.client.uiManager:SetLoadingPct(pct)
	end
end

function StageBase:HideLoading()
	if self._isShowLoading then
		global.client.uiManager:HideLoading()
	end
end

function StageBase:WaitUntilPreLoadAssetsLoadDone(callback)
	local assetAsyncLoaderProcessingList = global.client.csClient.assetBundleManager.assetBundleAsyncLoaderProcessingList
	local assetBundleAsyncLoaderProcessingList = global.client.csClient.assetBundleManager.assetBundleAsyncLoaderProcessingList
	local totalLoadingCount = assetAsyncLoaderProcessingList.Count + assetBundleAsyncLoaderProcessingList.Count
	local curPct = 0
	local nextPct = 0
	while assetAsyncLoaderProcessingList.Count > 0 or assetBundleAsyncLoaderProcessingList.Count > 0 do
		curPct = (assetAsyncLoaderProcessingList.Count + assetBundleAsyncLoaderProcessingList.Count) / totalLoadingCount
		if curPct > nextPct then
			nextPct = curPct
		end
		callback(curPct)
		self:WaitForFrames(1)
	end
	callback(1)
end

function StageBase:WaitUntilScenePathLoadDone()
	self:WaitUntil(function()
		return self._asyncOperation.isDone
	end)
end

function StageBase:WaitUntilAllAssetsLoadDone()
	self:WaitUntil(function()
		return self._isAllAssetsLoadDone
	end)
end

function StageBase:WaitUntilAllPanelsLoadDone()
	self:WaitUntil(function()
		for _, panel in ipairs(self._panelList) do
			if not panel._isAllAssetsLoadDone then
				return false
			end
		end
		return true
	end)
end

----------------------------------------------------------------------
-- SetGet相关
----------------------------------------------------------------------
function StageBase:GetSceneName()
	return string.FileName(string.WithoutSuffix(self._scenePath))
end

function StageBase:SetScenePath(scenePath)
	self._scenePath = scenePath
end

function StageBase:GetScenePath()
	return self._scenePath
end

function StageBase:SetIsShowFade(isShowFade)
	self._isShowFade = isShowFade
end

function StageBase:SetIsShowLoading(isShowLoading)
	self._isShowLoading = isShowLoading
end

function StageBase:SetStageName(stageName)
	self._stageName = stageName
end

function StageBase:GetPanelList()
	return self._panelList
end


function StageBase:IEPreDestroy()
	global.client.uiManager:Reset()
	global.poolCatManager:Trim()
	if self._scenePath then
		local asyncOperation = CS.UnityEngine.SceneManagement.SceneManager.UnloadSceneAsync(self:GetSceneName())
		global.client:WaitUntil(function()
			return asyncOperation.isDone
		end)
	end
end




return StageBase