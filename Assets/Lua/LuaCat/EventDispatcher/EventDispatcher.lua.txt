local EventListener = require("LuaCat.EventDispatcher.EventListener")
---@class EventDispatcher
local EventDispatcher = Class("EventDispatcher")
EventDispatcher.Max_Count = 10

function EventDispatcher:Init()
	---@type table<any,table<EventListener,boolean>>
	self._eventListenerDict = {}
end

---@return EventListener
function EventDispatcher:AddListener(eventName, handler)
	assert(eventName)
	local groupListenerDict = table.GetOrAddDefault_Dict(self._eventListenerDict, eventName, function()
		return {}
	end)
	---@type EventListener
	local listener = EventListener.New(eventName, handler)
	groupListenerDict[listener] = true
	-- 数量检错
	if #groupListenerDict > EventDispatcher.Max_Count then
		ErrorFormat("EventMgr count > %s", EventMgr.max_count)
	end
	return listener
end

---@return EventListener
-- ... 包含3种情况
-- 情况1 只有一个listener
-- 情况2 只有一个handler
-- 情况3 有一个eventName和一个handler
function EventDispatcher:RemoveListener(...)
	local args = table.SafePack(...)
	if args.n == 2 then
		return self:_RemoveListener2(args[1], args[2])
	elseif IsInstanceOf(args[1], EventListener._className) then
		return self:_RemoveListener1(args[1])
	elseif args.n == 1 then
		return self:_RemoveListener3(args[1])
	end
end

function EventDispatcher:RemoveAllListeners()
	self._eventListenerDict = {}
end

---@param listener EventListener
---@return EventListener
function EventDispatcher:_RemoveListener1(listener)
	local eventName = listener:GetEventName()
	local groupListenerDict = self._eventListenerDict[eventName]
	if not groupListenerDict then
		return
	end
	groupListenerDict[listener] = false
	return listener
end

---@return EventListener
function EventDispatcher:_RemoveListener2(eventName, handler)
	local groupListenerDict = self._eventListenerDict[eventName]
	if not groupListenerDict then
		return
	end
	for listener, isActive in pairs(groupListenerDict) do
		if isActive and listener:GetHandler() == handler then
			return self:_RemoveListener1(listener)
		end
	end
end

---@return EventListener
function EventDispatcher:_RemoveListener3(handler)
	for eventName, groupListenerDict in pairs(self._eventListenerDict) do
		for listener, isActive in pairs(groupListenerDict) do
			if isActive and listener:GetHandler() == handler then
				return self:_RemoveListener1(listener)
			end
		end
	end
end

function EventDispatcher:Broadcast(eventName, ...)
	assert(eventName)
	local groupListenerDict = self._eventListenerDict[eventName]
	if not groupListenerDict then
		return
	end
	for listener, isActive in pairs(groupListenerDict) do
		if isActive == true then
			local handler = listener:GetHandler()
			handler(...)
		else
			groupListenerDict[listener] = nil
		end
	end
	if not next(groupListenerDict) then
		self._eventListenerDict[eventName] = nil
	end
end

function EventDispatcher:Destroy()
	self:RemoveAllListeners()
end

return EventDispatcher


