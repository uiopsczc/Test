local EventListener = require("luacat.eventDispatcher.EventListener")
---@class EventDispatcherPlugin
local EventDispatcherPlugin = Class("EventDispatcherPlugin")

function EventDispatcherPlugin:Init(eventDispatcher)
	---@type EventDispatcher
	self.eventDispatcher = eventDispatcher
	self.eventListenerDict = {}
end

---@return EventListener
function EventDispatcherPlugin:AddListener(eventName, handler)
	assert(eventName)
	local groupListenerDict = table.GetOrAddDefault_Dict(self.eventListenerDict, eventName, function()
		return {}
	end)
	local listener = self.eventDispatcher:AddListener(eventName, handler)
	groupListenerDict[listener] = true
	return listener
end

---@return EventListener
-- ... 包含3种情况
-- 情况1 只有一个listener
-- 情况2 只有一个handler
-- 情况3 有一个eventName和一个handler
function EventDispatcherPlugin:RemoveListener(...)
	local args = table.SafePack(...)
	if args.n == 2 then
		return self:__RemoveListener2(args[1], args[2])
	elseif IsInstanceOf(args[1], EventListener._className) then
		return self:__RemoveListener1(args[1])
	elseif args.n == 1 then
		return self:__RemoveListener3(args[1])
	end
end

function EventDispatcherPlugin:RemoveAllListeners()
	for eventName, groupListenerDict in pairs(self.eventListenerDict) do
		for listener, isActive in pairs(groupListenerDict) do
			if isActive then
				self.eventDispatcher:RemoveListener(listener)
			end
		end
	end
	self.eventListenerDict = {}
end

---@param listener EventListener
---@return EventListener
function EventDispatcherPlugin:__RemoveListener1(listener)
	local eventName = listener.eventName
	local groupListenerDict = self.eventListenerDict[eventName]
	if not groupListenerDict or not groupListenerDict[listener] then
		return
	end
	if self.eventDispatcher:RemoveListener(listener) then
		groupListenerDict[listener] = nil
		return listener
	end
end

---@return EventListener
function EventDispatcherPlugin:__RemoveListener2(eventName, handler)
	local groupListenerDict = self.eventListenerDict[eventName]
	if not groupListenerDict then
		return
	end
	for listener, isActive in pairs(groupListenerDict) do
		if isActive and listener.handler == handler then
			return self:__RemoveListener1(listener)
		end
	end
end

---@return EventListener
function EventDispatcherPlugin:__RemoveListener3(handler)
	for eventName, groupListenerDict in pairs(self.eventListenerDict) do
		for listener, isActive in pairs(groupListenerDict) do
			if isActive and listener.handler == handler then
				return self:__RemoveListener1(listener)
			end
		end
	end
end

function EventDispatcherPlugin:Broadcast(eventName, ...)
	self.eventDispatcher:Broadcast(eventName, ...)
end

function EventDispatcherPlugin:Destroy()
	self:RemoveAllListeners()
end

return EventDispatcherPlugin