local EventListener = require("luacat.eventDispatcher.EventListener")
---@class EventDispatcherPlugin
local EventDispatcherPlugin = Class("EventDispatcherPlugin")

function EventDispatcherPlugin:Init(eventDispatcher)
  ---@type EventDispatcher
  self.eventDispatcher = eventDispatcher
  self.event_listener_dict = {}
end

---@return EventListener
function EventDispatcherPlugin:AddListener(eventName, handler)
  assert(eventName)
  local group_listener_dict = table.GetOrAddDefault_Dict(self.event_listener_dict, eventName, function()
    return {}
  end)
  local listener = self.eventDispatcher:AddListener(eventName, handler)
  group_listener_dict[listener] = true
  return listener
end

---@return EventListener
-- ... 包含3种情况
-- 情况1 只有一个listener
-- 情况2 只有一个handler
-- 情况3 有一个eventName和一个handler
function EventDispatcherPlugin:RemoveListener(...)
  local args = table.SafePack(...)
  if args.n == 2 then
    return self:__RemoveListener2(args[1], args[2])
  elseif IsInstanceOf(args[1], EventListener.__class_name) then
    return  self:__RemoveListener1(args[1])
  elseif args.n == 1 then
    return self:__RemoveListener3(args[1])
  end
end

function EventDispatcherPlugin:RemoveAllListeners()
  for eventName, group_listener_dict in pairs(self.event_listener_dict) do
    for listener, is_active in pairs(group_listener_dict) do
      if is_active then
        self.eventDispatcher:RemoveListener(listener)
      end
    end
  end
  self.event_listener_dict = {}
end

---@param listener EventListener
---@return EventListener
function EventDispatcherPlugin:__RemoveListener1(listener)
  local eventName = listener.eventName
  local group_listener_dict = self.event_listener_dict[eventName]
  if not group_listener_dict or not group_listener_dict[listener] then
    return
  end
  if self.eventDispatcher:RemoveListener(listener) then
    group_listener_dict[listener] = nil
    return listener
  end
end

---@return EventListener
function EventDispatcherPlugin:__RemoveListener2(eventName, handler)
  local group_listener_dict = self.event_listener_dict[eventName]
  if not group_listener_dict then
    return
  end
  for listener, is_active in pairs(group_listener_dict) do
    if is_active and listener.handler == handler then
      return self:__RemoveListener1(listener)
    end
  end
end

---@return EventListener
function EventDispatcherPlugin:__RemoveListener3(handler)
  for eventName, group_listener_dict in pairs(self.event_listener_dict) do
    for listener, is_active in pairs(group_listener_dict) do
      if is_active and listener.handler == handler then
        return self:__RemoveListener1(listener)
      end
    end
  end
end

function EventDispatcherPlugin:Broadcast(eventName, ...)
  self.eventDispatcher:Broadcast(eventName,...)
end

function EventDispatcherPlugin:Destroy()
  self:RemoveAllListeners()
end

return EventDispatcherPlugin