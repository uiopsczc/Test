local TestData = require("LuaCat.GameData.Data.TestData")
---@class GameData
local GameData = Class("GameData")

function GameData:Init(filePath)
	self._filePath = filePath
	-- 刚开始的默认数值
	local orgData = {
		testData = {
			test = 4,
		},
		userId = "user1",
		dictUser = {},
		dictTmpUser = {},
	}
	if CS.System.IO.File.Exists(filePath) then
		local content = StdioUtil.ReadFile(filePath)
		self._data = json:decode(content)
	else
		self._data = orgData
	end
	table.ApplyDiff(self._data, table.GetNotExist(self._data, orgData)) --将orgData中有，但self._data中没有的,应用到self._data中
end

function GameData:Save()
	self:SaveUser()
	local content = json:encode(self._data)
	StdioUtil.WriteFile(self._filePath, content)
end

function GameData:SaveUser()
	local dictUser = {}
	local dictTmpUser = {}
	local user = global.client.user
	user:DoSave(dictUser, dictTmpUser)
	self._data.dictUser = dictUser
	self._data.dictTmpUser = dictTmpUser
	self._data.userId = user:GetId()
end

function GameData:RestoreUser()
	local userId = self._data.userId
	local dictUser = self._data.dictUser
	local dictTmpUser = self._data.dictTmpUser
	---@type User
	local user = global.client.userFactory:NewDoer(userId)
	user:DoRestore(dictUser, dictTmpUser)
	if not user._mainRole then
		user._mainRole = user:AddRole("1")
	end
	---@type User
	global.client.user = user
	---@type Role
	global.client.mainRole = user._mainRole
end

return GameData