---@class DirectionConst
local DirectionConst = {}

---@type table<string,DirectionInfo>
DirectionConst.Direction_Dict = {
	leftBottom = DirectionInfo.New(-1, -1, "left_bottom"),
	bottom = DirectionInfo.New(0, -1, "bottom"),
	rightBottom = DirectionInfo.New(1, -1, "right_bottom"),

	left = DirectionInfo.New(-1, 0, "left"),
	center = DirectionInfo.New(0, 0, "center"),
	right = DirectionInfo.New(1, 0, "right"),

	leftTop = DirectionInfo.New(-1, 1, "left_top"),
	top = DirectionInfo.New(0, 1, "top"),
	rightTop = DirectionInfo.New(1, 1, "right_top"),
}

DirectionConst.Direction_Dict2_Func = function()
	---@type table<number,table<number,DirectionInfo>>
	local result = {}
	for _, directionInfo in pairs(DirectionConst.Direction_Dict) do
		local subDict = table.GetOrAddDefault_Dict(result, directionInfo._x, function()
			return {}
		end)
		subDict[directionInfo._y] = directionInfo
	end
	return result
end

---@type table<number,table<number,DirectionInfo>>
DirectionConst.Direction_Dict2 = DirectionConst.Direction_Dict2_Func()

---@param xOrName number|string
---@param y number
---@return DirectionInfo
function DirectionConst.GetDirectionInfo(xOrName, y)
	if IsString(xOrName) then
		return DirectionConst.Direction_Dict[string.lower(xOrName)]
	else
		local x = xOrName
		if not DirectionConst.Direction_Dict2[x] then
			return nil
		end
		return DirectionConst.Direction_Dict2[x][y]
	end
end

return DirectionConst

