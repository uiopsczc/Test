---@class DoerAttrSetter:Class
local DoerAttrSetter = Class("DoerAttrParser")

---@param desc string
---@param doerAttrParser DoerAttrParser
function DoerAttrSetter:Init(desc, doerAttrParser)
	self:SetDesc(desc)
	if doerAttrParser then
		self:SetU(doerAttrParser:GetU())
		self:SetO(doerAttrParser:GetO())
		self:SetE(doerAttrParser:GetE())
		self:SetM(doerAttrParser:GetM())
		self:SetDoerAttrParser(doerAttrParser)
	end
end

function DoerAttrSetter:SetU(u)
	---@type Doer
	self.u = u--主动对象，比如任务中接受任务的玩家
end

function DoerAttrSetter:GetU()
	return self.u
end

function DoerAttrSetter:SetO(o)
	---@type Doer
	self.o = o -- 被动对象，比如任务中的任务
end

function DoerAttrSetter:GetO()
	return self.o
end

function DoerAttrSetter:SetE(e)
	---@type Doer
	self.e = e --中间对象，比如任务中给与任务的npc
end

function DoerAttrSetter:GetE()
	return self.e
end

function DoerAttrSetter:SetM(m)
	---@type table<string,any>
	self.m = m -- 相互传数据的hashttable
end

function DoerAttrSetter:GetM()
	return self.m
end

function DoerAttrSetter:SetDoerAttrParser(doerAttrParser)
	---@type DoerAttrParser
	self.doerAttrParser = doerAttrParser
end

function DoerAttrSetter:GetDoerAttrParser()
	return self.doerAttrParser
end

function DoerAttrSetter:SetDesc(desc)
	---@type string
	self.desc = desc
end

function DoerAttrSetter:GetDesc()
	return self.desc
end

function DoerAttrSetter:Set(key, valueExpression, isAdd)
	if self.doerAttrParser and string.IndexOf(key, "{") ~= -1 then
		key = self.doerAttrParser:ParseString(key)
	end
	local objectValue = self.doerAttrParser:Parse(valueExpression)
	self:SetObject(key, objectValue, isAdd)
end

function DoerAttrSetter:SetObject(key, objectValue, isAdd)
	if string.StartsWith(key, "u.") then
		-- 主动对象属性
		key = string.sub(key, string.len("u.") + 1)
		if self.u then
			self:SetObjectValue(self.u, key, objectValue, isAdd)
		end
		return
	end
	if string.StartsWith(key, "ut.") then
		-- 主动对象临时属性
		key = string.sub(key, string.len("ut.") + 1)
		if self.u then
			self:SetObjectTmpValue(self.u, key, objectValue, isAdd)
		end
		return
	end

	if string.StartsWith(key, "o.") then
		-- 被动对象属性
		key = string.sub(key, string.len("o.") + 1)
		if self.o then
			self:SetObjectValue(self.o, key, objectValue, isAdd)
		end
		return
	end
	if string.StartsWith(key, "ot.") then
		-- 被动对象临时属性
		key = string.sub(key, string.len("ot.") + 1)
		if self.o then
			self:SetObjectTmpValue(self.o, key, objectValue, isAdd)
		end
		return
	end

	if string.StartsWith(key, "e.") then
		-- 中间对象属性
		key = string.sub(key, string.len("e.") + 1)
		if self.e then
			self:SetObjectValue(self.e, key, objectValue, isAdd)
		end
		return
	end
	if string.StartsWith(key, "et.") then
		-- 中间对象临时属性
		key = string.sub(key, string.len("et.") + 1)
		if self.e then
			self:SetObjectTmpValue(self.e, key, objectValue, isAdd)
		end
		return
	end

	if string.StartsWith(key, "m.") then
		-- 当前或中间对象
		key = string.sub(key, string.len("m.") + 1)
		if self.m then
			if IsNumber(objectValue) then
				if isAdd then
					self.m[key] = ObjectUtil.ToNumberOrToDefault(self.m[key], 0) + objectValue
				else
					self.m = objectValue
				end
			end
			if IsBoolean(objectValue) then
				self.m[key] = objectValue
			end
			if IsString(objectValue) then
				if objectValue == "nil" then
					self.m[key] = nil
				elseif isAdd then
					self.m[key] = table.GetOrAddDefault_Dict(self.m, key, function()
						return ""
					end) .. objectValue
				else
					self.m[key] = objectValue
				end
			end
		end
		return
	end

	if self.u then
		self:SetObject("u." .. key, objectValue, isAdd)
	elseif self.o then
		self:SetObject("o." .. key, objectValue, isAdd)
	elseif self.e then
		self:SetObject("e." .. key, objectValue, isAdd)
	elseif self.m then
		self:SetObject("m." .. key, objectValue, isAdd)
	end
end
--------------------------------------------------SetObjectValue----------------------
---@param doer Doer
function DoerAttrSetter:SetObjectTmpValue(doer, key, objectValue, isAdd)
	if objectValue == "nil" then
		doer:SetTmp(key, nil)
		return
	end
	if not isAdd then
		doer:SetTmp(key, objectValue)
		return
	end
	-- add
	if IsString(objectValue) then
		doer:AddTmpString(key, objectValue)
		return
	end
	-- number
	doer:AddTmp(key, objectValue)
end

---@param doer Doer
function DoerAttrSetter:SetObjectValue(doer, key, objectValue, isAdd)
	if self:SetObjectValue_User(doer, key, objectValue, isAdd) then
		return
	end

	if self:SetObjectValue_Doer(doer, key, objectValue, isAdd) then
		return
	end

	if objectValue == "nil" then
		doer:Set(key, nil)
		return
	end
	if not isAdd then
		doer:Set(key, objectValue)
		return
	end
	-- add
	if IsString(objectValue) then
		doer:AddString(key, objectValue)
		return
	end
	-- number
	doer:Add(key, objectValue)
end

---@param doer Doer
---@return boolean
function DoerAttrSetter:SetObjectValue_Doer(doer, key, objectValue, isAdd)
	local isBreak = false
	if IsInstanceOf(doer, "Doer") then
		if string.StartsWith(key, "env.") or string.StartsWith(key, "envt.") then
			local env = doer:GetEnv()
			if env then
				key = string.sub(key, string.len("env") + 1)
				---@type DoerAttrSetter
				local attrAttrSetter = DoerAttrSetter.New(self.desc)
				attrAttrSetter:SetU(env)
				DoerAttrSetter:SetObject("u" .. key, objectValue, isAdd)
			end
			return true
		end

		if string.StartsWith(key, "owner.") or string.StartsWith(key, "ownert.") then
			local owner = doer:GetOwner()
			if owner then
				key = string.sub(key, string.len("owner") + 1)
				---@type DoerAttrSetter
				local attrAttrSetter = DoerAttrSetter.New(self.desc)
				attrAttrSetter:SetU(owner)
				DoerAttrSetter:SetObject("u" .. key, objectValue, isAdd)
			end
			return true
		end
	end
	return isBreak
end

---@param doer Doer
---@return boolean
function DoerAttrSetter:SetObjectValue_User(doer, key, objectValue, isAdd)
	local isBreak = false
	if IsInstanceOf(doer, "User") then
		local user = doer
		if IsString(objectValue) then
			if self:SetObjectValue_User_AddAttrEquip(user, key, objectValue, isAdd) then
				return true
			end
			if self:SetObjectValue_User_Missions(user, key, objectValue, isAdd) then
				return true
			end
			if self:SetObjectValue_User_Items(user, key, objectValue, isAdd) then
				return true
			end
		end
	end
	return isBreak
end

---@param user User
---@return boolean
function DoerAttrSetter:SetObjectValue_User_AddAttrEquip(user, key, objectValue, isAdd)
	local isBreak = false
	local value = objectValue
	if string.StartsWith(key, "add_attr_equip.") then
		-- 增加带属性道具
		local itemId = string.Trim(string.sub(key, string.len("add_attr_equip.") + 1))
		local pos = string.IndexOf(value, ";") -- count;pz:2,jl:3
		if pos ~= -1 then
			local countString = string.Trim(string.sub(value, pos - 1))
			local countValue = self.doerAttrParser:ParseNumber(countString, 0)
			local attrs = string.ToDictionary(string.sub(value, pos + 1))
			local attrDict = {}
			for attrKey, attrValue in pairs(attrs) do
				local attrKeyPostParse = self.doerAttrParser:ParseString(attrKey)
				local attrValuePostParse = self.doerAttrParser:Parse(attrValue)
				attrDict[attrKeyPostParse] = attrValuePostParse
			end
			for i = 1, countValue do
				local equip = global.client.itemFactory:NewDoer(itemId)
				equip:AddAll(attrDict)
				user:AddItem(equip)
			end
		end
		return true
	end
	return isBreak
end

---@param user User
---@return boolean
function DoerAttrSetter:SetObjectValue_User_Items(user, key, objectValue, isAdd)
	local isBreak = false
	if string.StartsWith(key, "items.") then
		-- 物品对象
		key = string.sub(key, string.len("items.") + 1)
		local pos = string.IndexOf(key, ".")
		if pos ~= -1 then
			local itemId = string.sub(key, 1, pos - 1)
			key = string.sub(key, pos + 1)
			if string.EndsWith(itemId, "t") then
				-- 改变tmpValue
				itemId = string.sub(itemId, 1, -2)
				key = "t" .. key
			end
			local item = user:GetItem(itemId)
			if item then
				---@type DoerAttrSetter
				local doerAttrSetter = DoerAttrSetter.New(self.desc)
				doerAttrSetter:SetU(item)
				doerAttrSetter:SetObject("u" .. key, objectValue, isAdd)
			end
		end
		return true
	end
	return isBreak
end

---@param user User
---@return boolean
function DoerAttrSetter:SetObjectValue_User_Missions(user, key, objectValue, isAdd)
	local isBreak = false
	if string.StartsWith(key, "missions.") then
		-- 任务对象
		key = string.sub(key, string.len("missions.") + 1)
		local pos = string.IndexOf(key, ".")
		if pos ~= -1 then
			local missionId = string.sub(key, 1, pos - 1)
			key = string.sub(key, pos + 1)
			if string.EndsWith(missionId, "t") then
				-- 改变tmpValue
				missionId = string.sub(missionId, 1, -2)
				key = "t" .. key
			end
			local mission = user:GetMission(missionId)
			if mission then
				---@type DoerAttrSetter
				local doerAttrSetter = DoerAttrSetter.New(self.desc)
				doerAttrSetter:SetU(mission)
				doerAttrSetter:SetObject("u" .. key, objectValue, isAdd)
			end
		end
		return true
	end
	return isBreak
end

return DoerAttrSetter
