---@class Doer:TickObject
---@field _factory DoerFactory
---@field _dbase DBase @数据对象
local Doer = Class("Doer", TickObject)

function Doer:PostInit()
	self:OnInit()
	Doer.super.PostInit(self)
end

function Doer:Destruct()
	if self._factory then
		self._factory:ReleaseDoer(self)
	end
end

function Doer:PrepareSave(dict, dictTmp)
	self:DoSave(dict, dictTmp)
end

function Doer:FinishRestore(dict, dictTmp)
	self:DoRestore(dict, dictTmp)
end

----------------------------------------------------------------------
-- OnXXX
----------------------------------------------------------------------
function Doer:OnInit()
end

function Doer:OnRelease()
end

-- 存储数据事件
function Doer:OnSave(dict, dictTmp)
end

-- 导出数据事件
function Doer:OnRestore(dict, dictTmp)
end

-- 修改属性事件
function Doer:OnAttrChange(key)
end

-- 重新载入定义数据事件
function Doer:OnReloadCfg()
end

----------------------------------------------------------------------
-- DoXXX
----------------------------------------------------------------------
function Doer:DoSave(dict, dictTmp)
	self:GetSaveData(dict)
	self:GetSaveTmpData(dictTmp)
	self:OnSave(dict, dictTmp)
end

function Doer:DoRestore(dict, dictTmp)
	self:OnRestore(dict, dictTmp)
	if dictTmp then
		self:AddTmpAll(dictTmp)
	end
	if dict then
		self:AddAll(dict)
	end


end

-- 通知属性修改事件
function Doer:NotifyAttrChange(key)
	self:OnAttrChange(key)
end

function Doer:DoRelease()
	self:OnRelease()
end

----------------------------------------------------------------------
-- SetGet相关
----------------------------------------------------------------------
function Doer:GetId()
	return self._dbase:GetId()
end

function Doer:GetRid()
	return self._dbase:GetRid()
end

function Doer:GetRidSeq()
	return self._dbase:GetRidSeq()
end

function Doer:GetDBase()
	return self._dbase
end

function Doer:GetShort()
	return string.format("%s", self:GetRid())
end

function Doer:GetFullTraceInfo()
	return self:GetShort()
end

-- 获得需存储数据
function Doer:GetSaveData(dict)
	if not dict then
		return
	end
	self:GetAll(dict)
end


--  拷贝数据到指定dict
function Doer:GetAll(dict)
	table.CombineByReplace_Dict(dict, self._dbase:GetDb())
end

--  获得需存储运行时数据
function Doer:GetSaveTmpData(dict)
	if not dict then
		return
	end
	self:GetTmpAll(dict)
	for key, value in pairs(dict) do
		if string.StartsWith(key, "o_") then
			-- "o_"开始的都是逻辑对象，不需要保存
			dict[key] = nil
		end
	end
end

function Doer:Get(key, defaultValue)
	local value = self._dbase:GetDb()[key]
	value = value or defaultValue
	return value
end




--  拷贝运行时数据到指定dict
function Doer:GetTmpAll(dict)
	table.CombineByReplace_Dict(dict, self._dbase:GetDbTmp())
end

function Doer:GetTmp(key, defaultValue)
	local value = self._dbase:GetDbTmp()[key]
	value = value or defaultValue
	return value
end

function Doer:GetCount()
	return self:Get("count")
end

-- 获得物件所在环境
function Doer:GetEnv()
	return self:GetTmp("o_env")
end

-- 拥有者，如发放任务的npc
function Doer:GetOwner()
	return self:GetTmp("o_owner")
end

function Doer:GetPos2()
	local pos2 = self:Get("pos2")
	if pos2 then
		return Vector2.New(pos2.x, pos2.y)
	end
	return nil
end

function Doer:GetPos3()
	local pos3 = self:Get("pos3")
	if pos3 then
		return Vector3.New(pos3.x, pos3.y, pos3.z)
	end
	return nil
end

function Doer:GetBelong()
	return self:GetTmp("belong", "");
end

function Doer:SetDBase(dbase)
	self._dbase = dbase
end

function Doer:Set(key, value)
	self._dbase:GetDb()[key] = value
end

function Doer:SetTmp(key, value)
	self._dbase:GetDbTmp()[key] = value
end

function Doer:SetCount(count)
	self:Set("count", count)
end

-- 设置物件所在环境
---@param env Doer
function Doer:SetEnv(env)
	self:SetTmp("o_env", env)
end

-- 拥有者，如发放任务的npc
function Doer:SetOwner(owner)
	return self:SetTmp("o_owner", owner)
end

function Doer:SetPos2(x, y)
	self:Set("pos2", { x = x, y = y })
end

function Doer:SetPos3(x, y, z)
	self:Set("pos3", { x = x, y = y, z = z })
end

function Doer:SetBelong(belong)
	self:SetTmp("belong", belong)
end

function Doer:SetFactory(factory)
	self._factory = factory
end

function Doer:GetFactory()
	return self._factory
end

----------------------------------------------------------------------
-- AddXXXX相关
----------------------------------------------------------------------
function Doer:AddAll(dict)
	table.CombineByReplace_Dict(self._dbase:GetDb(), dict)
end

function Doer:Add(key, addValue)
	self._dbase:GetDb()[key] = self._dbase:GetDb()[key] or 0
	self._dbase:GetDb()[key] = self._dbase:GetDb()[key] + addValue
end

function Doer:AddString(key, addValue)
	self._dbase:GetDb()[key] = self._dbase:GetDb()[key] or ""
	self._dbase:GetDb()[key] = self._dbase:GetDb()[key] .. addValue
end

function Doer:AddTmp(key, addValue)
	self._dbase:GetDbTmp()[key] = self._dbase:GetDbTmp()[key] or 0
	self._dbase:GetDbTmp()[key] = self._dbase:GetDbTmp()[key] + addValue
end

function Doer:AddTmpString(key, addValue)
	self._dbase:GetDbTmp()[key] = self._dbase:GetDbTmp()[key] or ""
	self._dbase:GetDbTmp()[key] = self._dbase:GetDbTmp()[key] .. addValue
end

function Doer:AddTmpAll(dict)
	table.CombineByReplace_Dict(self._dbase:GetDbTmp(), dict)
end

function Doer:AddCount(addValue)
	return self:Add("count", addValue)
end

----------------------------------------------------------------------
-- GetOrAddXXXX相关
----------------------------------------------------------------------
function Doer:GetOrAddTmp(key, addFunc)
	return table.GetOrAddDefault_Dict(self._dbase:GetDbTmp(), key, addFunc)
end

function Doer:GetOrAdd(key, addFunc)
	return table.GetOrAddDefault_Dict(self._dbase:GetDb(), key, addFunc)
end

return Doer