---@class DoerFactory:TickObject
---@field _defaultDoerClassPath string
local DoerFactory = Class("ObjectFactory", TickObject)

function DoerFactory:Init()
	DoerFactory.super.Init(self)
	---@type table<string,table<string,DBase>>
	self._idDict = {} -- key是id,sub_key是rid
end

function DoerFactory:GetClassPath(id)
	return self._defaultDoerClassPath
end

-- 需子类重写
---@return DBase
function DoerFactory:_NewDBase(idOrRid)
	return DBase.New(idOrRid)
end

---@return Doer
function DoerFactory:_NewDoer(id)
	local classPath = self:GetClassPath(id)
	local classType = ClassLoadUtil.Load(classPath)
	local doer = self:AddChildWithoutInit(nil, classType)
	return doer
end

-- 获得所有逻辑对象数量
function DoerFactory:GetDoerCount(id)
	local count = 0
	if not id then
		for id, dbaseDict in pairs(self._idDict) do
			count = count + table.Count(dbaseDict)
		end
	else
		if self._idDict[id] then
			count = table.Count(self._idDict[id])
		end
	end
	return count
end


-- 获得所有逻辑对象
---@return Doer[]
function DoerFactory:GetDoers(id)
	local result = {}
	if not id then
		for id, dbaseDict in pairs(self._idDict) do
			for rid, dbase in pairs(dbaseDict) do
				table.insert(result, dbase:GetDoer())
			end
		end
	else
		if self._idDict[id] then
			for rid, dbase in pairs(self._idDict[id]) do
				table.insert(result, dbase:GetDoer())
			end
		end
	end
	return result
end

-- 查找指定逻辑对象
---@return Doer
function DoerFactory:FindDoer(idOrRid)
	local id = IdUtil.RidToId(idOrRid)
	local isId = IdUtil.IsId(idOrRid)
	if not table.IsNilOrEmpty(self._idDict[id]) then
		for rid, dbase in pairs(self._idDict[id]) do
			if isId then
				-- id的情况
				return dbase:GetDoer()
			else
				if rid == idOrRid then
					return dbase:GetDoer()
				end
			end
		end
	end
end

-- 创建逻辑对象
---@return Doer
function DoerFactory:NewDoer(idOrRid)
	local id = IdUtil.RidToId(idOrRid)
	local doer = self:_NewDoer(id)
	local dbase = self:_NewDBase(idOrRid)
	doer:SetDBase(dbase)
	dbase:SetDoer(doer)
	doer:SetFactory(self)
	local rid = dbase:GetRid()
	local dbaseDict = table.GetOrAddDefault_Dict(self._idDict, id, function()
		return {}
	end)
	dbaseDict[rid] = dbase
	doer:Init()
	doer:PostInit()
	doer:SetIsEnabled(true, false)
	return doer
end


-- 释放逻辑对象
---@param doer Doer
function DoerFactory:ReleaseDoer(doer)
	local id = doer:GetId()
	local rid = doer:GetRid()
	if self._idDict[id] then
		self._idDict[id][rid] = nil
	end
	doer:DoRelease()
	self:RemoveChild(doer._key)
end

return DoerFactory