DoerAttrParserUtil = {}

function DoerAttrParserUtil.ConvertValue(value, typeString)
	if string.EqualsIgnoreCase(typeString, DoerAttrParserConst.Type_String_List[1])
		or string.EqualsIgnoreCase(typeString, DoerAttrParserConst.Type_String_List[2]) then
		return ObjectUtil.ToNumberOrToDefault(value, 0)
	end
	if string.EqualsIgnoreCase(typeString, DoerAttrParserConst.Type_String_List[3]) then
		return ObjectUtil.ToBooleanOrToDefault(value, 0)
	end
	if string.EqualsIgnoreCase(typeString, DoerAttrParserConst.Type_String_List[4]) then
		return ObjectUtil.ToStringOrToDefault(value, "")
	end
	error2(string.format("没有处理该typeString[%s]的方法", typeString))
end

function DoerAttrParserUtil.GetTypeString(value)
	local valueFirstChar = (value and string.len(value) > 1) and value[1] or ""
	for i = #DoerAttrParserConst.Type_String_List, 2, -1 do
		if valueFirstChar == DoerAttrParserConst.Type_String_List[i] then
			return DoerAttrParserConst.Type_String_List[i]
		end
	end
	return DoerAttrParserConst.Type_String_List[1] -- 数字
end

function DoerAttrParserUtil.ConvertValueWithTypeString(value)
	local typeString = DoerAttrParserUtil.GetTypeString(value)
	local typeStringLength = string.len(typeString)
	local valueWithoutTypeString = typeStringLength == 0 and value or string.sub(value, typeStringLength + 1)
	return DoerAttrParserUtil.ConvertValue(valueWithoutTypeString, typeString)
end

function DoerAttrParserUtil.ConvertTableWithTypeString(t)
	local result = {}
	if not table.IsNilOrEmpty(t) then
		for key, value in pairs(t) do
			result[key] = DoerAttrParserUtil.ConvertValueWithTypeString(value)
		end
	end
	return result
end