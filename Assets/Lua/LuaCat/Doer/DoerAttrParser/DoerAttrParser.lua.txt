---@class DoerAttrParser:Class
local DoerAttrParser = Class("DoerAttrParser")

function DoerAttrParser:Init(u, o, e, m)
	self:Set(u, o, e, m)
end

---@param randomManager RandomManager
function DoerAttrParser:SetRandomManager(randomManager)
	self._randomManager = randomManager
end

---@return RandomManager
function DoerAttrParser:GetRandomManager()
	return self._randomManager
end

function DoerAttrParser:Set(u, o, e, m)
	self:SetU(u)
	self:SetO(o)
	self:SetE(e)
	self:SetM(m)
end

function DoerAttrParser:SetU(u)
	---@type Doer
	self._u = u--主动对象，比如任务中接受任务的玩家
end

function DoerAttrParser:GetU()
	return self._u
end

function DoerAttrParser:SetO(o)
	---@type Doer
	self._o = o -- 被动对象，比如任务中的任务
end

function DoerAttrParser:GetO()
	return self._o
end

function DoerAttrParser:SetE(e)
	---@type Doer
	self._e = e --中间对象，比如任务中给与任务的npc
end

function DoerAttrParser:GetE()
	return self._e
end

function DoerAttrParser:SetM(m)
	---@type table<string,any>
	self._m = m -- 相互传数据的hashttable
end

function DoerAttrParser:GetM()
	return self._m
end

---@param flag number
---@param doer Doer
---@param key string
function DoerAttrParser:GetDoerTmpValue(flag, doer, key)
	return self:ConvertValue(flag, doer:GetTmp(key))
end

---@param doerAttrParser DoerAttrSetter
---@param eval string
---@param dv string
function DoerAttrParser:Parse(eval)
	if string.IsNilOrWhiteSpace(eval) then
		return nil
	end
	if string.EqualsIgnoreCase(eval, "true") then
		return true
	end
	if string.EqualsIgnoreCase(eval, "false") then
		return false
	end
	if string.IsNumber(eval) then
		return tonumber(string.TrimLeft(eval, "+"))
	end
	if string.StartsWith(eval, "#") then
		-- 直接字符串
		eval = string.sub(eval, string.len("#") + 1)
		if string.IndexOf(eval, "{") ~= -1 then
			return self:ParseString(eval)
		else
			return eval
		end
	else
		local ueval
		if string.IndexOf(eval, "{") ~= -1 then
			ueval = self:ParseString(eval)
		else
			ueval = eval
		end
		local o = load(string.format("return %s", ueval))()
		return o
	end
end

function DoerAttrParser:ParseBoolean(expression, dv)
	dv = dv or false
	--warn(self:ParseString(expression))
	return ObjectUtil.ToBooleanOrToDefault(self:ParseString(expression), dv)
end

function DoerAttrParser:ParseNumber(expression, dv)
	dv = dv or 0
	return tonumber(self:ParseString(expression))
end

function DoerAttrParser:ParseString(expression)
	log(string.format("解析ing:%s", expression))
	local replaceFunc = function(matchString)
		return self:Replace(matchString)
	end
	-- 决定解析的先后顺序
	if string.IndexOf(expression, "${") ~= -1 then
		if string.IndexOf(expression, "$${") ~= -1 then
			expression = string.ReplaceAll(expression, DoerAttrParserConst.Pattern3, replaceFunc)
		end
		expression = string.ReplaceAll(expression, DoerAttrParserConst.Pattern2, replaceFunc)
	end
	return string.ReplaceAll(expression, DoerAttrParserConst.Pattern1, replaceFunc)
end

function DoerAttrParser:Replace(expression)
	if string.StartsWith(expression, "{") then
		expression = string.Trim(string.sub(expression, string.len("{") + 1, string.len(expression) - 1))
	elseif string.StartsWith(expression, "${") then
		expression = string.Trim(string.sub(expression, string.len("${") + 1, string.len(expression) - 1))
	elseif string.StartsWith(expression, "$${") then
		expression = string.Trim(string.sub(expression, string.len("$${") + 1, string.len(expression) - 1))
	end
	local typeString = ""
	if string.StartsWith(expression, DoerAttrParserConst.Type_String_List[2]) then
		typeString = DoerAttrParserConst.Type_String_List[2]
		expression = string.Trim(string.sub(expression, string.len(typeString) + 1))
	elseif string.StartsWith(expression, DoerAttrParserConst.Type_String_List[3]) then
		typeString = DoerAttrParserConst.Type_String_List[3]
		expression = string.Trim(string.sub(expression, string.len(typeString) + 1))
	elseif string.StartsWith(expression, DoerAttrParserConst.Type_String_List[4]) then
		typeString = DoerAttrParserConst.Type_String_List[4]
		expression = string.Trim(string.sub(expression, string.len(typeString) + 1))
	end

	if string.StartsWith(expression, "u.") then
		-- 主动对象属性
		expression = string.sub(expression, string.len("u.") + 1)
		if self._u then
			return self:GetDoerValue(self._u, expression, typeString)
		else
			return self:ConvertValue("", typeString)
		end
	end
	if string.StartsWith(expression, "ut.") then
		-- 主动对象临时属性
		expression = string.sub(expression, string.len("ut.") + 1)
		if self._u then
			return self:GetDoerTmpValue(self._u, expression, typeString)
		else
			return self:ConvertValue("", typeString)
		end
	end

	if string.StartsWith(expression, "o.") then
		-- 被动对象属性
		expression = string.sub(expression, string.len("o.") + 1)
		if self._o then
			return self:GetDoerValue(self._o, expression, typeString)
		else
			return self:ConvertValue("", typeString)
		end
	end
	if string.StartsWith(expression, "ot.") then
		-- 被动对象临时属性
		expression = string.sub(expression, string.len("ot.") + 1)
		if self._o then
			return self:GetDoerTmpValue(self._o, expression, typeString)
		else
			return self:ConvertValue("", typeString)
		end
	end

	if string.StartsWith(expression, "e.") then
		-- 中间对象属性
		expression = string.sub(expression, string.len("e.") + 1)
		if self._e then
			return self:GetDoerValue(self._e, expression, typeString)
		else
			return self:ConvertValue("", typeString)
		end
	end
	if string.StartsWith(expression, "et.") then
		-- 中间对象临时属性
		expression = string.sub(expression, string.len("et.") + 1)
		if self._e then
			return self:GetDoerTmpValue(self._e, expression, typeString)
		else
			return self:ConvertValue("", typeString)
		end
	end

	if string.StartsWith(expression, "m.") then
		-- 当前或中间对象
		expression = string.sub(expression, string.len("m.") + 1)
		if self._m then
			return self:ConvertValue(self._m[expression], typeString)
		else
			return self:ConvertValue("", typeString)
		end
	end

	if string.StartsWith(expression, "cfgData.") then
		--  定义数据
		expression = string.sub(expression, string.len("cfgData.") + 1)
		local pos0 = string.IndexOf(expression, '.')
		local cfgDataName = string.sub(expression, 1, pos0 - 1)
		expression = string.sub(expression, pos0 + 1)
		local pos1 = string.IndexOf(expression, '.')
		local id = string.sub(expression, 1, pos1 - 1)
		local attr = string.sub(expression, pos1 + 1)
		if string.EqualsIgnoreCase(cfgDataName, "cfgItemData") then
			return self:ConvertValue(global.client.itemFactory:GetCfgItemData(id)[attr], typeString)
		end
		return nil
	end
	if string.StartsWith(expression, "eval(") then
		--  求表达式值
		expression = string.Trim(string.sub(expression, string.len("eval(") + 1))
		local pos = string.QuoteEndIndex(expression, "(", ")")
		if pos ~= -1 then
			local exp = string.Trim(string.sub(expression, 1, pos - 1))
			local end_string = pos == string.len(expression) and "" or string.Trim(string.sub(expression, pos + 1))
			local v = tostring(self:Parse(exp)) .. end_string -- 计算结果
			return self:ConvertValue(v, typeString)
		end
		return self:ConvertValue("", typeString)
	end

	if string.StartsWith(expression, "hasSubString(") then
		--  是否有子字符串查找
		expression = string.Trim(string.sub(expression, string.len("hasSubString(") + 1))
		if string.EndsWith(expression, ")") then
			expression = string.sub(expression, 1, string.len(expression) - 1)
		end
		local pos = string.LastIndexOf(expression, '|')
		if pos == -1 then
			pos = string.LastIndexOf(expression, ',')
		end
		if pos ~= -1 then
			local src = string.sub(expression, 1, pos - 1)
			local dst = string.Trim(string.sub(expression, pos + 1))
			local v = string.IndexOf(src, dst) ~= -1
			return self:ConvertValue(v, typeString)
		end
		return self:ConvertValue("", typeString)
	end

	if string.StartsWith(expression, "random(") then
		--  随机数
		expression = string.Trim(string.sub(expression, string.len("random(") + 1))
		local pos0 = string.QuoteEndIndex(expression, "(", ")")
		local randomExpression = string.Trim(string.sub(expression, 1, pos0 - 1))
		local endString = pos0 == string.len(expression) and "" or string.Trim(string.sub(expression, pos0 + 1))
		local pos1 = string.IndexOf(randomExpression, ",")
		local randomArg0 = tonumber(string.sub(randomExpression, 1, pos1 - 1))
		local randomArg1 = tonumber(string.sub(randomExpression, pos1 + 1))
		return self:ConvertValue(self:GetRandomManager():RandomInt(randomArg0, randomArg1) .. endString, typeString)
	end

	-- 默认的处理
	if self._m then
		return self:ConvertValue(self._m[expression], typeString)
	end
	if self._u then
		return self:ConvertValue(self._u[expression], typeString)
	end
	if self._o then
		return self:ConvertValue(self._o[expression], typeString)
	end
	return self:ConvertValue("", typeString)
end

------------------------------------------GetDoerValue------------------------------
---@param typeString string
---@param doer Doer
---@param key string
function DoerAttrParser:GetDoerTmpValue(doer, key, typeString)
	return self:ConvertValue(doer:GetTmp(key), typeString)
end

---@param typeString string
---@param doer Doer
---@param key string
function DoerAttrParser:GetDoerValue(doer, key, typeString)
	local resultDict = {}
	if self:GetDoerValue_User(doer, key, typeString, resultDict) then
		return resultDict.result
	end
	if self:GetDoerValue_Mission(doer, key, typeString, resultDict) then
		return resultDict.result
	end
	if self:GetDoerValue_Doer(doer, key, typeString, resultDict) then
		return resultDict.result
	end
	return self:ConvertValue(doer:Get(key), typeString)
end

---@param typeString string
---@param doer Doer
---@param key string
---@return boolean
function DoerAttrParser:GetDoerValue_Doer(doer, key, typeString, resultDict)
	local isBreak = false
	if IsInstanceOf(doer, "Doer") then
		if string.StartsWith(key, "env.") or string.StartsWith(key, "envt.") then
			local env = doer:GetEnv()
			if env then
				key = string.sub(string.len("env") + 1)
				---@type DoerAttrParser
				local doerAttrParser = DoerAttrParser.New(env)
				resultDict.result = doerAttrParser:ParseString(typeString .. "u" .. key)
				return true
			end
			resultDict.result = self:ConvertValue("", typeString)
			return true
		end

		if string.StartsWith(key, "pos2") then
			key = string.sub(key, string.len("pos2") + 1)
			local pos2 = doer:GetPos2()
			if pos2 then
				if key == ".x" then
					resultDict.result = self:ConvertValue(pos2.x, typeString)
					return true
				end
				if key == ".y" then
					resultDict.result = self:ConvertValue(pos2.y, typeString)
					return true
				end
				resultDict.result = self:ConvertValue(tostring(pos2), typeString)
				return true
			end
			resultDict.result = self:ConvertValue("", typeString)
			return true
		end

		if string.StartsWith(key, "pos3") then
			key = string.sub(key, string.len("pos3") + 1)
			local pos3 = doer:GetPos3()
			if pos3 then
				if key == ".x" then
					resultDict.result = self:ConvertValue(pos3.x, typeString)
					return true
				end
				if key == ".y" then
					resultDict.result = self:ConvertValue(pos3.y, typeString)
					return true
				end
				if key == ".z" then
					resultDict.result = self:ConvertValue(pos3.y, typeString)
					return true
				end
				resultDict.result = self:ConvertValue(tostring(pos3), typeString)
				return true
			end
			resultDict.result = self:ConvertValue("", typeString)
			return true
		end
	end
	return isBreak
end

---@param typeString string
---@param doer Doer
---@param key string
---@return boolean
function DoerAttrParser:GetDoerValue_Mission(doer, key, typeString, resultDict)
	local isBreak = false
	if IsInstanceOf(doer, "Mission") then
		---@type Mission
		local mission = doer
		if key == "status" then
			if mission:IsReady() then
				resultDict.result = self:ConvertValue(3, typeString) -- 已就绪,可以被完成
				return true
			else
				resultDict.result = self:ConvertValue(2, typeString) -- 未完成
				return true
			end
		end

		if key == "items." then
			-- 物品
			local itemId = string.sub(key, string.len("items.") + 1)
			local items = mission:Get("items")
			if items then
				local count = items[itemId] or 0
				resultDict.result = self:ConvertValue(count, typeString)
				return true
			end
		end

	end
	return isBreak
end

---@param typeString string
---@param doer Doer
---@param key string
---@return boolean
function DoerAttrParser:GetDoerValue_User(doer, key, typeString, resultDict)
	local isBreak = false
	if IsInstanceOf(doer, "User") then
		---@type User
		local user = doer
		if self:GetDoerValue_User_Missions(user, key, typeString, resultDict) then
			return true
		end
		if self:GetDoerValue_User_Items(user, key, typeString, resultDict) then
			return true
		end
	end
	return isBreak
end

---@param typeString string
---@param user User
---@param key string
---@return boolean
function DoerAttrParser:GetDoerValue_User_Missions(user, key, typeString, resultDict)
	local isBreak = false
	if string.StartsWith(key, "missions.") then
		--任务对象
		key = string.sub(key, string.len("missions.") + 1)
		local missionId
		local pos = string.IndexOf(key, ".")
		if pos ~= -1 then
			missionId = string.sub(key, 1, pos - 1)
			key = string.sub(key, pos + 1)
			if string.EndsWith(missionId, "t") then
				-- 修改tmpValue
				missionId = string.sub(missionId, 1, -2)
				key = "t" + key
			end
		else
			missionId = key
			key = ""
		end
		local mission = user:GetMission(missionId)
		if mission then
			-- 身上有这个任务
			if string.len(key) > 0 then
				---@type DoerAttrParser
				local doerAttrParser = DoerAttrParser.New(mission)
				resultDict.result = doerAttrParser:ParseString(typeString .. "u" .. key)
				return true
			else
				resultDict.result = self:ConvertValue("1", typeString)
				return true
			end
		else
			if string.StartsWith(key, ".status") then
				--  身上没这个任务
				if table.ContainsValue(user:GetFinishedMissionIds(), missionId) then
					resultDict.result = self:ConvertValue(4, typeString) -- 已完成
					return true
				else
					resultDict.result = self:ConvertValue(0, typeString) -- 未接到
					return true
				end
			end
		end
	end
	return isBreak
end

---@param typeString string
---@param user User
---@param key string
---@return boolean
function DoerAttrParser:GetDoerValue_User_Items(user, key, typeString, resultDict)
	local isBreak = false
	if string.StartsWith(key, "items.") then
		--物品对象
		key = string.sub(key, string.len("items.") + 1)
		local pos = string.IndexOf(key, ".")
		if pos ~= -1 then
			local itemId = string.sub(key, 1, pos - 1)
			key = string.sub(key, pos + 1)
			if string.EndsWith(itemId, "t") then
				-- 修改tmpValue
				itemId = string.sub(itemId, 1, -2)
				key = "t" + key
			end
			if key == ".count" then
				resultDict.result = self:ConvertValue(user:GetItemCount(itemId), typeString)
				return true
			end
			local item = user:GetItem(itemId)
			if item then
				-- 身上有这个物品
				---@type DoerAttrParser
				local doerAttrParser = DoerAttrParser.New(item)
				resultDict.result = doerAttrParser:ParseString(typeString .. "u" .. key)
				return true
			end
		end
		resultDict.result = self:ConvertValue("", typeString)
		return true
	end
	return isBreak
end



----------------------------------------------------------------------
--
----------------------------------------------------------------------
function DoerAttrParser:ConvertValue(value, typeString)
	return tostring(DoerAttrParserUtil.ConvertValue(value, typeString))
end

return DoerAttrParser
