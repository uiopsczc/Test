---@class AnimatorComp
local AnimatorComp = Class("AnimatorComp")

function AnimatorComp:Init()
	---@type table<CS.UnityEngine.Animator,table<string,AnimatorParameterInfo>>
	self.animatorsParameterInfoDict = {}
	---@type string
	self.curAnimationName = nil
end

function AnimatorComp:Destroy()
	self.animatorsParameterInfoDict = {}
	self.curAnimationName = nil
end

function AnimatorComp:OnBuild()
end

function AnimatorComp:OnBuildOk(gameObject)
	local animators = gameObject:GetComponentsInChildren(typeof(CS.UnityEngine.Animator))
	for i = 0, animators.Length - 1 do
		local animator = animators[i]
		self:SaveAnimator(animator)
	end
end

---@param animator CS.UnityEngine.Animator
function AnimatorComp:SaveAnimator(animator)
	local parameters = animator.parameters
	local animatorParameterInfoDict = {}
	for i = 0, parameters.Length - 1 do
		local parameter = parameters[i]
		animatorParameterInfoDict[parameter.name] = AnimatorParameterInfo.New(animator, parameter)
	end
	self.animatorsParameterInfoDict[animator] = animatorParameterInfoDict
end

function AnimatorComp:PlayAnimation(animationName, parameterValue, speed)
	if self.curAnimationName == AnimationNameConst.die then
		return
	end
	local isChanged = false
	for animator, animatorParameterInfoDict in pairs(self.animatorsParameterInfoDict) do
		-- 停掉上一个动画
		if self.curAnimationName
			and animatorParameterInfoDict[self.curAnimationName]
			and animatorParameterInfoDict[self.curAnimationName].animatorControllerParameterType == CS.UnityEngine.AnimatorControllerParameterType.Bool then
			animatorParameterInfoDict[self.curAnimationName]:SetValue(false)
		end
		-- 设置更改的动画
		if animatorParameterInfoDict[animationName] then
			animator.speed = speed or 1
			animatorParameterInfoDict[animationName]:SetValue(parameterValue)
			isChanged = true
		end
	end
	if isChanged then
		self.curAnimationName = animationName
	end
end

return AnimatorComp
