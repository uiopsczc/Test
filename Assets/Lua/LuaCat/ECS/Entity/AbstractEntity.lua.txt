---@class AbstractEntity:Class
---@field _key string
---@field _parent AbstractEntity
---@field _isDestroyed boolean
---@field _isKeyUsingParentIdPool boolean
---@field _isPaused boolean
---@field _isNotDeleteChildRelationShipImmediately boolean @是否不立刻将child从child_key_list和children_dict中删除关联关系
---@field _isNotDeleteComponentRelationShipImmediately boolean @是否不立刻将component从component_list和component_dict中删除关联关系
---@field _isHasDestroyedChild boolean @是否【子孙】child中有要从child_key_list和children_dict中删除关联关系
---@field _isHasDestroyedChildComponent boolean @是否【子孙】child中有要从component_list和component_dict中删除关联关系
---@field _isHasDestroyedComponent boolean @是否有compoent是要从component_list和component_dict中删除关联关系
---@field _isEnabled boolean
--------注意创建后记得设置key
local AbstractEntity = Class("AbstractEntity")

-----注意创建后记得设置key
function AbstractEntity:Init()
	---@type table<string, AbstractEntity>
	self._keyToChildDict = {}
	---@type table<string,AbstractEntity[]>
	self._classNameToChildListDict = {}--准确的类型
	---@type string[]
	self._childKeyList = {}
	---@type string[]
	self._childClassNameList = {}
	---@type IdPool
	self._childKeyIdPool = IdPool.New()

	---@type table<string, AbstractComponent>
	self._keyToComponentDict = {}
	---@type table<string, AbstractComponent[]>
	self._classNameToComponentListDict = {}
	---@type string[]
	self._componentKeyList = {}
	---@type string[]
	self._componentClassNameList = {}
	---@type IdPool
	self._componentKeyIdPool = IdPool.New()

	self._destroyCallback = {}
	self._resetCallback = {}

	---@type Cache
	self._cache = Cache.New()
end

function AbstractEntity:PostInit()
end

function AbstractEntity:Start(...)
end

function AbstractEntity:Refresh(...)
end

function AbstractEntity:_OnDespawn_()
	self._isHasDestroyedChild = false
	self._isHasDestroyedChildComponent = false
	self._isHasDestroyedComponent = false

	self._cache:Clear()
end

----------------------------------------------------------------------
-- child相关 ForeachChild
----------------------------------------------------------------------
function AbstractEntity:ForeachChild()
	return self._ForeachChild, { childrenDict = self._keyToChildDict, childKeyList = self._childKeyList, count = #self._childKeyList }, 0
end

---@param i number
function AbstractEntity._ForeachChild(childrenInfo, i)
	---@type AbstractEntity
	local child
	local childrenDict = childrenInfo.childrenDict
	local childKeyList = childrenInfo.childKeyList
	local count = childrenInfo.count
	while i < count and i <= #childKeyList do
		i = i + 1
		child = childrenDict[childKeyList[i]]
		if not child:IsDestroyed() then
			return i, child
		end
	end
end

---@param childClassType Class
function AbstractEntity:ForeachChildOfType(childClassType)
	return self._ForeachChildOfType,
	{
		childrenDict = self._keyToChildDict,
		childKeyList = self._childKeyList,
		count = #self._childKeyList,
		childClassType = childClassType
	},
	0
end

---@param i number
function AbstractEntity._ForeachChildOfType(childrenInfo, i)
	---@type AbstractEntity
	local child
	local childrenDict = childrenInfo.childrenDict
	local childKeyList = childrenInfo.childKeyList
	local count = childrenInfo.count
	local childClassType = childrenInfo.childClassType
	while i < count and i <= #childKeyList do
		i = i + 1
		child = childrenDict[childKeyList[i]]
		if not child:IsDestroyed() and IsSubClassOf(child._className, childClassType._className) then
			return i, child
		end
	end
end

function AbstractEntity:_OnDespawn_Child()
	table.Clear(self._keyToChildDict)
	table.Clear(self._classNameToChildListDict)
	table.Clear(self._childKeyList)
	table.Clear(self._childClassNameList)
	self._parent = nil
	self._isKeyUsingParentIdPool = false
end

----------------------------------------------------------------------
-- child相关 AddChild
----------------------------------------------------------------------
---@param childKey string
---@param childClassType Class @例如: require("LuaCat.ECS.Entity.AbstractEntity")
---@return AbstractEntity
function AbstractEntity:AddChildWithoutInit(childKey, childClassType)
	if childKey and self._keyToChildDict[childKey] then
		Error("duplicate add child:", childKey, childClassType._className)
		return
	end
	local isKeyUsingParentIdPool = not childKey
	if isKeyUsingParentIdPool then
		childKey = tostring(self._childKeyIdPool:Get())
		--再次检查键值
		if self._keyToChildDict[childKey] then
			Error("duplicate add child:", childKey, childClassType._className)
			return
		end
	end
	---@type AbstractEntity
	local child = PoolCatManagerUtil.Spawn(childClassType)
	child:SetKey(childKey)
	child:SetIsKeyUsingParentIdPool(isKeyUsingParentIdPool)
	return self:AddChild2(child)
end

---@generic T:AbstractEntity
---@param child T
---@return T
function AbstractEntity:AddChild2(child)
	if self._keyToChildDict[child.key] then
		Error("duplicate add child:", child.key, child._className)
		return
	end
	child:SetParent(self)
	self:_AddChildRelationship(child)
	return child
end

---@param childKey string
---@param childClassType Class @例如: require("LuaCat.ECS.Entity.AbstractEntity")
---@return AbstractEntity
function AbstractEntity:AddChild(childKey, childClassType, ...)
	local child = self:AddChildWithoutInit(childKey, childClassType)
	if not child then
		--没有加成功
		return nil
	end

	child:Init(...)
	child:PostInit()
	child:SetIsEnabled(true, false)
	return child
end

---@param child AbstractEntity
function AbstractEntity:_AddChildRelationship(child)
	self._keyToChildDict[child:GetKey()] = child
	local classNameToChildList = table.GetOrAddDefault_Dict(self._classNameToChildListDict, child._className, function()
		return {}
	end)
	table.insert(classNameToChildList, child)
	table.insert(self._childKeyList, child:GetKey())
	if not table.ContainsValue(self._childClassNameList, child._className) then
		table.insert(self._childClassNameList, child._className)
	end
end

----------------------------------------------------------------------
-- child相关 GetChild
----------------------------------------------------------------------
---@param childKey string
---@return AbstractEntity
function AbstractEntity:GetChild(childKey)
	if not self._keyToChildDict[childKey] then
		return nil
	end
	if self._keyToChildDict[childKey]:IsDestroyed() then
		return nil
	end
	return self._keyToChildDict[childKey]
end

---@param childClassType Class
---@return AbstractEntity
function AbstractEntity:GetChildByType(childClassType)
	for _, child in self:ForeachChildOfType(childClassType) do
		return child
	end
	return nil
end

--效率问题引入的
---@param childClassType Class
---@return AbstractEntity
function AbstractEntity:GetChildStrictlyByType(childClassType)
	if not self._classNameToChildListDict[childClassType._className] then
		return
	end
	for _, child in ipairs(self._classNameToChildListDict[childClassType._className]) do
		if not child:IsDestroyed() then
			return child
		end
	end
	return nil
end

---@param childClassType Class
---@return AbstractEntity[]
function AbstractEntity:GetChildrenByType(childClassType)
	---@type AbstractEntity[]
	local result = {}
	for _, child in self:ForeachChildOfType(childClassType) do
		table.insert(result, child)
	end
	return result
end

---@param childClassType Class
---@return AbstractEntity[]
function AbstractEntity:GetChildrenStrictlyByType(childClassType)
	---@type AbstractEntity[]
	local result = {}
	if not self._classNameToChildListDict[childClassType._className] then
		return result
	end
	for _, child in self._classNameToChildListDict[childClassType._className] do
		if not child:IsDestroyed() then
			table.insert(result, child)
		end
	end
	return result
end

----------------------------------------------------------------------
-- child相关 RemoveChild
----------------------------------------------------------------------
---@param childKey string
---@return AbstractEntity
function AbstractEntity:RemoveChild(childKey)
	if not self._keyToChildDict[childKey] then
		return nil
	end
	local child = self._keyToChildDict[childKey]
	return self:RemoveChild2(child)
end

---@param child AbstractEntity
---@return AbstractEntity
function AbstractEntity:RemoveChild2(child)
	if child:IsDestroyed() then
		return nil
	end
	child:Destroy()
	if not self._isNotDeleteChildRelationShipImmediately then
		self:_RemoveChildRelationship(child)
		self:_DespawnChildKey(child)
		PoolCatManagerUtil:Despawn(child)
	else
		self:MarkHasDestroyedChild()
	end
	return child
end

---@param childClassType Class
---@return AbstractEntity
function AbstractEntity:RemoveChildByType(childClassType)
	local child = self:GetChildByType(childClassType)
	if child ~= nil then
		self:RemoveChild2(child)
	end
	return child
end

---@param childClassType Class
---@return AbstractEntity
function AbstractEntity:RemoveChildStrictlyByType(childClassType)
	local child = self:GetChildStrictlyByType(childClassType)
	if child ~= nil then
		self:RemoveChild2(child)
	end
	return child
end

---@param childClassType Class
---@return AbstractEntity
function AbstractEntity:RemoveChildrenByType(childClassType)
	local children = self:GetChildrenByType(childClassType)
	if not table.IsNilOrEmpty(children) then
		for _, child in ipairs(children) do
			self:RemoveChild2(child)
		end
	end
	return children
end

---@param childClassType Class
---@return AbstractEntity
function AbstractEntity:RemoveChildrenStrictlyByType(childClassType)
	local children = self:GetChildrenStrictlyByType(childClassType)
	if not table.IsNilOrEmpty(children) then
		for _, child in ipairs(children) do
			self:RemoveChild2(child)
		end
	end
	return children
end

function AbstractEntity:RemoveAllChildren()
	local toRemoveChildKeyList = table.Clone(self._childKeyList)
	for _, childKey in ipairs(toRemoveChildKeyList) do
		self:RemoveChild(childKey)
	end
end

----------------------------------------------------------------------
--
----------------------------------------------------------------------
function AbstractEntity:MarkHasDestroyedChild()
	if not self._isHasDestroyedChild then
		self._isHasDestroyedChild = true
		if self._parent then
			self._parent:MarkHasDestroyedChild()
		end
	end
end

---@param child AbstractEntity
function AbstractEntity:_RemoveChildRelationship(child)
	self._keyToChildDict[child:GetKey()] = nil
	table.RemoveByValue_Array(self._childKeyList, child:GetKey())
	table.RemoveByValue_Array(self._classNameToChildListDict[child._className], child)
end

---@param child AbstractEntity
function AbstractEntity:_DespawnChildKey(child)
	if child:IsKeyUsingParentIdPool() then
		self._childKeyIdPool:Despawn(child:GetKey())
		child:SetIsKeyUsingParentIdPool(false)
	end
end

function AbstractEntity:CheckDestroyed()
	--有【子孙】child中有要从child_key_list和children_dict中删除关联关系
	--或者有【子孙】child的component要从从component_list和component_dict中删除关联关系
	if self._isHasDestroyedChild or self._isHasDestroyedChildComponent then
		local childKey
		---@type AbstractEntity
		local child
		for i = #self._childKeyList, 1, -1 do
			childKey = self._childKeyList[i]
			child = self._keyToChildDict[childKey]
			child:CheckDestroyed()
			if child:IsDestroyed() then
				-- 该child自身要被delete
				self:_RemoveChildRelationship(child)
				self:_DespawnChildKey(child)
				PoolCatManagerUtil.Despawn(child)
			end
		end

		self._isHasDestroyedChild = false
		self._isHasDestroyedChildComponent = false
	end

	if self._isHasDestroyedComponent then
		self:_CheckDestroyedComponents()
		self._isHasDestroyedComponent = false
	end
end

----------------------------------------------------------------------
-- component相关 ForeachComponent 按加入的顺序遍历
----------------------------------------------------------------------
-- 按加入的顺序遍历
function AbstractEntity:ForeachComponent()
	return self._ForeachComponent, { keyToComponentDict = self._keyToComponentDict, componentKeyList = self._componentKeyList, count = #self._componentKeyList }, 0
end

-- 按加入的顺序遍历
---@param i number
function AbstractEntity._ForeachComponent(componentInfo, i)
	---@type AbstractComponent
	local component
	local componentKeyList = componentInfo.componentKeyList
	local keyToComponentDict = componentInfo.keyToComponentDict
	local count = componentInfo.count
	while i < count do
		i = i + 1
		local componentKey = componentKeyList[i]
		component = keyToComponentDict[componentKey]
		if not component:IsDestroyed() then
			return i, component
		end
	end
end

function AbstractEntity:ForeachComponentOfType(componentClassType)
	return self._ForeachComponentOfType, { keyToComponentDict = self._keyToComponentDict, componentKeyList = self._componentKeyList, count = #self._componentKeyList, componentClassType = componentClassType }, 0
end

---@param i number
function AbstractEntity._ForeachComponentOfType(componentInfo, i)
	---@type AbstractComponent
	local component
	local componentKeyList = componentInfo.componentKeyList
	local keyToComponentDict = componentInfo.keyToComponentDict
	local count = componentInfo.count
	local componentClassType = componentInfo.componentClassType
	while i < count do
		i = i + 1
		local componentKey = componentKeyList[i]
		component = keyToComponentDict[componentKey]
		if not component:IsDestroyed() and IsSubClassOf(component._className, componentClassType._className) then
			return i, component
		end
	end
end

function AbstractEntity:_OnDespawn_Component()
	table.Clear(self._keyToComponentDict)
	table.Clear(self._classNameToComponentListDict)
	table.Clear(self._componentKeyList)
	table.Clear(self._componentClassNameList)
end

----------------------------------------------------------------------
-- component相关 AddComponent
----------------------------------------------------------------------
---@param componentKey string
---@param componentClassType Class
---@return AbstractComponent
function AbstractEntity:AddComponentWithoutInit(componentKey, componentClassType)
	---@type AbstractComponent
	local component = PoolCatManagerUtil.Spawn(componentClassType)
	return self:AddComponent2(component, componentKey)
end

---@param component AbstractComponent
---@param componentKey string
---@return AbstractComponent
function AbstractEntity:AddComponent2(component, componentKey)
	if componentKey then
		component:SetKey(componentKey)
	end
	if component:GetKey() and self._keyToComponentDict[component:GetKey()] then
		Error("duplicate add component:", component:GetKey(), component._className)
		return nil
	end

	local isKeyUsingParentIdPool = not componentKey
	if isKeyUsingParentIdPool then
		componentKey = tostring(self._componentKeyIdPool:Get())
		--再次检查键值
		if componentKey and self._keyToComponentDict[componentKey] then
			Error("duplicate add component:", componentKey, component._className)
			return nil
		end
	end
	component:SetKey(componentKey)
	component:SetIsKeyUsingParentIdPool(isKeyUsingParentIdPool)
	component:SetEntity(self)

	self:_AddComponentRelationship(component)
	return component
end

---@param componentKey string
---@param componentClassType Class
function AbstractEntity:AddComponent(componentKey, componentClassType, ...)
	local component = self:AddComponentWithoutInit(componentKey, componentClassType)
	if not component then
		--没有加成功
		return nil
	end
	component:Init(...)
	component.PostInit()
	component:SetIsEnabled(true)
	return component
end

---@param component AbstractComponent
function AbstractEntity:_AddComponentRelationship(component)
	self._keyToComponentDict[component:GetKey()] = component
	local classNameToComponentList = table.GetOrAddDefault_Dict(self._classNameToComponentListDict, component._className, function()
		return {}
	end)
	table.insert(classNameToComponentList, component)
	table.insert(self._componentKeyList, component:GetKey())
	if not table.ContainsValue(self._componentClassNameList, component._className) then
		table.insert(self._componentClassNameList, component._className)
	end
end

----------------------------------------------------------------------
-- component相关 GetComponent
----------------------------------------------------------------------
---@param componentKey string
---@return AbstractComponent
function AbstractEntity:GetComponent(componentKey)
	if not self._keyToComponentDict[componentKey] then
		return nil
	end
	if self._keyToComponentDict[componentKey]:IsDestroyed() then
		return nil
	end
	return self._keyToComponentDict[componentKey]
end

---@param componentClassType Class
---@return AbstractEntity
function AbstractEntity:GetComponentByType(componentClassType)
	for _, component in self:ForeachComponentOfType(componentClassType) do
		return component
	end
	return nil
end

function AbstractEntity:GetComponentStrictlyByType(componentClassType)
	if not self._classNameToComponentListDict[componentClassType._className] then
		return nil
	end
	for _, component in self._classNameToComponentListDict[componentClassType._className] do
		if not component:IsDestroyed() then
			return component
		end
	end
	return nil
end

---@param componentClassType Class
---@return AbstractEntity[]
function AbstractEntity:GetComponentsByType(componentClassType)
	---@type AbstractEntity[]
	local result = {}
	for _, component in self:ForeachComponentOfType(componentClassType) do
		table.insert(result, component)
	end
	return result
end

---@param componentClassType Class
---@return AbstractEntity[]
function AbstractEntity:GetComponentsStrictlyByType(componentClassType)
	---@type AbstractEntity[]
	local result = {}
	if not self._classNameToComponentListDict[componentClassType._className] then
		return result
	end
	for _, component in self._classNameToComponentListDict[componentClassType._className] do
		if not component:IsDestroyed() then
			table.insert(result, component)
		end
	end
	return result
end
----------------------------------------------------------------------
-- component相关 RemoveComponent
----------------------------------------------------------------------
---@param componentKey string
---@return AbstractComponent
function AbstractEntity:RemoveComponent(componentKey)
	if not self._keyToComponentDict[componentKey] then
		return nil
	end
	local component = self._keyToComponentDict[componentKey]
	return self:RemoveComponent2(component)
end

---@generic T:AbstractComponent
---@param component T
---@return T
function AbstractEntity:RemoveComponent2(component)
	if component:IsDestroyed() then
		return nil
	end
	component:Destroy()
	if not self._isNotDeleteComponentRelationShipImmediately then
		self:_RemoveComponentRelationship(component)
		self:_DespawnComponentKey(component)
		PoolCatManagerUtil.Despawn(component)
	else
		self:_MarkHasDestroyedComponent()
	end
	return component
end

---@param componentClassType AbstractComponent
function AbstractEntity:RemoveComponentByType(componentClassType)
	local component = self:GetComponentByType(componentClassType)
	if component then
		self:RemoveComponent2(component)
	end
	return component
end

---@param componentClassType AbstractComponent
function AbstractEntity:RemoveComponentStrictlyByType(componentClassType)
	local component = self:GetComponentStrictlyByType(componentClassType)
	if component then
		self:RemoveComponent2(component)
	end
	return component
end

---@param componentClassType Class @如 require("LuaCat.ECS.Component.Impl.AbstractObjectComponent")
---@return AbstractComponent
function AbstractEntity:RemoveComponentsByType(componentClassType)
	local components = self:GetComponentsByType(componentClassType)
	if not table.IsNilOrEmpty(components) then
		for _, component in ipairs(components) do
			self:RemoveComponent2(component)
		end
	end
	return components
end

---@param componentClassType Class @如 require("LuaCat.ECS.Component.Impl.AbstractObjectComponent")
---@return AbstractComponent
function AbstractEntity:RemoveComponentsStrictlyByType(componentClassType)
	local components = self:GetComponentsStrictlyByType(componentClassType)
	if not table.IsNilOrEmpty(components) then
		for _, component in ipairs(components) do
			self:RemoveComponent2(component)
		end
	end
	return components
end

function AbstractEntity:RemoveAllComponents()
	local toRemoveComponentKeyList = table.Clone(self._componentKeyList)
	for _, componentKey in ipairs(toRemoveComponentKeyList) do
		self:RemoveComponent(componentKey)
	end
end

----------------------------------------------------------------------
--
----------------------------------------------------------------------
function AbstractEntity:_MarkHasDestroyedComponent()
	if not self._isHasDestroyedComponent then
		self._isHasDestroyedComponent = true
		if self._parent then
			self._parent:MarkHasDestroyedChildComponent()
		end
	end
end

function AbstractEntity:MarkHasDestroyedChildComponent()
	if not self._isHasDestroyedChildComponent then
		self._isHasDestroyedChildComponent = true
		if self._parent then
			self._parent:MarkHasDestroyedChildComponent()
		end
	end
end

---@param component AbstractComponent
function AbstractEntity:_RemoveComponentRelationship(component)
	self._keyToComponentDict[component:GetKey()] = nil
	table.RemoveByValue_Array(self._classNameToComponentListDict[component._className], component)
	table.RemoveByValue_Array(self._componentKeyList, component:GetKey())
end

---@param component AbstractComponent
function AbstractEntity:_DespawnComponentKey(component)
	if component._isKeyUsingParentIdPool then
		self._componentKeyIdPool:Despawn(component:GetKey())
		component:SetIsKeyUsingParentIdPool(false)
	end
end

--主要作用是将IsDestroyed的component从componentList和componentDict中删除
function AbstractEntity:_CheckDestroyedComponents()
	---@type AbstractComponent
	local component
	local componentKey
	for i = #self._componentKeyList, 1, -1 do
		componentKey = self._componentKeyList[i]
		component = self._keyToComponentDict[componentKey]
		if component:IsDestroyed() then
			self:_RemoveComponentRelationship(component)
			self:_DespawnComponentKey(component)
			PoolCatManagerUtil.Despawn(component)
		end
	end
end

----------------------------------------------------------------------
-- Update相关
----------------------------------------------------------------------
function AbstractEntity:IsCanUpdate()
	return self:IsEnabled() and not self:IsPaused() and not self:IsDestroyed()
end


----------------------------------------------------------------------
-- pause相关
----------------------------------------------------------------------

function AbstractEntity:SetIsPaused(isPaused, isLoopChildren)
	if self:IsPaused() == isPaused then
		return
	end
	self._isPaused = isPaused
	if isLoopChildren then
		self:SetAllChildrenIsPaused(isPaused)
	end
	self:SetAllComponentsIsPaused(isPaused)
	self:_SetIsPaused(isPaused)
end

function AbstractEntity:_SetIsPaused(isPaused)
end

function AbstractEntity:SetAllChildrenIsPaused(isPaused)
	for _, child in self:ForeachChild() do
		child:SetIsPaused(isPaused, true)
	end
end

function AbstractEntity:SetAllComponentsIsPaused(isPaused)
	for _, component in self:ForeachComponent() do
		component:SetIsPaused(isPaused)
	end
end

function AbstractEntity:IsPaused()
	return self._isPaused or false
end

function AbstractEntity:_OnDespawn_Pause()
	self._isPaused = false
end

----------------------------------------------------------------------
-- Enable相关
----------------------------------------------------------------------
---@param isEnabled boolean
function AbstractEntity:SetIsEnabled(isEnabled, isLoopChildren)
	if self:IsEnabled() == isEnabled then
		return
	end
	if isLoopChildren then
		for _, child in self:ForeachChild() do
			child:SetIsEnabled(isEnabled, true)
		end
	end
	for _, component in self:ForeachComponent() do
		component:SetIsEnabled(isEnabled)
	end

	self._isEnabled = isEnabled
	self:_SetIsEnabled(isEnabled)
	if isEnabled then
		self:OnEnable()
	else
		self:OnDisable()
	end
end

function AbstractEntity:_SetIsEnabled(isEnabled)
end

function AbstractEntity:IsEnabled()
	return self._isEnabled or false
end

function AbstractEntity:OnEnable()
end

function AbstractEntity:OnDisable()
end

function AbstractEntity:_OnDespawn_Enable()
	self._isEnabled = false
end

----------------------------------------------------------------------
-- SetGet相关
----------------------------------------------------------------------
function AbstractEntity:GetKey()
	return self._key
end

function AbstractEntity:SetKey(key)
	self._key = key
end

function AbstractEntity:SetIsKeyUsingParentIdPool(isKeyUsingParentIdPool)
	self._isKeyUsingParentIdPool = isKeyUsingParentIdPool
end

function AbstractEntity:IsKeyUsingParentIdPool()
	return self._isKeyUsingParentIdPool
end

function AbstractEntity:SetParent(parent)
	self._parent = parent
end

function AbstractEntity:SetIsNotDeleteChildRelationShipImmediately(isNotDeleteChildRelationShipImmediately)
	self._isNotDeleteChildRelationShipImmediately = isNotDeleteChildRelationShipImmediately
end

function AbstractEntity:SetIsNotDeleteComponentRelationShipImmediately(isNotDeleteComponentRelationShipImmediately)
	self._isNotDeleteComponentRelationShipImmediately = isNotDeleteComponentRelationShipImmediately
end

function AbstractEntity:GetParent()
	return self._parent
end

----------------------------------------------------------------------
-- Reset相关
----------------------------------------------------------------------
---@param isLoopChildren boolean
function AbstractEntity:Reset(isLoopChildren)
	if isLoopChildren then
		self:ResetAllChildren()
	end
	self:ResetAllComponents()
	self:_Reset()
	self:_PostReset()
end

function AbstractEntity:_Reset()
end

function AbstractEntity:_PostReset()
	DelegateUtil.InvokeCallback(self._resetCallback)
	self._resetCallback = {}
end

function AbstractEntity:ResetAllChildren()
	for _, child in self:ForeachChild() do
		child:Reset(true)
	end
end

function AbstractEntity:ResetAllComponents()
	for _, component in self:ForeachComponent() do
		component:Reset()
	end
end

function AbstractEntity:_OnDespawn_Reset()
	self._resetCallback = nil
end

----------------------------------------------------------------------
-- Destroy相关
----------------------------------------------------------------------
function AbstractEntity:IsDestroyed()
	return self._isDestroyed or false
end

function AbstractEntity:Destroy()
	if self:IsDestroyed() then
		return
	end
	self:RemoveAllChildren()
	self:SetIsEnabled(false, false)
	self:SetIsPaused(false, false)
	self:RemoveAllComponents()
	self:_Destroy()
	self._isDestroyed = true
	self:_PostDestroy()
	self._cache:Clear()
end

function AbstractEntity:_Destroy()

end

function AbstractEntity:_PostDestroy()
	DelegateUtil.InvokeCallback(self._destroyCallback)
	self._destroyCallback = {}
end

function AbstractEntity:_OnDespawn_Destroy()
	self._isDestroyed = false
	self._key = nil
end

function AbstractEntity:OnDespawn()
	self:_OnDespawn_()
	self:_OnDespawn_Child()
	self:_OnDespawn_Component()
	self:_OnDespawn_Destroy()
	self:_OnDespawn_Enable()
	self:_OnDespawn_Pause()
	self:_OnDespawn_Reset()
end

return AbstractEntity