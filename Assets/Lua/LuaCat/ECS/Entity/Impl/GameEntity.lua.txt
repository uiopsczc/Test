---@class GameEntity:AbstractEntity
local GameEntity = Class("GameEntity", AbstractEntity)

function GameEntity:Init(...)
	GameEntity.super.Init(self, ...)
	self._allAssetsLoadDoneCallback = {}

	---@type ResLoadComponent
	self._resLoadComponent = self:AddComponent(nil, ResLoadComponent, ResLoad.New())
	---@type TimerManagerPluginComponent
	self._timerManagerPluginComponent = self:AddComponent(nil, TimerManagerPluginComponent, TimerManagerPlugin.New(self:GetTimerManager()))
	---@type CoroutinePluginComponent
	self._coroutinePluginComponent = self:AddComponent(nil, CoroutinePluginComponent, CoroutinePlugin.New(self:GetTimerManager()))
	---@type DOTweenPluginComponent
	self._dotweenPluginComponent = self:AddComponent(nil, DOTweenPluginComponent, DOTweenPlugin.New())

	---@type GraphicComponent
	self._graphicComponent = self:CreateGraphicComponent()
end

---@return GraphicComponent
function GameEntity:CreateGraphicComponent()
	return self:AddComponent(nil, GraphicComponent, self._resLoadComponent)
end

function GameEntity:PostInit()
	GameEntity.super.PostInit(self)
	self._graphicComponent:LoadPrefabPath()
	self:PreLoadAssets()
	self:CheckIsAllAssetsLoadDone()
end

function GameEntity:GetGuid()
	return self._key
end

----------------------------------------------------------------------
-- CoroutinePluginComponent
----------------------------------------------------------------------
function GameEntity:StartCoroutine(key, func, ...)
	self._coroutinePluginComponent:StartCoroutine(key, func, ...)
end

function GameEntity:StopCoroutine(keyOrCo)
	self._coroutinePluginComponent:StopCoroutine(keyOrCo)
end

function GameEntity:StopAllCoroutines()
	self._coroutinePluginComponent:StopAllCoroutines()
end

function GameEntity:WaitForFixedUpdate()
	return self._coroutinePluginComponent:WaitForFixedUpdate()
end

function GameEntity:WaitForFrames(frames)
	return self._coroutinePluginComponent:WaitForFrames(frames)
end

function GameEntity:WaitForSeconds(seconds)
	return self._coroutinePluginComponent:WaitForSeconds(seconds)
end

function GameEntity:WaitForAsyncOp(asyncOperation, callback)
	return self._coroutinePluginComponent:WaitForSeconds(asyncOperation, callback)
end

function GameEntity:WaitUntil(func, ...)
	return self._coroutinePluginComponent:WaitUntil(func, ...)
end

function GameEntity:WaitWhile(func, ...)
	return self._coroutinePluginComponent:WaitWhile(func, ...)
end

function GameEntity:WaitForEndOfFrame()
	return self._coroutinePluginComponent:WaitForEndOfFrame()
end

function GameEntity:YieldBreak(...)
	return self._coroutinePluginComponent:YieldBreak(...)
end

function GameEntity:YieldStart(func, callback, ...)
	return self._coroutinePluginComponent:YieldStart(func, callback, ...)
end

function GameEntity:YieldCallback(childCo, ...)
	return self._coroutinePluginComponent:YieldCallback(childCo, ...)
end

function GameEntity:YieldReturn(...)
	return self._coroutinePluginComponent:YieldReturn(...)
end

----------------------------------------------------------------------
-- DOTweenPluginComponent
----------------------------------------------------------------------
---@param key string
---@return CS.DG.Tweening.Sequence
function GameEntity:AddDOTweenSequence(key)
	return self._dotweenPluginComponent:AddDOTweenSequence(key)
end

---@param key string
---@param tween CS.DG.Tweening.Tween
---@return CS.DG.Tweening.Tween
function GameEntity:AddDOTween(key, tween)
	return self._dotweenPluginComponent:AddDOTween(key, tween)
end

---@param keyOrTween CS.DG.Tweening.Tween||string
function GameEntity:RemoveDOTween(keyOrTween)
	self._dotweenPluginComponent:RemoveDOTween(keyOrTween)
end

function GameEntity:RemoveAllDOTweens()
	self._dotweenPluginComponent:RemoveAllDOTweens()
end


----------------------------------------------------------------------
-- EventDispatcherPlugin
----------------------------------------------------------------------
---@return EventDispatcherPlugin
function GameEntity:GetEventDispatcherPlugin()
	if not self._eventDispatcherPlugin then
		self._eventDispatcherPlugin = EventDispatcherPlugin.New(global.client.eventDispatcher)
	end
	return self._eventDispatcherPlugin
end

---@return EventListener
function GameEntity:AddListener(eventName, handler)
	return self:GetEventDispatcherPlugin():AddListener(eventName, handler)
end

---@return EventListener
-- ... 包含3种情况
-- 情况1 只有一个listener
-- 情况2 只有一个handler
-- 情况3 有一个eventName和一个handler
function GameEntity:RemoveListener(...)
	return self:GetEventDispatcherPlugin():RemoveListener(...)
end

function GameEntity:RemoveAllListeners()
	self:GetEventDispatcherPlugin():RemoveAllListeners()
end

function GameEntity:Broadcast(eventName, ...)
	self:GetEventDispatcherPlugin():Broadcast(eventName, ...)
end

----------------------------------------------------------------------
-- timerManagerPluginComponent
----------------------------------------------------------------------
function GameEntity:GetTimerManager()
	return self._parent:GetTimerManager()
end

function GameEntity:AddTimer(targetFunc, targetFuncArgs, delay, interval, updateMode, isUseUnscaledDeltaTime, isCoroutineTimer, isUseFrame)
	return self._timerManagerPluginComponent:AddTimer(targetFunc, targetFuncArgs, delay, interval, updateMode, isUseUnscaledDeltaTime, isCoroutineTimer, isUseFrame)
end

function GameEntity:AddCoTimer(targetFunc, targetFuncArgs, delay, interval, updateMode, isUseUnscaledDeltaTime, isUseFrame)
	return self._timerManagerPluginComponent:AddCoTimer(targetFunc, targetFuncArgs, delay, interval, updateMode, isUseUnscaledDeltaTime, isUseFrame)
end

function GameEntity:AddUpdateTimer(targetFunc, targetFuncArgs, delay, interval, isUseUnscaledDeltaTime, isUseFrame)
	return self._timerManagerPluginComponent:AddUpdateTimer(targetFunc, targetFuncArgs, delay, interval, isUseUnscaledDeltaTime, isUseFrame)
end
function GameEntity:AddFixedUpdateTimer(targetFunc, targetFuncArgs, delay, interval, isUseUnscaledDeltaTime, isUseFrame)
	return self._timerManagerPluginComponent:AddFixedUpdateTimer(targetFunc, targetFuncArgs, delay, interval, isUseUnscaledDeltaTime, isUseFrame)
end
function GameEntity:AddLateUpdateTimer(targetFunc, targetFuncArgs, delay, interval, isUseUnscaledDeltaTime, isUseFrame)
	return self._timerManagerPluginComponent:AddLateUpdateTimer(targetFunc, targetFuncArgs, delay, interval, isUseUnscaledDeltaTime, isUseFrame)
end

function GameEntity:AddCoUpdateTimer(targetFunc, targetFuncArgs, delay, interval, isUseUnscaledDeltaTime, isUseFrame)
	return self._timerManagerPluginComponent:AddCoUpdateTimer(targetFunc, targetFuncArgs, delay, interval, isUseUnscaledDeltaTime, isUseFrame)
end
function GameEntity:AddCoFixedUpdateTimer(targetFunc, targetFuncArgs, delay, interval, isUseUnscaledDeltaTime, isUseFrame)
	return self._timerManagerPluginComponent:AddCoFixedUpdateTimer(targetFunc, targetFuncArgs, delay, interval, isUseUnscaledDeltaTime, isUseFrame)
end
function GameEntity:AddCoLateUpdateTimer(targetFunc, targetFuncArgs, delay, interval, isUseUnscaledDeltaTime, isUseFrame)
	return self._timerManagerPluginComponent:AddCoLateUpdateTimer(targetFunc, targetFuncArgs, delay, interval, isUseUnscaledDeltaTime, isUseFrame)
end

function GameEntity:RemoveTimer(timer)
	return self._timerManagerPluginComponent:RemoveTimer(timer)
end

function GameEntity:RemoveAllTimers()
	self._timerManagerPluginComponent:RemoveAllTimers()
end

----------------------------------------------------------------------
-- Assets
----------------------------------------------------------------------
--- 只会被触发一次
function GameEntity:InvokeAfterAllAssetsLoadDone(callback)
	if self._isAllAssetsLoadDone then
		callback()
	else
		table.insert(self._allAssetsLoadDoneCallback, callback)
	end
end

function GameEntity:PreLoadAssets()
	--self.resLoadComponent.LoadAssetAsync("resPath")
end

function GameEntity:CheckIsAllAssetsLoadDone()
	self:StartCoroutine(nil, function()
		self:WaitUntil(function()
			return self._resLoadComponent:IsAllLoadDone()
		end)
		if not string.IsNilOrEmpty(self._graphicComponent._prefabPath) then
			self:WaitUntil(function()
				return self._graphicComponent:IsLoadDone()
			end)
		end
		self:OnAllAssetsLoadDone()
	end)
end

function GameEntity:OnAllAssetsLoadDone()
	self:Broadcast(string.ToEventName(ECSEventNameConst.OnAllAssetsLoadDone, self))
	self._isAllAssetsLoadDone = true
	DelegateUtil.InvokeCallback(self._allAssetsLoadDoneCallback)
	self._allAssetsLoadDoneCallback = nil
end

----------------------------------------------------------------------
-- gameObject
----------------------------------------------------------------------
function GameEntity:InstantiateGameObject(prefab)
	return GameObject.Instantiate(prefab)
end

function GameEntity:InitGameObjectChildren()
end


----------------------------------------------------------------------
-- Pause
----------------------------------------------------------------------
---@param isPaused boolean
function GameEntity:_SetIsPaused(isPaused)
	GameEntity.super._SetIsPaused(self, isPaused)
end

----------------------------------------------------------------------
-- _Reset
----------------------------------------------------------------------
function GameEntity:_Reset()
	GameEntity.super._Reset(self)
	self:RemoveAllListeners()
	self._allAssetsLoadDoneCallback = {}
end

----------------------------------------------------------------------
-- SetGet相关
----------------------------------------------------------------------
function GameEntity:GetGraphicComponent()
	return self._graphicComponent
end

----------------------------------------------------------------------
-- __Destroy
----------------------------------------------------------------------
function GameEntity:_Destroy()
	GameEntity.super._Destroy(self)
	self:RemoveAllListeners()

	self._parent = nil
	self._resLoadComponent = nil
	self._coroutinePluginComponent = nil
	self._timerManagerPluginComponent = nil
	self._graphicComponent = nil

	self._isAllAssetsLoadDone = false
	self._allAssetsLoadDoneCallback = {}
end

return GameEntity