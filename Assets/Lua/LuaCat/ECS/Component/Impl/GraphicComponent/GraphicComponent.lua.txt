---@class GraphicComponent:GameComponent
local GraphicComponent = Class("GraphicComponent", GameComponent)

-----注意创建后记得设置key和entity
---@param resLoadComponent ResLoadComponent
function GraphicComponent:Init(resLoadComponent)
	GraphicComponent.super.Init(self)
	---@type GameObjectEntity
	self._gameObjectEntity = self:GetEntity()
	---@type ResLoadComponentPlugin
	self._resLoadComponentPlugin = ResLoadComponentPlugin.New(resLoadComponent)
	if self:GetEntity()._className == "Client" then
		return
	end
end


----------------------------------------------------------------------
-- gameObject相关
----------------------------------------------------------------------
function GraphicComponent:InstantiateGameObject(prefab)
	return GameObject.Instantiate(prefab)
end

function GraphicComponent:InitGameObjectChildren()
	self._gameObjectEntity:InitGameObjectChildren()
end

function GraphicComponent:OnSetGameObjectFinished()
	self:InitGameObjectChildren()
	self._gameObjectEntity:ApplyTransformComponent()
end

function GraphicComponent:DestroyGameObject()
	if self._gameObject and not self._isNotDestroyGameObject then
		self._gameObject:Destroy()
		self:SetGameObject(nil)
	end
end

----------------------------------------------------------------------
-- prefab相关
----------------------------------------------------------------------
function GraphicComponent:LoadPrefab()
	if self._prefabPath then
		self._isLoadDone = false
		self._prefabAssetCat = self._resLoadComponentPlugin:GetOrLoadAsset(self._prefabPath, nil, nil, function()
			self._isLoadDone = true
		end, self)
	else
		self._isLoadDone = true
	end
end

function GraphicComponent:CheckIsLoadDone()
	self:StartCoroutine("loadPrefab", function()
		self:WaitUntil(function()
			return self:IsLoadDone()
		end)
		self:OnAssetsLoadDone()
	end)
end

function GraphicComponent:OnAssetsLoadDone()
	if self._prefabPath then
		self._prefab = self._prefabAssetCat:Get(string.GetSubAssetPath(self._prefabPath))
		if IsGameObject(self._prefab) then
			self._gameObjectEntity:SetIsShow(self._prefab.activeSelf)
			local clone = self:InstantiateGameObject(self._prefab)
			clone.name = self._prefab.name
			clone.transform:CopyFrom(self._prefab.transform)
			self:SetGameObject(clone)
		end
	end
end

----------------------------------------------------------------------
-- SetGet相关
----------------------------------------------------------------------
function GraphicComponent:GetGameObject()
	return self._gameObject
end

function GraphicComponent:GetTransform()
	return self._transform
end

function GraphicComponent:GetRectTransform()
	return self._rectTransform
end

---@param parentTransform CS.UnityEngine.Transform
function GraphicComponent:SetParentTransform(parentTransform)
	if self._transform then
		self._transform:SetParent(parentTransform, self._gameObject.layer ~= LayerMask.NameToLayer("UI"))
	end
end

function GraphicComponent:SetGameObject(gameObject, isNotDestroyGameObject)
	if not gameObject then
		self._gameObject = nil
		self._transform = nil
		self._rectTransform = nil
		return
	end
	---@type CS.UnityEngine.GameObject
	self._gameObject = gameObject
	---@type CS.UnityEngine.Transform
	self._transform = self._gameObject.transform
	---@type CS.UnityEngine.RectTransform
	self._rectTransform = self._gameObject:GetComponent(typeof(CS.UnityEngine.RectTransform))
	if isNotDestroyGameObject ~= nil then
		self._isNotDestroyGameObject = isNotDestroyGameObject
	end
	self:OnSetGameObjectFinished()
end

function GraphicComponent:IsLoadDone()
	return self._isLoadDone
end

function GraphicComponent:SetPrefabPath(prefabPath)
	self._prefabPath = prefabPath
	self:OnSetPrefabPath()
end

function GraphicComponent:OnSetPrefabPath()
	self._isLoadDone = self._prefabPath == nil
end

function GraphicComponent:GetPrefabPath()
	return self._prefabPath
end

function GraphicComponent:SetIsShow(isShow)
	if self._gameObject then
		self._gameObject:SetActive(isShow)
	end
end

function GraphicComponent:SetPosition(pos)
	if self._transform then
		self._transform.position = pos
	end
end

function GraphicComponent:SetEulerAngles(eulerAngles)
	if self._transform then
		self._transform.eulerAngles = eulerAngles
	end
end

function GraphicComponent:SetRotation(rotation)
	if self._transform then
		self._transform.rotation = rotation
	end
end

---@param scale number
function GraphicComponent:SetScale(scale)
	if self._transform then
		self._transform.scale = scale
	end
end

function GraphicComponent:SetLocalPosition(localPosition)
	if self._transform then
		self._transform.localPosition = localPosition
	end
end

function GraphicComponent:SetLocalEulerAngles(localEulerAngles)
	if self._transform then
		self._transform.localEulerAngles = localEulerAngles
	end
end

function GraphicComponent:SetLocalRotation(localRotation)
	if self._transform then
		self._transform.localRotation = localRotation
	end
end

---@param localScale number
function GraphicComponent:SetLocalScale(localScale)
	if self._transform then
		self._transform.localScale = localScale
	end
end

function GraphicComponent:GetResLoadComponentPlugin()
	return self._resLoadComponentPlugin
end

function GraphicComponent:GetGameObjectEntity()
	return self._gameObjectEntity
end

----------------------------------------------------------------------
-- _Reset
----------------------------------------------------------------------
function GraphicComponent:_Reset()
	GraphicComponent.super._Reset(self)
	self._resLoadComponentPlugin:Destroy()
	self:DestroyGameObject()
end

----------------------------------------------------------------------
-- __Destroy
----------------------------------------------------------------------
function GraphicComponent:_Destroy()
	GraphicComponent.super._Destroy(self)
	self._resLoadComponentPlugin:Destroy()
	self:DestroyGameObject()

	self._resLoadComponentPlugin = nil

	self._gameObject = nil
	self._transform = nil
	self._rectTransform = nil
	self._isNotDestroyGameObject = false
	self._prefab = nil
	self._prefabPath = nil
	self._prefabAssetCat = nil

	self._isLoadDone = false
end

return GraphicComponent