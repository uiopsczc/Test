---@class GraphicComponent:GameComponent
local GraphicComponent = Class("GraphicComponent", GameComponent)

-----注意创建后记得设置key和entity
---@param resLoadComponent ResLoadComponent
function GraphicComponent:Init(resLoadComponent)
	GraphicComponent.super.Init(self)
	---@type GameEntity
	self._gameEntity = self:GetEntity()
	---@type ResLoadComponentPlugin
	self._resLoadComponentPlugin = ResLoadComponentPlugin.New(resLoadComponent)
	if self:GetEntity()._className == "Client" then
		return
	end
	self:AddListener(string.ToEventName(ECSEventNameConst.OnAllAssetsLoadDone, self:GetEntity()), function()
		self:OnAllAssetsLoadDone()
	end)
end


----------------------------------------------------------------------
-- gameObject相关
----------------------------------------------------------------------
function GraphicComponent:InstantiateGameObject(prefab)
	return GameObject.Instantiate(prefab)
end

function GraphicComponent:InitGameObjectChildren()
	self._gameEntity:InitGameObjectChildren()
end

function GraphicComponent:OnSetGameObjectFinished()
	self:InitGameObjectChildren()
	self:SetIsShow(not self._isHide)
end

function GraphicComponent:DestroyGameObject()
	if self._gameObject and not self._isNotDestroyGameObject then
		self._gameObject:Destroy()
		self:SetGameObject(nil)
	end
end

----------------------------------------------------------------------
-- prefab相关
----------------------------------------------------------------------
function GraphicComponent:LoadPrefabPath()
	if self._prefabPath then
		self._prefabAssetCat = self._resLoadComponentPlugin:GetOrLoadAsset(self._prefabPath, nil, nil, function()
			self._isLoadDone = true
		end, self)
	end
end

function GraphicComponent:OnAllAssetsLoadDone()
	if self._prefabPath then
		self._prefab = self._prefabAssetCat:Get(string.GetSubAssetPath(self._prefabPath))
		local clone = self:InstantiateGameObject(self._prefab)
		clone.name = self._prefab.name
		clone.transform:CopyFrom(self._prefab.transform)
		self:SetGameObject(clone)
	end

	if self._parentTransform then
		self:SetParentTransform(self._parentTransform)
	end
end

----------------------------------------------------------------------
-- SetGet相关
----------------------------------------------------------------------
function GraphicComponent:GetGameObject()
	return self._gameObject
end

function GraphicComponent:GetTransform()
	return self._transform
end

function GraphicComponent:GetRectTransform()
	return self._rectTransform
end

function GraphicComponent:GetParentTransform()
	return self._parentTransform
end

---@param parentTransform CS.UnityEngine.Transform
function GraphicComponent:SetParentTransform(parentTransform)
	self._parentTransform = parentTransform
	if self._transform then
		self._transform:SetParent(self._parentTransform, self._gameObject.layer ~= LayerMask.NameToLayer("UI"))
	end
end

function GraphicComponent:SetGameObject(gameObject, isNotDestroyGameObject)
	if not gameObject then
		self._gameObject = nil
		self._transform = nil
		self._rectTransform = nil
		return
	end
	---@type CS.UnityEngine.GameObject
	self._gameObject = gameObject
	---@type CS.UnityEngine.Transform
	self._transform = self._gameObject.transform
	---@type CS.UnityEngine.RectTransform
	self._rectTransform = self._gameObject:GetComponent(typeof(CS.UnityEngine.RectTransform))
	if isNotDestroyGameObject ~= nil then
		self._isNotDestroyGameObject = isNotDestroyGameObject
	end
	self:OnSetGameObjectFinished()
end

function GraphicComponent:IsLoadDone()
	return self._isLoadDone
end

function GraphicComponent:SetPrefabPath(prefabPath)
	self._prefabPath = prefabPath
	self._isLoadDone = self._prefabPath == nil
end

function GraphicComponent:SetIsShow(isShow)
	self._isHide = not isShow
	if self._gameObject then
		self._gameObject:SetActive(not self._isHide)
	end
end

function GraphicComponent:IsShow()
	return self._isHide
end
----------------------------------------------------------------------
-- _Reset
----------------------------------------------------------------------
function GraphicComponent:_Reset()
	GraphicComponent.super._Reset(self)
	self._resLoadComponentPlugin:Destroy()
	self:DestroyGameObject()
end

----------------------------------------------------------------------
-- __Destroy
----------------------------------------------------------------------
function GraphicComponent:_Destroy()
	GraphicComponent.super._Destroy(self)
	self._resLoadComponentPlugin:Destroy()
	self:DestroyGameObject()

	self._resLoadComponentPlugin = nil

	self._parentTransform = nil
	self._gameObject = nil
	self._transform = nil
	self._rectTransform = nil
	self._isNotDestroyGameObject = false
	self._prefab = nil
	self._prefabPath = nil
	self._prefabAssetCat = nil

	self._isLoadDone = false
	self._isHide = false
end

return GraphicComponent