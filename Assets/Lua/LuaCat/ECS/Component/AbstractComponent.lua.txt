---@class AbstractComponent:Class
---@field _key string
---@field _isKeyUsingParentIdPool boolean
---@field _entity AbstractEntity
---@field _isPaused boolean
---@field _isDestroyed boolean
---@field _isEnabled boolean
-----注意创建后记得设置key和entity
local AbstractComponent = Class("AbstractComponent")

-----注意创建后记得设置key和entity
function AbstractComponent:Init()
	self._destroyCallback = {}
	self._resetCallback = {}
	---@type Cache
	self._cache = Cache.New()
end

function AbstractComponent:PostInit()
end

function AbstractComponent:_OnDespawn_()
	self._key = nil
	self._entity = nil
	self._isKeyUsingParentIdPool = nil
	self._cache:Clear()
end

----------------------------------------------------------------------
-- Update相关
----------------------------------------------------------------------
function AbstractComponent:IsCanUpdate()
	return self:IsEnabled() and not self:IsPaused() and not self:IsDestroyed()
end

function AbstractComponent:Update(deltaTime, unscaledDeltaTime)
	if not self:IsCanUpdate() then
		return
	end
	self:_Update(deltaTime, unscaledDeltaTime)
end

function AbstractComponent:FixedUpdate(deltaTime, unscaledDeltaTime)
	if not self:IsCanUpdate() then
		return
	end
	self:_FixedUpdate(deltaTime, unscaledDeltaTime)
end

function AbstractComponent:LateUpdate(deltaTime, unscaledDeltaTime)
	if not self:IsCanUpdate() then
		return
	end
	self:_LateUpdate(deltaTime, unscaledDeltaTime)
end

function AbstractComponent:_Update(deltaTime, unscaledDeltaTime)
end

function AbstractComponent:_FixedUpdate(deltaTime, unscaledDeltaTime)
end

function AbstractComponent:_LateUpdate(deltaTime, unscaledDeltaTime)
end


----------------------------------------------------------------------
-- Enable相关
----------------------------------------------------------------------
function AbstractComponent:SetIsEnabled(isEnabled)
	if self:IsEnabled() == isEnabled then
		return
	end
	self._isEnabled = isEnabled
	self:_SetIsEnabled(isEnabled)
	if isEnabled then
		self:OnEnable()
	else
		self:OnDisable()
	end
end

function AbstractComponent:IsEnabled()
	return self._isEnabled or false
end

function AbstractComponent:_SetIsEnabled(is_enabled)
end

function AbstractComponent:OnEnable()
end

function AbstractComponent:OnDisable()
end

function AbstractComponent:_OnDespawn_Enable()
	self._isEnabled = false
end

----------------------------------------------------------------------
-- Pause相关
----------------------------------------------------------------------
function AbstractComponent:SetIsPaused(isPaused)
	if self:IsPaused() == isPaused then
		return
	end
	self._isPaused = isPaused
	self:_SetIsPaused(isPaused)
end

function AbstractComponent:_SetIsPaused(isPaused)

end

function AbstractComponent:IsPaused()
	return self._isPaused or false
end

function AbstractComponent:_OnDespawn_Pause()
	self._isPaused = false
end
----------------------------------------------------------------------
-- Reset相关
----------------------------------------------------------------------
function AbstractComponent:Reset()
	self:_Reset()
	self:_PostReset()
end

function AbstractComponent:_Reset()
end

function AbstractComponent:_PostReset()
	DelegateUtil.InvokeCallback(self._resetCallback)
	self._resetCallback = {}
end

function AbstractComponent:_OnDespawn_Reset()
	self._resetCallback = nil
end
----------------------------------------------------------------------
-- SetGet相关
----------------------------------------------------------------------
function AbstractComponent:GetEntity()
	return self._entity
end

function AbstractComponent:SetEntity(entity)
	self._entity = entity
end

function AbstractComponent:GetKey()
	return self._key
end

function AbstractComponent:SetKey(key)
	self._key = key
end

function AbstractComponent:SetIsKeyUsingParentIdPool(isKeyUsingParentIdPool)
	self._isKeyUsingParentIdPool = isKeyUsingParentIdPool
end

function AbstractComponent:IsKeyUsingParentIdPool()
	return self._isKeyUsingParentIdPool
end

----------------------------------------------------------------------
-- Destroy相关
----------------------------------------------------------------------
function AbstractComponent:IsDestroyed()
	return self._isDestroyed or false
end

function AbstractComponent:Destroy()
	if self:IsDestroyed() then
		return
	end
	self:SetIsEnabled(false)
	self:SetIsPaused(false)
	self:_Destroy()
	self._isDestroyed = true
	self:_PostDestroy()
	self._cache:Clear()
end

function AbstractComponent:_Destroy()
end

function AbstractComponent:_PostDestroy()
	DelegateUtil.InvokeCallback(self._destroyCallback)
	self._destroyCallback = {}
end

function AbstractComponent:_OnDespawn_Destroy()
	self._isDestroyed = false
	self._destroyCallback = nil
end

function AbstractComponent:OnDespawn()
	self:_OnDespawn_()
	self:_OnDespawn_Destroy()
	self:_OnDespawn_Enable()
	self:_OnDespawn_Pause()
	self:_OnDespawn_Reset()
end

return AbstractComponent