---@class AbstractComponent:Class
---@field key string
---@field isKeyUsingParentIdPool boolean
---@field entity AbstractEntity
---@field isPaused boolean
---@field _isDestroyed boolean
---@field isEnabled boolean
-----注意创建后记得设置key和entity
local AbstractComponent = Class("AbstractComponent")

-----注意创建后记得设置key和entity
function AbstractComponent:Init()
	self.destroyCallback = {}
	self.resetCallback = {}
	---@type Cache
	self.cache = Cache.New()
end

function AbstractComponent:PostInit()
end

function AbstractComponent:__OnDespawn_()
	self.key = nil
	self.entity = nil
	self.isKeyUsingParentIdPool = nil
	self.cache:Clear()
end

----------------------------------------------------------------------
-- Update相关
----------------------------------------------------------------------
function AbstractComponent:IsCanUpdate()
	return self:GetIsEnabled() and not self:GetIsPaused() and not self:IsDestroyed()
end

function AbstractComponent:Update(deltaTime, unscaledDeltaTime)
	if not self:IsCanUpdate() then
		return
	end
	self:__Update(deltaTime, unscaledDeltaTime)
end

function AbstractComponent:FixedUpdate(deltaTime, unscaledDeltaTime)
	if not self:IsCanUpdate() then
		return
	end
	self:__FixedUpdate(deltaTime, unscaledDeltaTime)
end

function AbstractComponent:LateUpdate(deltaTime, unscaledDeltaTime)
	if not self:IsCanUpdate() then
		return
	end
	self:__LateUpdate(deltaTime, unscaledDeltaTime)
end

function AbstractComponent:__Update(deltaTime, unscaledDeltaTime)
end

function AbstractComponent:__FixedUpdate(deltaTime, unscaledDeltaTime)
end

function AbstractComponent:__LateUpdate(deltaTime, unscaledDeltaTime)
end


----------------------------------------------------------------------
-- Enable相关
----------------------------------------------------------------------
function AbstractComponent:SetIsEnabled(isEnabled)
	if self:GetIsEnabled() == isEnabled then
		return
	end
	self.isEnabled = isEnabled
	self:__SetIsEnabled(isEnabled)
	if isEnabled then
		self:OnEnable()
	else
		self:OnDisable()
	end
end

function AbstractComponent:GetIsEnabled()
	return self.isEnabled or false
end

function AbstractComponent:__SetIsEnabled(is_enabled)
end

function AbstractComponent:OnEnable()
end

function AbstractComponent:OnDisable()
end

function AbstractComponent:__OnDespawn_Enable()
	self.isEnabled = false
end

----------------------------------------------------------------------
-- Pause相关
----------------------------------------------------------------------
function AbstractComponent:SetIsPaused(isPaused)
	if self:GetIsPaused() == isPaused then
		return
	end
	self.isPaused = isPaused
	self:__SetIsPaused(isPaused)
end

function AbstractComponent:__SetIsPaused(is_paused)

end

function AbstractComponent:GetIsPaused()
	return self.isPaused or false
end

function AbstractComponent:__OnDespawn_Pause()
	self._isPaused = false
end
----------------------------------------------------------------------
-- Reset相关
----------------------------------------------------------------------
function AbstractComponent:Reset()
	self:__Reset()
	self:__PostReset()
end

function AbstractComponent:__Reset()
end

function AbstractComponent:__PostReset()
	DelegateUtil.InvokeCallback(self.resetCallback)
	self.resetCallback = {}
end

function AbstractComponent:__OnDespawn_Reset()
	self.resetCallback = nil
end

----------------------------------------------------------------------
-- Destroy相关
----------------------------------------------------------------------
function AbstractComponent:IsDestroyed()
	return self._isDestroyed or false
end

function AbstractComponent:Destroy()
	if self:IsDestroyed() then
		return
	end
	self:SetIsEnabled(false)
	self:SetIsPaused(false)
	self:__Destroy()
	self._isDestroyed = true
	self:__PostDestroy()
	self.cache:Clear()
end

function AbstractComponent:__Destroy()
end

function AbstractComponent:__PostDestroy()
	DelegateUtil.InvokeCallback(self.destroyCallback)
	self.destroyCallback = {}
end

function AbstractComponent:__OnDespawn_Destroy()
	self._isDestroyed = false
	self.destroyCallback = nil
end

function AbstractComponent:OnDespawn()
	self:__OnDespawn_()
	self:__OnDespawn_Destroy()
	self:__OnDespawn_Enable()
	self:__OnDespawn_Pause()
	self:__OnDespawn_Reset()
end

return AbstractComponent