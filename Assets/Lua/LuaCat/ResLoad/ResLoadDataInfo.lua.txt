---@class ResLoadDataInfo
local ResLoadDataInfo = Class("ResLoadDataInfo")

---@param isNotCheckDestroy boolean
---@param resLoadData ResLoadData
function ResLoadDataInfo:Init(resLoadData, isNotCheckDestroy)
	---@type ResLoadData
	self.resLoadData = resLoadData
	self.isNotCheckDestroy = isNotCheckDestroy
	---@type table<any,boolean>
	self.callbackCauseDict = {}
end

function ResLoadDataInfo:AddCallbackCause(callbackCause)
	if self.callbackCauseDict[ObjectUtil.GetNotNilKey(callbackCause)] then
		return
	end
	self.callbackCauseDict[ObjectUtil.GetNotNilKey(callbackCause)] = true
end

--callback_cause==nil时是全部删除
function ResLoadDataInfo:RemoveCallbackCause(callbackCause)
	self.callbackCauseDict[ObjectUtil.GetNotNilKey(callbackCause)] = nil
	self.resLoadData.assetCat:RemoveCallback(ObjectUtil.GetNilableKey(callbackCause))
	if not self.isNotCheckDestroy then
		self:CheckDestroy()
	end
end

function ResLoadDataInfo:RemoveAllCallbackCauses()
	for callbackCause, _ in pairs(self.callbackCauseDict) do
		self.resLoadData.assetCat:RemoveCallback(ObjectUtil.GetNilableKey(callbackCause))
	end
	table.Clear(self.callbackCauseDict)
	if not self.isNotCheckDestroy then
		self:CheckDestroy()
	end
end

function ResLoadDataInfo:CheckDestroy()
	if table.Count(self.callbackCauseDict) == 0 then
		self.resLoadData:Destroy()
	end
end

function ResLoadDataInfo:Destroy()
	for callbackCause, _ in pairs(self.callbackCauseDict) do
		self.resLoadData.assetCat:RemoveCallback(ObjectUtil.GetNilableKey(callbackCause))
	end
	table.Clear(self.callbackCauseDict)
	self.resLoadData:Destroy()
end

return ResLoadDataInfo