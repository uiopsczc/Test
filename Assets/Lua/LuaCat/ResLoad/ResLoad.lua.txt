---@class ResLoad
local ResLoad = Class("ResLoad")

function ResLoad:Init(isNotCheckDestroy)
	---@type table<string, ResLoadDataInfo>
	self._resLoadDataInfoDict = {}
	self._isNotCheckDestroy = isNotCheckDestroy
end

function ResLoad:IsAllLoadDone()
	for _, resLoadDataInfo in pairs(self._resLoadDataInfoDict) do
		if not resLoadDataInfo:GetResLoadData():IsLoadDone() then
			return false
		end
	end
	return true
end

---@param onLoadSuccessCallback fun(assetCat:CS.CsCat.AssetCat)
---@param onLoadFailCallback fun(assetCat:CS.CsCat.AssetCat)
---@param onLoadDoneCallback fun(assetCat:CS.CsCat.AssetCat)
---@param callbackCause any
function ResLoad:GetOrLoadAsset(assetPath, onLoadSuccessCallback, onLoadFailCallback, onLoadDoneCallback, callbackCause)
	local callbackCause = callbackCause == nil and self or callbackCause
	local assetCat = global.client.csClient.assetBundleManager:GetOrLoadAssetCat(string.GetMainAssetPath(assetPath), onLoadSuccessCallback, onLoadFailCallback, onLoadDoneCallback, callbackCause)
	local mainAssetPath = string.GetMainAssetPath(assetPath)
	if not self._resLoadDataInfoDict[mainAssetPath] then
		self._resLoadDataInfoDict[mainAssetPath] = ResLoadDataInfo.New(ResLoadData.New(assetCat), self._isNotCheckDestroy)
	end
	self._resLoadDataInfoDict[mainAssetPath]:AddCallbackCause(callbackCause)
	return assetCat
end

---@param assetCat CS.CsCat.AssetCat
function ResLoad:CancelLoadCallback(assetCat, callbackCause)
	local toRemoveKey
	for key, resLoadDataInfo in pairs(self._resLoadDataInfoDict) do
		if resLoadDataInfo:GetResLoadData():GetAssetCat() == assetCat then
			resLoadDataInfo:RemoveCallbackCause(callbackCause)
			if table.Count(resLoadDataInfo:GetCallbackCauseDict()) == 0 and not self._isNotCheckDestroy then
				--is_not_check_destroy的时候不删除，因为要在destroy的时候作为删除的asset的依据
				toRemoveKey = key
			end
			break
		end
	end
	if toRemoveKey then
		self._resLoadDataInfoDict[toRemoveKey] = nil
	end
end

---@param assetCat CS.CsCat.AssetCat
function ResLoad:CancelLoadAllCallbacks(assetCat)
	local toRemoveKey
	for key, resLoadDataInfo in pairs(self._resLoadDataInfoDict) do
		if resLoadDataInfo:GetResLoadData():GetAssetCat() == assetCat then
			resLoadDataInfo:RemoveAllCallbackCauses()
			if table.Count(resLoadDataInfo:GetCallbackCauseDict()) == 0 and not self._isNotCheckDestroy then
				--is_not_check_destroy的时候不删除，因为要在destroy的时候作为删除的asset的依据
				toRemoveKey = key
			end
			break
		end
	end
	if toRemoveKey then
		self._resLoadDataInfoDict[toRemoveKey] = nil
	end
end

function ResLoad:Reset()
	for _, resLoadDataInfo in pairs(self._resLoadDataInfoDict) do
		resLoadDataInfo:Destroy()
	end
	self._resLoadDataInfoDict = {}
end

function ResLoad:Destroy()
	self:Reset()
end

return ResLoad