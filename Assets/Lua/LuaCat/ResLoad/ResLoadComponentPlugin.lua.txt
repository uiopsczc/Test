---@class ResLoadComponentPlugin
local ResLoadComponentPlugin = Class("ResLoadComponentPlugin")

---@param resLoadComponent ResLoadComponent
function ResLoadComponentPlugin:Init(resLoadComponent)
	self.resLoadComponent = resLoadComponent
	---@type table<CS.CsCat.AssetCat,table<any,boolean>>
	self.assetCatDict = {}
end

function ResLoadComponentPlugin:IsAllLoadDone()
	for assetCat, _ in pairs(self.assetCatDict) do
		if not assetCat:IsLoadDone() then
			return false
		end
	end
	return true
end

---@param onAllLoadDoneCallback fun()
function ResLoadComponentPlugin:CheckIsAllLoadDone(onAllLoadDoneCallback)
	self.resLoadComponent:StartCoroutine(nil, function()
		self.resLoadComponent:WaitUntil(function()
			return self:IsAllLoadDone()
		end)
		if onAllLoadDoneCallback then
			onAllLoadDoneCallback()
		end
	end)
end

---@param onLoadSuccessCallback fun(assetCat:CS.CsCat.AssetCat)
---@param onLoadFailCallback fun(assetCat:CS.CsCat.AssetCat)
---@param onLoadDoneCallback fun(assetCat:CS.CsCat.AssetCat)
---@param callbackCause any
function ResLoadComponentPlugin:GetOrLoadAsset(assetPath, onLoadSuccessCallback, onLoadFailCallback, onLoadDoneCallback, callbackCause)
	local assetCat = self.resLoadComponent:GetOrLoadAsset(assetPath, onLoadSuccessCallback, onLoadFailCallback, onLoadDoneCallback, callbackCause)
	self:__AddToAssetCatDict(assetCat, callbackCause)
	return assetCat
end

---@param assetCat CS.CsCat.AssetCat
function ResLoadComponentPlugin:CancelLoadCallback(assetCat, callbackCause)
	self.resLoadComponent:CancelLoadCallback(assetCat, callbackCause)
	self:__RemoveFromAssetCatDict(assetCat, callbackCause)
end

---@param assetCat CS.CsCat.AssetCat
function ResLoadComponentPlugin:CancelLoadAllCallback(assetCat)
	if not self.assetCatDict[assetCat] then
		return
	end
	for _, callbackCauseDict in pairs(self.assetCatDict) do
		for callbackCause, _ in pairs(callbackCauseDict) do
			self.resLoadComponent:CancelLoadCallback(assetCat, ObjectUtil.GetNilableKey(callbackCause))
		end
	end
	self.assetCatDict[assetCat] = nil
end

---@param assetCat CS.CsCat.AssetCat
function ResLoadComponentPlugin:__AddToAssetCatDict(assetCat, callbackCause)
	table          .GetOrAddDefault_Dict(self.assetCatDict, assetCat, function()
		return {}
	end)[ObjectUtil.GetNotNilKey(callbackCause)] = true
end

---@param assetCat CS.CsCat.AssetCat
function ResLoadComponentPlugin:__RemoveFromAssetCatDict(assetCat, callbackCause)
	if not self.assetCatDict[assetCat] then
		return
	end
	self.assetCatDict[assetCat][ObjectUtil.GetNotNilKey(callbackCause)] = nil
end

function ResLoadComponentPlugin:Destroy()
	for assetCat, _ in pairs(self.assetCatDict) do
		for callbackCause, _ in pairs(self.assetCatDict[assetCat]) do
			self.resLoadComponent:CancelLoadCallback(assetCat, ObjectUtil.GetNilableKey(callbackCause))
		end
	end
	table.Clear(self.assetCatDict)
	self.resLoadComponent = nil
end

function ResLoadComponentPlugin:__Destroy()
	ResLoadComponentPlugin.super.__Destroy(self)
	self.resLoad:Destroy()
end

return ResLoadComponentPlugin