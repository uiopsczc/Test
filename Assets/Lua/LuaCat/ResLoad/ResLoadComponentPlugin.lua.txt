---@class ResLoadComponentPlugin
local ResLoadComponentPlugin = Class("ResLoadComponentPlugin")

---@param resLoadComponent ResLoadComponent
function ResLoadComponentPlugin:Init(resLoadComponent)
	self._resLoadComponent = resLoadComponent
	---@type table<CS.CsCat.AssetCat,table<any,boolean>>
	self._assetCatDict = {}
end

function ResLoadComponentPlugin:IsAllLoadDone()
	for assetCat, _ in pairs(self._assetCatDict) do
		if not assetCat:IsLoadDone() then
			return false
		end
	end
	return true
end

---@param onAllLoadDoneCallback fun()
function ResLoadComponentPlugin:CheckIsAllLoadDone(onAllLoadDoneCallback)
	self._resLoadComponent:StartCoroutine(nil, function()
		self._resLoadComponent:WaitUntil(function()
			return self:IsAllLoadDone()
		end)
		if onAllLoadDoneCallback then
			onAllLoadDoneCallback()
		end
	end)
end

---@param onLoadSuccessCallback fun(assetCat:CS.CsCat.AssetCat)
---@param onLoadFailCallback fun(assetCat:CS.CsCat.AssetCat)
---@param onLoadDoneCallback fun(assetCat:CS.CsCat.AssetCat)
---@param callbackCause any
function ResLoadComponentPlugin:GetOrLoadAsset(assetPath, onLoadSuccessCallback, onLoadFailCallback, onLoadDoneCallback, callbackCause)
	local assetCat = self._resLoadComponent:GetOrLoadAsset(assetPath, onLoadSuccessCallback, onLoadFailCallback, onLoadDoneCallback, callbackCause)
	self:_AddToAssetCatDict(assetCat, callbackCause)
	return assetCat
end

---@param assetCat CS.CsCat.AssetCat
function ResLoadComponentPlugin:CancelLoadCallback(assetCat, callbackCause)
	self._resLoadComponent:CancelLoadCallback(assetCat, callbackCause)
	self:_RemoveFromAssetCatDict(assetCat, callbackCause)
end

---@param assetCat CS.CsCat.AssetCat
function ResLoadComponentPlugin:CancelLoadAllCallback(assetCat)
	if not self._assetCatDict[assetCat] then
		return
	end
	for _, callbackCauseDict in pairs(self._assetCatDict) do
		for callbackCause, _ in pairs(callbackCauseDict) do
			self._resLoadComponent:CancelLoadCallback(assetCat, ObjectUtil.GetNilableKey(callbackCause))
		end
	end
	self._assetCatDict[assetCat] = nil
end

---@param assetCat CS.CsCat.AssetCat
function ResLoadComponentPlugin:_AddToAssetCatDict(assetCat, callbackCause)
	local dict = table.GetOrAddDefault_Dict(self._assetCatDict, assetCat, function()
		return {}
	end)
	dict[ObjectUtil.GetNotNilKey(callbackCause)] = true
end

---@param assetCat CS.CsCat.AssetCat
function ResLoadComponentPlugin:_RemoveFromAssetCatDict(assetCat, callbackCause)
	local dict = self._assetCatDict[assetCat]
	if not dict then
		return
	end
	dict[ObjectUtil.GetNotNilKey(callbackCause)] = nil
end

function ResLoadComponentPlugin:Destroy()
	for assetCat, _ in pairs(self._assetCatDict) do
		for callbackCause, _ in pairs(self._assetCatDict[assetCat]) do
			self._resLoadComponent:CancelLoadCallback(assetCat, ObjectUtil.GetNilableKey(callbackCause))
		end
	end
	table.Clear(self._assetCatDict)
	self._resLoadComponent = nil
end

function ResLoadComponentPlugin:_Destroy()
	ResLoadComponentPlugin.super._Destroy(self)
	self.resLoad:Destroy()
end

return ResLoadComponentPlugin