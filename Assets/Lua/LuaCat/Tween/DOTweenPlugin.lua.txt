---@class DOTweenPlugin
local DOTweenPlugin = Class("DOTweenPlugin")

function DOTweenPlugin:Init()
  ---@type table<string,CS.DG.Tweening.Tween>
  self.dict = {}
  ---@type IdPool
  self.idPool = IdPool.New()
end

---@param key string
---@return CS.DG.Tweening.Sequence
function DOTweenPlugin:AddDOTweenSequence( key)
  self:CleanNotActiveDOTweens()
  if key and self.dict[key] then
    self:RemoveDOTween(key)
  end
  if not key then
    key = tostring(self.idPool:Get())
  end
  ---@type CS.DG.Tweening.Sequence
  local sequence = CS.DG.Tweening.Sequence()
  self.dict[key] = sequence
  return sequence
end

---@param key string
---@param tween CS.DG.Tweening.Tween
---@return CS.DG.Tweening.Tween
function DOTweenPlugin:AddDOTween( key,  tween)
  self:CleanNotActiveDOTweens()
  if key and self.dict[key] then
    self:RemoveDOTween(key)
  end
  if not key then
    key = tostring(self.idPool:Get())
  end
  self.dict[key] = tween
  return tween
end

---@param key_or_tween CS.DG.Tweening.Tween||string
function DOTweenPlugin:RemoveDOTween(key_or_tween)
  if IsString(key_or_tween) then
    local key = key_or_tween
    self:CleanNotActiveDOTweens()
    if self.dict[key] and self.dict[key]:IsActive() then
      self.dict[key]:Kill()
    end
    self.dict[key] = nil
    self.idPool:Despawn(key)
  else
    local tween = key_or_tween
    local key
    for _key,_tween in pairs(self.dict) do
      if _tween == tween then
        key = _key
        break
      end
    end
    if key then
      self:RemoveDOTween(key)
    end
  end
end

function DOTweenPlugin:CleanNotActiveDOTweens( )
  for _key,_tween in pairs(self.dict) do
    if not _tween:IsActive() then
      self.dict[_key] = nil
      self.idPool:Despawn(_key)
    end
  end
end

function DOTweenPlugin:RemoveAllDOTweens( )
  for _key,_tween in pairs(self.dict) do
    if  _tween:IsActive()then
      _tween:Kill()
    end
  end
  self.dict = {}
  self.idPool:DespawnAll()
end

function DOTweenPlugin:SetIsPaused(is_paused)
  for _key,_tween in pairs(self.dict) do
    if _tween:IsActive() then
      if is_paused then
        _tween:Pause()
      else
        _tween:Play()
      end
    end
  end
end

function DOTweenPlugin:Destroy( )
  self:RemoveAllDOTweens()
end



return DOTweenPlugin