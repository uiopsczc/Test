---@type table<string,string>
local classNameRelationShipDict = {}

---@generic T : Class
---@param className string
---@param super T
---@return Class
function Class(className, super)
	local superType = type(super)
	---@class Class
	---@field _className
	---@field _classInnerType
	local cls
	if superType ~= "function" and superType ~= "table" then
		superType = nil
		super = nil
	end

	if superType == "function" or (super and super._classInnerType == 1) then
		-- inherited from native C++ Object
		cls = {}

		if superType == "table" then
			-- copy fields from super
			for k, v in pairs(super) do
				cls[k] = v
			end
			cls._create = super._create
			cls.super = super
		else
			cls._create = super
			cls.ctor = function()
			end
		end

		cls._className = className
		cls._classInnerType = 1 -- inherited from native C++ Object

		function cls.New(...)
			local instance = cls._create(...)
			-- copy fields from class to native object
			for k, v in pairs(cls) do
				instance[k] = v
			end
			instance.class = cls
			instance:ctor(...)
			return instance
		end

	else
		-- inherited from Lua Object
		if super then
			if classNameRelationShipDict[className] then
				ErrorFormat("%s already has super_class:%s; can't not set to super_class:[%s]", className, classNameRelationShipDict[className], super.__class_name)
			end
			classNameRelationShipDict[className] = super._className
			cls = {}
			setmetatable(cls, { __index = super })
			cls.super = super
		else
			cls = { ctor = function()
			end }
		end

		cls._className = className
		cls._classInnerType = 2 -- lua
		cls.__index = cls

		function cls.New(...)
			local instance = setmetatable({}, cls)
			instance.class = cls
			instance.className = className
			if instance.Init then
				instance:Init(...)
			end
			return instance
		end

		function cls.NewWithoutInit()
			local instance = setmetatable({}, cls)
			instance.class = cls
			instance.className = className
			return instance
		end

		function cls.IsSubTypeOf(superType)
			local subType = cls
			while subType do
				if subType._className == superType._className then
					return true
				end
				subType = subType.super
			end
			return false
		end

		function cls.IsSuperTypeOf(subType)
			while subType do
				if subType._className == cls._className then
					return true
				end
				subType = subType.super
			end
			return false
		end

		function cls:IsInstanceOf(classType)
			return IsInstanceOf(self, classType._className)
		end
	end

	return cls
end

function ClearClassNameRelationShipDict()
	classNameRelationShipDict = {}
end

function IsSubClassOf(subClassName, superClassName)
	local curSubClassName = classNameRelationShipDict[subClassName]
	while curSubClassName do
		if curSubClassName == superClassName then
			return true
		else
			curSubClassName = classNameRelationShipDict[curSubClassName]
		end
	end
end

function IsInstanceOf(obj, className)
	local t = type(obj)
	local mt
	if t == "table" then
		mt = getmetatable(obj)
		--elseif t == "userdata" then
		--    mt = tolua.getpeer(obj)
	end

	while mt do
		if mt._className == className then
			return true
		end
		mt = mt.super
	end

	return false
end

