---@type table<string,string>
local class_name_relationShip_dict = {}

---@generic T : Class
---@param class_name string
---@param super T
---@return Class
function Class(class_name, super)
  local superType = type(super)
  ---@class Class
  ---@field _className
  ---@field __class_inner_type
  local cls
  if superType ~= "function" and superType ~= "table" then
    superType = nil
    super = nil
  end

  if superType == "function" or (super and super.__class_inner_type == 1) then
    -- inherited from native C++ Object
    cls = {}

    if superType == "table" then
      -- copy fields from super
      for k, v in pairs(super) do
        cls[k] = v
      end
      cls.__create = super.__create
      cls.super = super
    else
      cls.__create = super
      cls.ctor = function()
      end
    end

    cls._className = class_name
    cls.__class_inner_type = 1 -- inherited from native C++ Object

    function cls.New(...)
      local instance = cls.__create(...)
      -- copy fields from class to native object
      for k, v in pairs(cls) do
        instance[k] = v
      end
      instance.class = cls
      instance:ctor(...)
      return instance
    end

  else
    -- inherited from Lua Object
    if super then
      if class_name_relationShip_dict[class_name] then
        ErrorFormat("%s already has super_class:%s; can't not set to super_class:[%s]", class_name, class_name_relationShip_dict[class_name], super.__class_name)
      end
      class_name_relationShip_dict[class_name] = super.__class_name
      cls = {}
      setmetatable(cls, { __index = super })
      cls.super = super
    else
      cls = { ctor = function()
      end }
    end

    cls._className = class_name
    cls.__class_inner_type = 2 -- lua
    cls.__index = cls



    function cls.New(...)
      local instance = setmetatable({}, cls)
      instance.class = cls
      instance.class_name = class_name
      if instance.Init then
        instance:Init(...)
      end
      return instance
    end

    function cls.NewWithoutInit()
      local instance = setmetatable({}, cls)
      instance.class = cls
      instance.class_name = class_name
      return instance
    end

    function cls.IsSubTypeOf(super_type)
      local sub_type = cls
      while sub_type do
        if sub_type._className == super_type.__class_name then
          return true
        end
        sub_type = sub_type.super
      end
      return false
    end

    function cls.IsSuperTypeOf(sub_type)
      while sub_type do
        if sub_type.__class_name == cls._className then
          return true
        end
        sub_type = sub_type.super
      end
      return false
    end

    function cls:IsInstanceOf(class_type)
      return IsInstanceOf(self, class_type.__class_name)
    end
  end

  return cls
end

function ClearClassNameRelationShipDict()
  class_name_relationShip_dict = {}
end

function IsSubClassOf(sub_class_name, super_class_name)
  local _sub_class_name = class_name_relationShip_dict[sub_class_name]
  while _sub_class_name do
    if _sub_class_name == super_class_name then
      return true
    else
      _sub_class_name = class_name_relationShip_dict[_sub_class_name]
    end
  end
end

function IsInstanceOf(obj, class_name)
  local t = type(obj)
  local mt
  if t == "table" then
    mt = getmetatable(obj)
    --elseif t == "userdata" then
    --    mt = tolua.getpeer(obj)
  end

  while mt do
    if mt.__class_name == class_name then
      return true
    end
    mt = mt.super
  end

  return false
end

