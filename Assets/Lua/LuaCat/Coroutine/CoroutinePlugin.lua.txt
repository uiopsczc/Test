---@class CoroutinePlugin
local CoroutinePlugin = Class("CoroutinePlugin")

function CoroutinePlugin:Init(timerManager)
	---@type table<string,thread>
	self._coroutineDict = {}
	---@type IdPool
	self._idPool = IdPool.New()
	self._timerManager = timerManager
end

function CoroutinePlugin:StartCoroutine(key, func, ...)
	if not key then
		key = tostring(self._idPool:Get())
	end
	-- 如果有的话，先停再启动
	if self._coroutineDict[key] then
		Coroutine.Stop(self._coroutineDict[key])
		self._coroutineDict[key] = nil
	end
	local co = Coroutine.Start(func, ...)
	self._coroutineDict[key] = co
end

function CoroutinePlugin:StopCoroutine(coOrKey)
	local key
	if IsThread(coOrKey) then
		local curCo = coOrKey
		for coKey, co in pairs(self._coroutineDict) do
			if curCo == co then
				key = coKey
				break
			end
		end
	else
		key = coOrKey
	end
	local co = self._coroutineDict[key]
	Coroutine.Stop(co)
	self._coroutineDict[key] = nil
	self._idPool:Despawn(key)
end

function CoroutinePlugin:SetIsPaused(isPaused)
	for _, co in pairs(self._coroutineDict) do
		Coroutine.SetIsPaused(co, isPaused)
	end
end

function CoroutinePlugin:StopAllCoroutines()
	for _, co in pairs(self._coroutineDict) do
		Coroutine.Stop(co)
	end
	self._coroutineDict = {}
	self._idPool:DespawnAll()
end

function CoroutinePlugin:WaitForFixedUpdate()
	return Coroutine.WaitForFixedUpdate(self._timerManager)
end

function CoroutinePlugin:WaitForFrames(frames)
	return Coroutine.WaitForFrames(frames, self._timerManager)
end

function CoroutinePlugin:WaitForSeconds(seconds)
	return Coroutine.WaitForSeconds(seconds, self._timerManager)
end

function CoroutinePlugin:WaitForAsyncOp(asyncOperation, callback)
	return Coroutine.WaitForAsyncOp(asyncOperation, callback, self._timerManager)
end

function CoroutinePlugin:WaitUntil(func, ...)
	return Coroutine.WaitUntil(self._timerManager, func, ...)
end

function CoroutinePlugin:WaitWhile(func, ...)
	return Coroutine.WaitWhile(self._timerManager, func, ...)
end

function CoroutinePlugin:WaitForEndOfFrame()
	return Coroutine.WaitForEndOfFrame(self._timerManager)
end

function CoroutinePlugin:YieldBreak(...)
	return Coroutine.YieldBreak(...)
end

function CoroutinePlugin:YieldStart(func, callback, ...)
	return Coroutine.YieldStart(func, callback, ...)
end

function CoroutinePlugin:YieldCallback(childCo, ...)
	return Coroutine.YieldCallback(childCo, ...)
end

function CoroutinePlugin:YieldReturn(...)
	return Coroutine.YieldReturn(...)
end

function CoroutinePlugin:Destroy()
	self:StopAllCoroutines()
end

return CoroutinePlugin