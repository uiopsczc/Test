

require("luacat.coroutine.Coroutine")


local function TestStart()
  Coroutine.Start(function(var)
    print(var)
    Coroutine.WaitForFrames(3)
    print("world")
  end
  , "Hello")
end
--TestStart()


---循环coroutine
local function TestCoRecycle()
  for i = 1, 10 do
    Coroutine.Start(function(var)
      print(var)
    end
    , "Hello" .. i)
  end
  --print(Coroutine.poolCatManager:GetOrAdd(Coroutine.co_pool_name).object_queue.length)
end
--TestCoRecycle()


-- WaitUntil测试
local function TestWaitUntil()
  Coroutine.Start(function()
    print("start")
    local wait_duration = 3
    local untilFunc = function()
      wait_duration = wait_duration - Time.deltaTime
      return wait_duration <= 0
    end
    Coroutine.WaitUntil(nil, untilFunc)
    print("end")
  end)
end
--TestWaitUntil()


-- WaitWhile测试
local function TestWaitWhile()
  Coroutine.Start(function()
    print("start")
    local wait_duration = 3
    local whileFunc = function()
      wait_duration = wait_duration - Time.deltaTime
      return wait_duration >= 0
    end
    Coroutine.WaitWhile(nil, whileFunc)
    print("end")
  end)
end
--TestWaitWhile()

-- StopWaiting测试
local function TestStopWaiting()
  local abort_error = "Abort Err!!!"
  local co = Coroutine.Start(function()
    print("start")
    Coroutine.WaitForSeconds(3)
    print("middle")
    Coroutine.WaitForSeconds(3)
    print("end")
  end)
  Coroutine.Start(function()
    Coroutine.WaitForSeconds(1)
    Coroutine.StopWaiting(co, abort_error)
  end)
end
--TestStopWaiting()


-- Stop测试
local function TestStop()
  local co = Coroutine.Start(function()
    log("aaa")
    Coroutine.WaitForSeconds(2)
    log("bbb")
    Coroutine.WaitForSeconds(2)
    print("ccc")
  end)
  Coroutine.Start(function()
    Coroutine.WaitForSeconds(10)
    Coroutine.Stop(co)
  end)
end
--TestStop()

-- 对称协同测试
local function TestYield()
  Coroutine.Start(function()
    -- 用于统计回调次数
    local callback_count = 0
    -- 父级协程回调
    local callback = function(child_co, ...)
      local param = { ... }
      callback_count = callback_count + 1
      if callback_count == 1 then
        print("callbak1 " .. param[1])
        return
      elseif callback_count == 2 then
        print("callbak2 " .. param[1])
        Coroutine.WaitForFrames(120)
        print("callbak3 world")
        return
      end
    end
    -- 子级协程函数体
    local func = function(arg)
      print(arg)
      -- yieldreturn测试
      Coroutine.YieldReturn(4)
      Coroutine.WaitForFrames(60)
      Coroutine.YieldReturn("hello")
      -- yieldbreak测试
      return Coroutine.YieldBreak("chen", "finished")
    end
    -- 启动子级协程并等待
    local result1, result2 = Coroutine.YieldStart(func, callback, "czq")
    print(result1 .. "   " .. result2)
  end)
end
--TestYield()


-- YieldCallback测试
local function TestYieldCallback()
  -- 模拟一个异步回调
  ---@type CoroutineAsyncOperation
  local async_op = { is_done = false, progress = 0 }
  -- 用于同步
  local cur_frame = Time.frameCount
  local wait_frame_count = 50
  local until_func = function()
    return Time.frameCount == cur_frame + wait_frame_count
  end
  -- 启动协程1驱动异步回调
  Coroutine.Start(function()
    Coroutine.WaitUntil(nil, until_func)
    while async_op.progress < 1.0 do
      async_op.progress = async_op.progress + 0.001 * 1
      Coroutine.WaitForFrames(1)
    end
    async_op.is_done = true
  end)
  -- 同时启动协程2
  Coroutine.Start(function()
    -- 用于统计回调次数
    local callback_count = 0
    -- 父级协程回调
    local callback = function(co, progress)
      callback_count = callback_count + 1
      print("progress:" .. progress .. "     asyncOp.progress:" .. async_op.progress)
    end
    -- 子级协程函数体
    local func = function()
      -- 同步时间
      Coroutine.WaitUntil(nil, until_func)
      -- yieldcallback测试
      Coroutine.WaitForAsyncOp(async_op, function(co, progress)
        Coroutine.YieldCallback(co, progress)
      end)
      -- yieldbreak测试
      return Coroutine.YieldBreak("hello", "world")
    end
    -- 启动子级协程并等待
    local result1, result2 = Coroutine.YieldStart(func, callback)
    print(result1 .. " " .. result2)
  end)
end
--TestYieldCallback()