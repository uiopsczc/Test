---@param t table
---@param index1 number
---@param index2 number
function table.Swap_Array(t, index1, index2)
	local tmp = t[index1]
	t[index1] = t[index2]
	t[index2] = tmp
end


-- 寻找t中value对应的key
---@param t table
---@param value
function table.FindKeyByValue_Array(t, value)
	for k, v in ipairs(t) do
		if v == value then
			return k
		end
	end
	return nil
end

function table.FindValue_Array(t, value)
	for _, curValue in ipairs(t) do
		if curValue == value then
			return curValue
		end
	end
end

-- 反转数组的原始排列顺序，返回新建的table,不改变源table
---@generic T
---@param array T[] @数组
---@return T[]
function table.Reverse_Array(array)
	local length = #array
	local t2 = {}
	for i = 1, length do
		t2[length + 1 - i] = array[i]
	end
	for i = 1, length do
		array[i] = t2[i]
	end
	return array
end
-- test
--local array = {"a","b","c"}
--table.Revert_Array(array)
--table.DumpPrint(array)

-- 向数组array1尾部添加数组array2,结果会修改array1
---@generic T
---@param array T[]
---@param isUnique boolean
---@return T[]
function table.Append_Array(array, toAdd, isUnique)
	if not isUnique then
		table.insert(array, toAdd)
	else
		if table.IndexOf_Array(array, toAdd) == -1 then
			table.insert(array, toAdd)
		end
	end

	return array
end
-- test
--local array = {"a","b","c"}
--table.Append_Array(array,"f")
--table.DumpPrint(array)

-- 寻找数组array中最小的value
---@generic T
---@param array T[]
---@return T
function table.Min_Array(array)
	local min = math.huge
	for _, v in ipairs(array) do
		if v < min then
			min = v
		end
	end
	return min
end
-- test
--local array = {2,1,3}
--local t = table.Min_Array(array,"f")
--print(t)

-- 寻找数组array中最大的value
---@generic T
---@param array T[]
---@return T
function table.Max_Array(array)
	local max = -math.huge
	for _, v in ipairs(array) do
		if v > max then
			max = v
		end
	end
	return max
end
-- test
--local array = {2,1,3}
--local t = table.Max_Array(array,"f")
--print(t)

-- 数组中是否存在符合条件的元素
---@generic T
---@param array T[]
---@param matchFunc fun(value:T):boolean
---@return boolean
function table.Exists_Array(array, matchFunc)
	for i = 1, #array do
		if matchFunc(array[i]) then
			return true
		end
	end
	return false
end
-- test
--local array = {"a","b","c"}
--local t = table.Exists_Array(array,function(v) return v=="b" end)
--print(t)

-- 数组中是否都符合条件
---@generic T
---@param array T[]
---@param matchFunc fun(value:T):boolean
---@return boolean
function table.TrueForAll_Array(array, matchFunc)
	for i = 1, #array do
		if matchFunc(array[i]) == false then
			return false
		end
	end
	return true
end
-- test
--local array = {"b","b","b"}
--local t = table.TrueForAll_Array(array,function(v) return v=="b" end)
--print(t)

-- 寻找数组array中最大的value中value对应的index,不存在则返回-1
---@generic T
---@param array T[]
---@param value T
---@param beginIndex number @不填则为1
---@param count number @不填则为beginIndex后的长度
---@return number
function table.IndexOf_Array(array, value, beginIndex, count)
	beginIndex = beginIndex or 1
	count = count or (#array - beginIndex + 1)
	for i = beginIndex, beginIndex + count - 1 do
		if array[i] == value then
			return i
		end
	end
	return -1
end
-- test
--local array = {"a","b","c"}
--local t = table.IndexOf_Array(array,"b")
--print(t)

-- 寻找数组array中最大的value中value对应的index,不存在则返回-1  ,最后一个
---@generic T
---@param array T[]
---@param value T
---@param beginIndex number @不填则为1
---@param count number @不填则为beginIndex后的长度
---@return number
function table.LastIndexOf_Array(array, value, beginIndex, count)
	beginIndex = beginIndex or 1
	count = count or (#array - beginIndex + 1)
	for i = beginIndex + count - 1, beginIndex, -1 do
		if array[i] == value then
			return i
		end
	end
	return -1
end

-- 修改array中的所有元素
---@generic T,R
---@param array T[]
---@param func fun(key:number, value:T):R
function table.ConvertAll_Array(array, func)
	for i = 1, #array do
		array[i] = func(array[i])
	end
end

-- 修改array中的所有元素
---@generic T
---@param source T[]
---@param dest T[]
---@param sourceBeginIndex number @默认从1开始
---@param count number @默认sourceBeginIndex之后的长度
---@return T[]
function table.CopyTo_Array(source, dest, sourceBeginIndex, count)
	sourceBeginIndex = sourceBeginIndex or 1
	count = count or (#source + 1 - sourceBeginIndex)
	if sourceBeginIndex + count > #source then
		count = #source - sourceBeginIndex
	end
	for i = sourceBeginIndex, sourceBeginIndex + count - 1 do
		table.insert(dest, source[i])
	end
end

-- 查找符合条件的T
---@generic T
---@param array T[]
---@param matchFunc fun(value:T):boolean
---@return T
function table.Find_Array(array, matchFunc)
	for i = 1, #array do
		if matchFunc(array[i]) then
			return array[i]
		end
	end
	return nil
end

-- 查找符合条件的T,最后一个
---@generic T
---@param array T[]
---@param matchFunc fun(value:T):boolean
---@return T
function table.FindLast_Array(array, matchFunc)
	for i = #array, 1, -1 do
		if matchFunc(array[i]) then
			return array[i]
		end
	end
	return nil
end

-- 查找符合条件的所有T
---@generic T
---@param array T[]
---@param matchFunc fun(value:T):boolean
---@return T[]
function table.FindAll_Array(array, matchFunc)
	local result = {}
	for i = 1, #array do
		if matchFunc(array[i]) then
			table.insert(result, array[i])
		end
	end
	return result
end

-- 查找符合条件的Index
---@generic T
---@param array T[]
---@param matchFunc fun(value:T):boolean
---@param startIndex number
---@param count number
---@return number
function table.FindIndex_Array(array, matchFunc, startIndex, count)
	startIndex = startIndex or 1
	count = count or (#array + 1 - startIndex)
	for i = startIndex, startIndex + count - 1 do
		if matchFunc(array[i]) then
			return i
		end
	end
	return -1
end

-- 查找符合条件的Index，最后一个
---@generic T
---@param array T[]
---@param matchFunc fun(value:T):boolean
---@param startIndex number
---@param count number
---@return number
function table.FindLatIndex_Array(array, matchFunc, startIndex, count)
	startIndex = startIndex or 1
	count = count or (#array + 1 - startIndex)
	for i = startIndex + count - 1, startIndex, -1 do
		if matchFunc(array[i]) then
			return i
		end
	end
	return -1
end

-- 在index插入集合
---@generic T
---@param array T[]
---@param index number
---@param insertArray T[]
---@return number
function table.InsertRange_Array(array, index, insertArray)
	index = index or #array + 1
	for i = 1, #insertArray do
		table.insert(array, index + i - 1, insertArray[i])
	end
end

function table.AddRange_Array(array, addArray)
	table.InsertRange_Array(array, nil, addArray)
end

-- 删除符合条件的集合
---@generic T
---@param array T[]
---@param matchFunc fun(value:T):boolean
function table.RemoveAll_Array(array, matchFunc)
	for i = #array, 1, -1 do
		if matchFunc then
			if matchFunc(array[i]) then
				table.remove(array, i)
			end
		else
			table.remove(array, i)
		end
	end
end

---@param t any[]
---@param removeFunc fun(key:any,value:any):boolean
function table.RemoveByFunc_Array(t, removeFunc)
	for i = #t, 1, -1 do
		if removeFunc(i, t[i]) then
			table.remove(t, i)
		end
	end
end

---@param t any[]
---@param subArray any[]
function table.RemoveElementsOfSub_Array(t, subArray)
	return table.RemoveByFunc_Array(t, function(key, value)
		for _, subElement in ipairs(subArray) do
			if subElement == value then
				return true
			end
		end
	end)
end


-- 删除集合范围
---@generic T
---@param array T[]
---@param index number
---@param count number
function table.RemoveRange_Array(array, index, count)
	index = index or 1
	count = count or #array - index + 1
	for i = index + count - 1, index, -1 do
		table.remove(array, i)
	end
end

-- 查找T集合
---@generic T
---@param array T[]
---@param startIndex number
---@param count number
---@return T[]
function table.GetRange_Array(array, startIndex, count)
	local result = {}
	startIndex = startIndex or 1
	count = count or (#array + 1 - startIndex)
	for i = startIndex, startIndex + count - 1 do
		table.insert(result, array[i])
	end
	return result
end

-- 返回第一个
---@generic T
---@param array T[]
---@return T
function table.First_Array(array)
	if not array or #array == 0 then
		return nil
	else
		return array[1]
	end
end

-- 返回最后一个
---@generic T
---@param array T[]
---@return T
function table.Last_Array(array)
	if not array or #array == 0 then
		return nil
	else
		return array[#array]
	end
end

-- 根据权重返回随机的index
---@param array number[]
---@return  number
function table.RandomIndexByWeights_Array(weightArray)
	local total = 0
	for i = 1, #weightArray do
		total = total + weightArray[i]
	end

	local randomValue = total * math.random()

	local compare = 0
	for i = 1, #weightArray do
		compare = compare + weightArray[i]
		if randomValue < compare then
			return i
		end
	end
	-- random_value == total的时候返回#weight_array
	return #weightArray
end

-- 根据权重返回随机的indexes
---@param array number[]
---@param count number
---@param isUnique boolean
---@return  number
function table.RandomIndexesByWeights_Array(weightArray, count, isUnique)
	local result = {}
	local weightCloneArray = table.Clone(weightArray)
	for i = 1, count do
		local randomIndex = table.RandomIndexByWeights_Array(weightCloneArray)
		table.insert(result, randomIndex)
		if isUnique then
			weightCloneArray[randomIndex] = 0
		end
	end
	return result
end

-- 随机数组array里面的num个元素
---@generic T
---@param array T[]
---@param num number @随机个数，不填则为array长度个
---@param isUnique boolean @是否唯一（不重复） 不填则为true（唯一，不重复)
---@param weightArray number[] @权重数组
---@return  T[]
function table.Random_Array(array, num, isUnique, weightArray)
	local result = {}
	isUnique = isUnique and isUnique or false
	num = num or #array
	if not weightArray then
		weightArray = {}
		for i = 1, #array do
			table.insert(weightArray, 1)
		end
	end
	-- 补全weight_array
	for i = #weightArray, #array do
		table.insert(weightArray, 0)
	end

	local randomIndexes = table.RandomIndexesByWeights_Array(weightArray, num, isUnique)
	for i = 1, #randomIndexes do
		table.insert(result, array[randomIndexes[i]])
	end
	return result
end

-- 随机数组array里面的num个元素
---@generic T
---@param array T[]
---@param weightArray number[] @权重数组
---@return  T
function table.RandomOne_Array(array, weightArray)
	return table.Random_Array(array, 1, false, weightArray)[1]
end


-- 寻找数组array中最大的value中value对应的index,不存在则返回-1
---@generic T
---@param array T[]
---@param fromIndex number
---@param endIndex number @不填则为#array
---@param maxIndex number @不填则为#array
---@return
function table.Sub_Array(array, fromIndex, endIndex, maxIndex)
	fromIndex = fromIndex or 1
	endIndex = endIndex or #array
	maxIndex = maxIndex or #array
	local result = {}
	for i = 1, math.min(endIndex, maxIndex) do
		table.insert(result, array[i])
	end
	return result
end

-- Push推入一个元素到数组最后
---@generic T
---@param array T[]
---@return  T
function table.Push_Array(array, element)
	array[#array + 1] = element
end

-- 把数组当成stack,弹出
---@generic T
---@param array T[]
---@return  T
function table.Pop_Stack(array)
	local result = table.Peek_Stack(array)
	table.remove(array, #array)
	return result
end

-- 把数组当成stack,取出栈顶第一个，但不弹出
---@generic T
---@param array T[]
---@return  T
function table.Peek_Stack(array)
	local result = array[#array]
	return result
end

-- 把数组当成Queue,弹出
---@generic T
---@param array T[]
---@return  T
function table.Pop_Queue(array)
	local result = table.remove(array, 1)
	return result
end

-- 把数组当成Queue,取出队列第一个，但不弹出
---@generic T
---@param array T[]
---@return  T
function table.Peek_Queue(array)
	local result = array[1]
	return result
end

-- 删除array中的元素值为...的元素
function table.RemoveByValue_Array(array, ...)
	local toRemoveList = table.GetArgs(...)
	--local to_remove_dict = table.ArrayToDict(to_remove_list)
	--for i = #array, 1,-1 do
	--  local v = array[i]
	--  local value = v == nil and "__nil__" or v
	--  if to_remove_dict[value] then
	--    table.remove(array, i)
	--  end
	--end
	for i = #array, 1, -1 do
		local v = array[i]
		for j = 1, #toRemoveList do
			if toRemoveList[j] == v then
				table.remove(array, i)
				break
			end
		end
	end
	return array
end

-- 去重
function table.Unique_Array(array, valueFunc)
	local len, record = #array, {}
	for i = len, 1, -1 do
		local value = valueFunc and valueFunc(array[i]) or array[i]
		if value ~= nil and not record[value] then
			record[value] = true
		else
			table.remove(array, i)
		end
	end
end

-- 将指定数组里不符合规则的元素移除，可指定是否返回一个新数组。
-- 输入：（1）array，要移除元素的数组；
--       （2）cond_func(item)，判断一个元素是不是要移除的，若为空则出错。
--       （3）is_get_new，是不是返回新数组，默认不是。
-- 输出：（1）new_array，移除了原数组中要移除元素的新数组；或者仅从原数组中删除，不返回。
function table.Filter_Array(array, condFunc, isGetNew)
	isGetNew = isGetNew or false
	if isGetNew then
		local newArray = {}
		for k, v in ipairs(array) do
			if not condFunc(v) then
				table.insert(newArray, v)
			end
		end
		return newArray
	else
		local len = #array
		for i = len, 1, -1 do
			if condFunc(array[i]) then
				table.remove(array, i)
			end
		end
	end
end

-- 将指定数组里的元素，通过赋值函数转为键值表
-- 输入：（1）array，要转换的数组。
--       （2）value_func(item, key),给元素指定一个值的方法，若为空则将元素映射为true。
-- 输出：（1）list，以数组元素为键，指定值为值的表。
-- 用途：（1）生成有效牌的表；（2）记录要删除的元素然后删除。
function table.ArrayToDict(array, valueFunc)
	local dict = {}
	local nilString = "__nil__"
	if valueFunc then
		for k, v in ipairs(array) do
			if v == nil then
				dict[nilString] = valueFunc(v, k)
			else
				dict[v] = valueFunc(v, k)
			end
		end
	else
		for _, v in ipairs(array) do
			if v == nil then
				dict[nilString] = true
			else
				dict[v] = true
			end
		end
	end
	return dict
end

---@return any[][]
function table.InitArrays(height)
	local result = {}
	for i = 1, height do
		table.insert(result, {})
	end
	return result
end

--转为左下为原点的坐标系，x增加是向右，y增加是向上（与unity的坐标系一致）
---@param arrays any[][]
function table.ToLeftBottomBaseArrays(arrays)
	local arraysHeight = #arrays
	local arraysWidth = #arrays[1]
	local resultHeight = arraysWidth
	local resultWidth = arraysHeight
	local result = table.InitArrays(resultHeight)
	for i = 1, resultWidth do
		for j = 1, resultHeight do
			result[j][resultWidth - i + 1] = arrays[i][j]
		end
	end
	return result
end