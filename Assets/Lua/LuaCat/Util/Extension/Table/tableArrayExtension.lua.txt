---@param t table
---@param index1 number
---@param index2 number
function table.Swap_Array(t, index1, index2)
  local tmp = t[index1]
  t[index1] = t[index2]
  t[index2] = tmp
end


-- 寻找t中value对应的key
---@param t table
---@param value
function table.FindKeyByValue_Array(t, value)
  for k, v in ipairs(t) do
    if v == value then
      return k
    end
  end
  return nil
end

function table.FindValue_Array(t,value)
  for _, _value in ipairs(t) do
    if _value == value then
      return _value
    end
  end
end

-- 反转数组的原始排列顺序，返回新建的table,不改变源table
---@generic T
---@param array T[] @数组
---@return T[]
function table.Reverse_Array(array)
  local length = #array
  local t2 = {}
  for i = 1, length do
    t2[length + 1 - i] = array[i]
  end
  for i = 1, length do
    array[i] = t2[i]
  end
  return array
end
-- test
--local array = {"a","b","c"}
--table.Revert_Array(array)
--table.DumpPrint(array)

-- 向数组array1尾部添加数组array2,结果会修改array1
---@generic T
---@param array T[]
---@param is_unique boolean
---@return T[]
function table.Append_Array(array, to_add, is_unique)
  if not is_unique then
    table.insert(array, to_add)
  else
    if table.IndexOf_Array(array, to_add) ==-1 then
      table.insert(array,to_add)
    end
  end

  return array
end
-- test
--local array = {"a","b","c"}
--table.Append_Array(array,"f")
--table.DumpPrint(array)

-- 寻找数组array中最小的value
---@generic T
---@param array T[]
---@return T
function table.Min_Array(array)
  local min = math.huge
  for _, v in ipairs(array) do
    if v < min then
      min = v
    end
  end
  return min
end
-- test
--local array = {2,1,3}
--local t = table.Min_Array(array,"f")
--print(t)

-- 寻找数组array中最大的value
---@generic T
---@param array T[]
---@return T
function table.Max_Array(array)
  local max = -math.huge
  for _, v in ipairs(array) do
    if v > max then
      max = v
    end
  end
  return max
end
-- test
--local array = {2,1,3}
--local t = table.Max_Array(array,"f")
--print(t)

-- 数组中是否存在符合条件的元素
---@generic T
---@param array T[]
---@param match_func fun(value:T):boolean
---@return boolean
function table.Exists_Array(array, match_func)
  for i = 1, #array do
    if match_func(array[i]) then
      return true
    end
  end
  return false
end
-- test
--local array = {"a","b","c"}
--local t = table.Exists_Array(array,function(v) return v=="b" end)
--print(t)

-- 数组中是否都符合条件
---@generic T
---@param array T[]
---@param match_func fun(value:T):boolean
---@return boolean
function table.TrueForAll_Array(array, match_func)
  for i = 1, #array do
    if match_func(array[i]) == false then
      return false
    end
  end
  return true
end
-- test
--local array = {"b","b","b"}
--local t = table.TrueForAll_Array(array,function(v) return v=="b" end)
--print(t)

-- 寻找数组array中最大的value中value对应的index,不存在则返回-1
---@generic T
---@param array T[]
---@param value T
---@param begin_index number @不填则为1
---@param count number @不填则为beginIndex后的长度
---@return number
function table.IndexOf_Array(array, value, begin_index, count)
  begin_index = begin_index or 1
  count = count or (#array - begin_index + 1)
  for i = begin_index, begin_index + count - 1 do
    if array[i] == value then
      return i
    end
  end
  return -1
end
-- test
--local array = {"a","b","c"}
--local t = table.IndexOf_Array(array,"b")
--print(t)

-- 寻找数组array中最大的value中value对应的index,不存在则返回-1  ,最后一个
---@generic T
---@param array T[]
---@param value T
---@param begin_index number @不填则为1
---@param count number @不填则为beginIndex后的长度
---@return number
function table.LastIndexOf_Array(array, value, begin_index, count)
  begin_index = begin_index or 1
  count = count or (#array - begin_index + 1)
  for i = begin_index + count - 1, begin_index, -1 do
    if array[i] == value then
      return i
    end
  end
  return -1
end

-- 修改array中的所有元素
---@generic T,R
---@param array T[]
---@param func fun(key:number, value:T):R
function table.ConvertAll_Array(array, func)
  for i = 1, #array do
    array[i] = func(array[i])
  end
end

-- 修改array中的所有元素
---@generic T
---@param source T[]
---@param dest T[]
---@param source_begin_index number @默认从1开始
---@param count number @默认sourceBeginIndex之后的长度
---@return T[]
function table.CopyTo_Array(source, dest, source_begin_index, count)
  source_begin_index = source_begin_index or 1
  count = count or (#source + 1 - source_begin_index)
  if source_begin_index + count > #source then
    count = #source - source_begin_index
  end
  for i = source_begin_index, source_begin_index + count - 1 do
    table.insert(dest, source[i])
  end
end

-- 查找符合条件的T
---@generic T
---@param array T[]
---@param match_func fun(value:T):boolean
---@return T
function table.Find_Array(array, match_func)
  for i = 1, #array do
    if match_func(array[i]) then
      return array[i]
    end
  end
  return nil
end

-- 查找符合条件的T,最后一个
---@generic T
---@param array T[]
---@param match_func fun(value:T):boolean
---@return T
function table.FindLast_Array(array, match_func)
  for i = #array, 1, -1 do
    if match_func(array[i]) then
      return array[i]
    end
  end
  return nil
end

-- 查找符合条件的所有T
---@generic T
---@param array T[]
---@param match_func fun(value:T):boolean
---@return T[]
function table.FindAll_Array(array, match_func)
  local result = {}
  for i = 1, #array do
    if match_func(array[i]) then
      table.insert(result, array[i])
    end
  end
  return result
end

-- 查找符合条件的Index
---@generic T
---@param array T[]
---@param match_func fun(value:T):boolean
---@param start_index number
---@param count number
---@return number
function table.FindIndex_Array(array, match_func, start_index, count)
  start_index = start_index or 1
  count = count or (#array + 1 - start_index)
  for i = start_index, start_index + count - 1 do
    if match_func(array[i]) then
      return i
    end
  end
  return -1
end

-- 查找符合条件的Index，最后一个
---@generic T
---@param array T[]
---@param match_func fun(value:T):boolean
---@param start_index number
---@param count number
---@return number
function table.FindLatIndex_Array(array, match_func, start_index, count)
  start_index = start_index or 1
  count = count or (#array + 1 - start_index)
  for i = start_index + count - 1, start_index, -1 do
    if match_func(array[i]) then
      return i
    end
  end
  return -1
end

-- 在index插入集合
---@generic T
---@param array T[]
---@param index number
---@param insert_array T[]
---@return number
function table.InsertRange_Array(array, index, insert_array)
  index = index or #array + 1
  for i = 1, #insert_array do
    table.insert(array, index + i - 1, insert_array[i])
  end
end

function table.AddRange_Array(array, add_array)
  table.InsertRange_Array(array, nil, add_array)
end

-- 删除符合条件的集合
---@generic T
---@param array T[]
---@param match_func fun(value:T):boolean
function table.RemoveAll_Array(array, match_func)
  for i = #array, 1, -1 do
    if match_func then
      if match_func(array[i]) then
        table.remove(array, i)
      end
    else
      table.remove(array,i)
    end
  end
end


---@param t any[]
---@param remove_func fun(key:any,value:any):boolean
function table.RemoveByFunc_Array(t, remove_func)
  for i = #t, 1, -1 do
    if remove_func(i,t[i]) then
      table.remove(t, i)
    end
  end
end

---@param t any[]
---@param sub_array any[]
function table.RemoveElementsOfSub_Array(t, sub_array)
  return table.RemoveByFunc_Array(t, function(key,value)
    for _,sub_element in ipairs(sub_array) do
      if sub_element == value then
        return true
      end
    end
  end)
end


-- 删除集合范围
---@generic T
---@param array T[]
---@param index number
---@param count number
function table.RemoveRange_Array(array, index, count)
  index = index or 1
  count = count or #array - index + 1
  for i = index + count - 1, index, -1 do
    table.remove(array, i)
  end
end

-- 查找T集合
---@generic T
---@param array T[]
---@param start_index number
---@param count number
---@return T[]
function table.GetRange_Array(array, start_index, count)
  local result = {}
  start_index = start_index or 1
  count = count or (#array + 1 - start_index)
  for i = start_index, start_index + count - 1 do
    table.insert(result, array[i])
  end
  return result
end

-- 返回第一个
---@generic T
---@param array T[]
---@return T
function table.First_Array(array)
  if not array or #array == 0 then
    return nil
  else
    return array[1]
  end
end

-- 返回最后一个
---@generic T
---@param array T[]
---@return T
function table.Last_Array(array)
  if not array or #array == 0 then
    return nil
  else
    return array[#array]
  end
end

-- 根据权重返回随机的index
---@param array number[]
---@return  number
function table.RandomIndexByWeights_Array(weight_array)
  local total = 0
  for i = 1, #weight_array do
    total = total + weight_array[i]
  end

  local random_value = total * math.random()

  local compare = 0
  for i = 1, #weight_array do
    compare = compare + weight_array[i]
    if random_value < compare then
      return i
    end
  end
  -- random_value == total的时候返回#weight_array
  return #weight_array
end

-- 根据权重返回随机的indexes
---@param array number[]
---@param count number
---@param is_unique boolean
---@return  number
function table.RandomIndexesByWeights_Array(weight_array, count, is_unique)
  local result = {}
  local weight_clone_array = table.Clone(weight_array)
  for i = 1, count do
    local random_index = table.RandomIndexByWeights_Array(weight_clone_array)
    table.insert(result, random_index)
    if is_unique then
      weight_clone_array[random_index] = 0
    end
  end
  return result
end

-- 随机数组array里面的num个元素
---@generic T
---@param array T[]
---@param num number @随机个数，不填则为array长度个
---@param is_unique boolean @是否唯一（不重复） 不填则为true（唯一，不重复)
---@param weight_array number[] @权重数组
---@return  T[]
function table.Random_Array(array, num, is_unique, weight_array)
  local result = {}
  is_unique = is_unique and is_unique or false
  num = num or #array
  if not weight_array then
    weight_array = {}
    for i = 1, #array do
      table.insert(weight_array, 1)
    end
  end
  -- 补全weight_array
  for i = #weight_array, #array do
    table.insert(weight_array, 0)
  end

  local random_indexes = table.RandomIndexesByWeights_Array(weight_array, num, is_unique)
  for i = 1, #random_indexes do
    table.insert(result, array[random_indexes[i]])
  end
  return result
end

-- 随机数组array里面的num个元素
---@generic T
---@param array T[]
---@param weight_array number[] @权重数组
---@return  T
function table.RandomOne_Array(array, weight_array)
  return table.Random_Array(array, 1, false, weight_array)[1]
end


-- 寻找数组array中最大的value中value对应的index,不存在则返回-1
---@generic T
---@param array T[]
---@param from_index number
---@param end_index number @不填则为#array
---@param max_index number @不填则为#array
---@return
function table.Sub_Array(array, from_index, end_index, max_index)
  from_index = from_index or 1
  end_index = end_index or #array
  max_index = max_index or #array
  local result = {}
  for i = 1, math.min(end_index, max_index) do
    table.insert(result, array[i])
  end
  return result
end

-- Push推入一个元素到数组最后
---@generic T
---@param array T[]
---@return  T
function table.Push_Array(array, element)
  array[#array + 1] = element
end

-- 把数组当成stack,弹出
---@generic T
---@param array T[]
---@return  T
function table.Pop_Stack(array)
  local result = table.Peek_Stack(array)
  table.remove(array, #array)
  return result
end

-- 把数组当成stack,取出栈顶第一个，但不弹出
---@generic T
---@param array T[]
---@return  T
function table.Peek_Stack(array)
  local result = array[#array]
  return result
end

-- 把数组当成Queue,弹出
---@generic T
---@param array T[]
---@return  T
function table.Pop_Queue(array)
  local result = table.remove(array, 1)
  return result
end

-- 把数组当成Queue,取出队列第一个，但不弹出
---@generic T
---@param array T[]
---@return  T
function table.Peek_Queue(array)
  local result = array[1]
  return result
end

-- 删除array中的元素值为...的元素
function table.RemoveByValue_Array(array, ...)
  local to_remove_list = table.GetArgs(...)
  --local to_remove_dict = table.ArrayToDict(to_remove_list)
  --for i = #array, 1,-1 do
  --  local v = array[i]
  --  local value = v == nil and "__nil__" or v
  --  if to_remove_dict[value] then
  --    table.remove(array, i)
  --  end
  --end
  for i = #array, 1,-1 do
    local v = array[i]
    for j=1, #to_remove_list do
      if to_remove_list[j] == v then
        table.remove(array,i)
        break
      end
    end
  end
  return array
end

-- 去重
function table.Unique_Array(array, value_func)
  local len, record = #array, {}
  for i = len, 1, -1 do
    local value = value_func and value_func(array[i]) or array[i]
    if value ~= nil and not record[value] then
      record[value] = true
    else
      table.remove(array, i)
    end
  end
end

-- 将指定数组里不符合规则的元素移除，可指定是否返回一个新数组。
-- 输入：（1）array，要移除元素的数组；
--       （2）cond_func(item)，判断一个元素是不是要移除的，若为空则出错。
--       （3）is_get_new，是不是返回新数组，默认不是。
-- 输出：（1）new_array，移除了原数组中要移除元素的新数组；或者仅从原数组中删除，不返回。
function table.Filter_Array(array, cond_func, is_get_new)
  is_get_new = is_get_new or false
  if is_get_new then
    local new_array = {}
    for k, v in ipairs(array) do
      if not cond_func(v) then
        table.insert(new_array, v)
      end
    end
    return new_array
  else
    local len = #array
    for i = len, 1, -1 do
      if cond_func(array[i]) then
        table.remove(array, i)
      end
    end
  end
end

-- 将指定数组里的元素，通过赋值函数转为键值表
-- 输入：（1）array，要转换的数组。
--       （2）value_func(item, key),给元素指定一个值的方法，若为空则将元素映射为true。
-- 输出：（1）list，以数组元素为键，指定值为值的表。
-- 用途：（1）生成有效牌的表；（2）记录要删除的元素然后删除。
function table.ArrayToDict(array, value_func)
  local dict = {}
  local nil_string = "__nil__"
  if value_func then
    for k, v in ipairs(array) do
      if v == nil then
        dict[nil_string] = value_func(v, k)
      else
        dict[v] = value_func(v, k)
      end
    end
  else
    for _, v in ipairs(array) do
      if v == nil then
        dict[nil_string] = true
      else
        dict[v] = true
      end
    end
  end
  return dict
end

---@return any[][]
function table.InitArrays(height)
  local result = {}
  for i=1, height do
    table.insert(result, {})
  end
  return result
end

--转为左下为原点的坐标系，x增加是向右，y增加是向上（与unity的坐标系一致）
---@param arrays any[][]
function table.ToLeftBottomBaseArrays(arrays)
  local arrays_height = #arrays
  local arrays_width = #arrays[1]
  local result_height = arrays_width
  local result_width = arrays_height
  local result = table.InitArrays(result_height)
  for  i = 1,  result_width do
    for  j = 1,  result_height do
      result[j][result_width - i + 1] = arrays[i][j]
    end
  end
  return result
end