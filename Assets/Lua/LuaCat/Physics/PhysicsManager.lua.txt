---@class PhysicsManager:TickObject
local PhysicsManager = Class("PhysicsManager", TickObject)

function PhysicsManager:Init()
	PhysicsManager.super.Init(self)
	self._raycastKeyInt = 0
	---@type table<string,fun()[]>
	self._onClickDict = {}
	---@type table<string,fun()[]>
	self._onPointerDownDict = {}
	---@type table<string,fun()[]>
	self._onPointerUpDict = {}
	self._raycastLayerMask = nil
end

---@param ... string[]
function PhysicsManager:SetRaycastLayer(...)
	if not ... then
		self._raycastLayerMask = nil
	else
		self._raycastLayerMask = CS.UnityEngine.LayerMask.GetMask(...)
	end
end

function PhysicsManager:_SetIsCanRaycast(isCanRaycast)
	self.isCanRaycast = isCanRaycast
end

function PhysicsManager:_UpdateRaycastState()
	if table.Count(self._onPointerDownDict) == 0 and
		table.Count(self._onPointerUpDict) == 0 and
		table.Count(self._onClickDict) == 0
	then
		self:_SetIsCanRaycast(false)
	else
		self:_SetIsCanRaycast(true)
	end
end

---@param gameObject CS.UnityEngine.GameObject
function PhysicsManager:_GetOrAddRaycastId(gameObject)
	return gameObject:GetOrAddCache("raycastIdLua", function()
		self._raycastKeyInt = self._raycastKeyInt + 1
		return tostring(self._raycastKeyInt)
	end)
end

function PhysicsManager:RegisterOnPointerDown(gameObject, callback)
	local raycastId = self:_GetOrAddRaycastId(gameObject)
	local callbackList = table.GetOrAddDefault_Dict(self._onPointerDownDict, raycastId, function()
		return {}
	end)
	table.insert(callbackList, callback)
	self:_UpdateRaycastState()
	return callbackList
end

function PhysicsManager:RegisterOnPointerUp(gameObject, callback)
	local raycastId = self:_GetOrAddRaycastId(gameObject)
	local callbackList = table.GetOrAddDefault_Dict(self._onPointerUpDict, raycastId, function()
		return {}
	end)
	table.insert(callbackList, callback)
	self:_UpdateRaycastState()
	return callbackList
end

function PhysicsManager:RegisterOnClick(gameObject, callback)
	local raycastId = self:_GetOrAddRaycastId(gameObject)
	local callbackList = table.GetOrAddDefault_Dict(self._onClickDict, raycastId, function()
		return {}
	end)
	table.insert(callbackList, callback)
	self:_UpdateRaycastState()
	return callbackList
end

function PhysicsManager:UnRegisterOnPointerDown(gameObject, callback)
	local raycastId = self:_GetOrAddRaycastId(gameObject)
	local callbackList = table.GetOrAddDefault_Dict(self._onPointerDownDict, raycastId, function()
		return {}
	end)
	if callback then
		table.RemoveByValue_Array(callbackList, callback)
	else
		callbackList = {}
	end
	if #callbackList == 0 then
		self._onPointerDownDict[raycastId] = nil
	end
	self:_UpdateRaycastState()
end

function PhysicsManager:UnRegisterOnPointerUp(gameObject, callback)
	local raycastId = self:_GetOrAddRaycastId(gameObject)
	local callbackList = table.GetOrAddDefault_Dict(self._onPointerUpDict, raycastId, function()
		return {}
	end)
	if callback then
		table.RemoveByValue_Array(callbackList, callback)
	else
		callbackList = {}
	end
	if #callbackList == 0 then
		self._onPointerUpDict[raycastId] = nil
	end
	self:_UpdateRaycastState()
end

function PhysicsManager:UnRegisterOnClick(gameObject, callback)
	local raycastId = self:_GetOrAddRaycastId(gameObject)
	local callbackList = table.GetOrAddDefault_Dict(self._onClickDict, raycastId, function()
		return {}
	end)
	if callback then
		table.RemoveByValue_Array(callbackList, callback)
	else
		callbackList = {}
	end
	if #callbackList == 0 then
		self._onClickDict[raycastId] = nil
	end
	self:_UpdateRaycastState()
end

function PhysicsManager:OnRaycast(hit)
	---@type CS.UnityEngine.RaycastHit
	self._lastHit = hit
	self:Broadcast(PhysicsEventNameConst.OnRaycast, hit.transform.gameObject)
end

function PhysicsManager:_Callback(dictName, raycastId)
	if not raycastId then
		return
	end
	local dict = self[dictName]
	if not dict[raycastId] then
		return
	end
	for _, callback in ipairs(dict[raycastId]) do
		callback()
	end
end

function PhysicsManager:IsCanUpdate()
	return self.isCanRaycast and PhysicsManager.super.IsCanUpdate(self)
end

function PhysicsManager:_Update(deltaTime, unscaledDeltaTime)
	PhysicsManager.super._Update(self, deltaTime, unscaledDeltaTime)
	if Input.GetMouseButtonDown(0) and not self._isClickDown then
		if UIUtil.IsOverUI(Input.mousePosition) then
			-- 点击在UI上的不用处理
			return
		end
		self._isClickDown = true
		global.client.csClient.physicsManager:Raycast(Input.mousePosition, self._raycastLayerMask)
		self:_OnPointerDown()
	elseif Input.GetMouseButtonUp(0) then
		self._isClickDown = false
		self:_OnPointerUp()
	end
end

---@param hit CS.UnityEngine.RaycastHit
function PhysicsManager:_GetRaycastIdByHit(hit)
	local gameObject = hit.transform.gameObject
	return self:_GetOrAddRaycastId(gameObject)
end

function PhysicsManager:_OnPointerDown()
	if self._lastHit then
		local raycast_id = self:_GetRaycastIdByHit(self._lastHit)
		self:_Callback("onPointerDownDict", raycast_id)
	end
end

function PhysicsManager:_OnPointerUp()
	if self._lastHit then
		local raycastId = self:_GetRaycastIdByHit(self._lastHit)
		self:_Callback("onPointerUpDict", raycastId)
		self:_Callback("onClickDict", raycastId)
		self._lastHit = nil
	end
end

---------------------------------------2D---------------------------------------
function PhysicsManager:OnCollisionEnter2D(gameObject, otherCollision)
	self:Broadcast(PhysicsEventNameConst.OnCollisionEnter2D, gameObject, otherCollision)
end
function PhysicsManager:OnCollisionExit2D(gameObject, otherCollision)
	self:Broadcast(PhysicsEventNameConst.OnCollisionExit2D, gameObject, otherCollision)
end
function PhysicsManager:OnCollisionStay2D(gameObject, otherCollision)
	self:Broadcast(PhysicsEventNameConst.OnCollisionStay2D, gameObject, otherCollision)
end
function PhysicsManager:OnTriggerEnter2D(gameObject, otherCollider)
	self:Broadcast(PhysicsEventNameConst.OnTriggerEnter2D, gameObject, otherCollider)
end
function PhysicsManager:OnTriggerStay2D(gameObject, otherCollider)
	self:Broadcast(PhysicsEventNameConst.OnTriggerStay2D, gameObject, otherCollider)
end
function PhysicsManager:OnTriggerExit2D(gameObject, otherCollider)
	self:Broadcast(PhysicsEventNameConst.OnTriggerExit2D, gameObject, otherCollider)
end
---------------------------------------3D---------------------------------------
function PhysicsManager:OnCollisionEnter(gameObject, otherCollision)
	self:Broadcast(PhysicsEventNameConst.OnCollisionEnter, gameObject, otherCollision)
end
function PhysicsManager:OnCollisionExit(gameObject, otherCollision)
	self:Broadcast(PhysicsEventNameConst.OnCollisionExit, gameObject, otherCollision)
end
function PhysicsManager:OnCollisionStay(gameObject, otherCollision)
	self:Broadcast(PhysicsEventNameConst.OnCollisionStay, gameObject, otherCollision)
end
function PhysicsManager:OnTriggerEnter(gameObject, otherCollider)
	self:Broadcast(PhysicsEventNameConst.OnTriggerEnter, gameObject, otherCollider)
end
function PhysicsManager:OnTriggerStay(gameObject, otherCollider)
	self:Broadcast(PhysicsEventNameConst.OnTriggerStay, gameObject, otherCollider)
end
function PhysicsManager:OnTriggerExit(gameObject, otherCollider)
	self:Broadcast(PhysicsEventNameConst.OnTriggerExit, gameObject, otherCollider)
end

return PhysicsManager