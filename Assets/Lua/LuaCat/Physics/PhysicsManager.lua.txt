---@class PhysicsManager:TickObject
local PhysicsManager = Class("PhysicsManager", TickObject)

function PhysicsManager:Init()
	PhysicsManager.super.Init(self)
	self.raycastKeyInt = 0
	---@type table<string,fun()[]>
	self.onClickDict = {}
	---@type table<string,fun()[]>
	self.onPointerDownDict = {}
	---@type table<string,fun()[]>
	self.onPointerUpDict = {}
	self.raycastLayerMask = nil
end

---@param ... string[]
function PhysicsManager:SetRaycastLayer(...)
	if not ... then
		self.raycastLayerMask = nil
	else
		self.raycastLayerMask = CS.UnityEngine.LayerMask.GetMask(...)
	end
end

function PhysicsManager:__SetIsCanRaycast(isCanRaycast)
	self.isCanRaycast = isCanRaycast
end

function PhysicsManager:__UpdateRaycastState()
	if table.Count(self.onPointerDownDict) == 0 and
			table.Count(self.onPointerUpDict) == 0 and
			table.Count(self.onClickDict) == 0
	then
		self:__SetIsCanRaycast(false)
	else
		self:__SetIsCanRaycast(true)
	end
end

---@param gameObject CS.UnityEngine.GameObject
function PhysicsManager:__GetOrAddRaycastId(gameObject)
	return gameObject:GetOrAddCache("raycast_id_lua", function()
		self.raycastKeyInt = self.raycastKeyInt + 1
		return tostring(self.raycastKeyInt)
	end)
end

function PhysicsManager:RegisterOnPointerDown(gameObject, callback)
	local raycastId = self:__GetOrAddRaycastId(gameObject)
	local callbackList = table.GetOrAddDefault_Dict(self.onPointerDownDict, raycastId, function()
		return {}
	end)
	table.insert(callbackList, callback)
	self:__UpdateRaycastState()
	return callbackList
end

function PhysicsManager:RegisterOnPointerUp(gameObject, callback)
	local raycastId = self:__GetOrAddRaycastId(gameObject)
	local callbackList = table.GetOrAddDefault_Dict(self.onPointerUpDict, raycastId, function()
		return {}
	end)
	table.insert(callbackList, callback)
	self:__UpdateRaycastState()
	return callbackList
end

function PhysicsManager:RegisterOnClick(gameObject, callback)
	local raycastId = self:__GetOrAddRaycastId(gameObject)
	local callbackList = table.GetOrAddDefault_Dict(self.onClickDict, raycastId, function()
		return {}
	end)
	table.insert(callbackList, callback)
	self:__UpdateRaycastState()
	return callbackList
end

function PhysicsManager:UnRegisterOnPointerDown(gameObject, callback)
	local raycastId = self:__GetOrAddRaycastId(gameObject)
	local callbackList = table.GetOrAddDefault_Dict(self.onPointerDownDict, raycastId, function()
		return {}
	end)
	if callback then
		table.RemoveByValue_Array(callbackList, callback)
	else
		callbackList = {}
	end
	if #callbackList == 0 then
		self.onPointerDownDict[raycastId] = nil
	end
	self:__UpdateRaycastState()
end

function PhysicsManager:UnRegisterOnPointerUp(gameObject, callback)
	local raycastId = self:__GetOrAddRaycastId(gameObject)
	local callbackList = table.GetOrAddDefault_Dict(self.onPointerUpDict, raycastId, function()
		return {}
	end)
	if callback then
		table.RemoveByValue_Array(callbackList, callback)
	else
		callbackList = {}
	end
	if #callbackList == 0 then
		self.onPointerUpDict[raycastId] = nil
	end
	self:__UpdateRaycastState()
end

function PhysicsManager:UnRegisterOnClick(gameObject, callback)
	local raycastId = self:__GetOrAddRaycastId(gameObject)
	local callbackList = table.GetOrAddDefault_Dict(self.onClickDict, raycastId, function()
		return {}
	end)
	if callback then
		table.RemoveByValue_Array(callbackList, callback)
	else
		callbackList = {}
	end
	if #callbackList == 0 then
		self.onClickDict[raycastId] = nil
	end
	self:__UpdateRaycastState()
end

function PhysicsManager:OnRaycast(hit)
	---@type CS.UnityEngine.RaycastHit
	self.lastHit = hit
	self:Broadcast(PhysicsEventNameConst.OnRaycast, hit.transform.gameObject)
end

function PhysicsManager:__Callback(dictName, raycastId)
	if not raycastId then
		return
	end
	local dict = self[dictName]
	if not dict[raycastId] then
		return
	end
	for _, callback in ipairs(dict[raycastId]) do
		callback()
	end
end

function PhysicsManager:IsCanUpdate()
	return self.isCanRaycast and PhysicsManager.super.IsCanUpdate(self)
end

function PhysicsManager:__Update(deltaTime, unscaledDeltaTime)
	PhysicsManager.super.__Update(self, deltaTime, unscaledDeltaTime)
	if Input.GetMouseButtonDown(0) and not self.isClickDown then
		if UIUtil.IsOverUI(Input.mousePosition) then
			-- 点击在UI上的不用处理
			return
		end
		self.isClickDown = true
		global.client.csClient.physicsManager:Raycast(Input.mousePosition, self.raycastLayerMask)
		self:__OnPointerDown()
	elseif Input.GetMouseButtonUp(0) then
		self.isClickDown = false
		self:__OnPointerUp()
	end
end

---@param hit CS.UnityEngine.RaycastHit
function PhysicsManager:__GetRaycastIdByHit(hit)
	local gameObject = hit.transform.gameObject
	return self:__GetOrAddRaycastId(gameObject)
end

function PhysicsManager:__OnPointerDown()
	if self.lastHit then
		local raycast_id = self:__GetRaycastIdByHit(self.lastHit)
		self:__Callback("on_pointer_down_dict", raycast_id)
	end
end

function PhysicsManager:__OnPointerUp()
	if self.lastHit then
		local raycastId = self:__GetRaycastIdByHit(self.lastHit)
		self:__Callback("on_pointer_up_dict", raycastId)
		self:__Callback("on_click_dict", raycastId)
		self.lastHit = nil
	end
end

---------------------------------------2D---------------------------------------
function PhysicsManager:OnCollisionEnter2D(gameObject, otherCollision)
	self:Broadcast(PhysicsEventNameConst.OnCollisionEnter2D, gameObject, otherCollision)
end
function PhysicsManager:OnCollisionExit2D(gameObject, otherCollision)
	self:Broadcast(PhysicsEventNameConst.OnCollisionExit2D, gameObject, otherCollision)
end
function PhysicsManager:OnCollisionStay2D(gameObject, otherCollision)
	self:Broadcast(PhysicsEventNameConst.OnCollisionStay2D, gameObject, otherCollision)
end
function PhysicsManager:OnTriggerEnter2D(gameObject, otherCollider)
	self:Broadcast(PhysicsEventNameConst.OnTriggerEnter2D, gameObject, otherCollider)
end
function PhysicsManager:OnTriggerStay2D(gameObject, otherCollider)
	self:Broadcast(PhysicsEventNameConst.OnTriggerStay2D, gameObject, otherCollider)
end
function PhysicsManager:OnTriggerExit2D(gameObject, otherCollider)
	self:Broadcast(PhysicsEventNameConst.OnTriggerExit2D, gameObject, otherCollider)
end
---------------------------------------3D---------------------------------------
function PhysicsManager:OnCollisionEnter(gameObject, otherCollision)
	self:Broadcast(PhysicsEventNameConst.OnCollisionEnter, gameObject, otherCollision)
end
function PhysicsManager:OnCollisionExit(gameObject, otherCollision)
	self:Broadcast(PhysicsEventNameConst.OnCollisionExit, gameObject, otherCollision)
end
function PhysicsManager:OnCollisionStay(gameObject, otherCollision)
	self:Broadcast(PhysicsEventNameConst.OnCollisionStay, gameObject, otherCollision)
end
function PhysicsManager:OnTriggerEnter(gameObject, otherCollider)
	self:Broadcast(PhysicsEventNameConst.OnTriggerEnter, gameObject, otherCollider)
end
function PhysicsManager:OnTriggerStay(gameObject, otherCollider)
	self:Broadcast(PhysicsEventNameConst.OnTriggerStay, gameObject, otherCollider)
end
function PhysicsManager:OnTriggerExit(gameObject, otherCollider)
	self:Broadcast(PhysicsEventNameConst.OnTriggerExit, gameObject, otherCollider)
end

return PhysicsManager