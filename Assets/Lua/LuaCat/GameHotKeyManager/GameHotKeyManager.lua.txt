local TestA = require("luacat.TestA")
---@class GameShortcutKeyManager:TickObject
local GameShortcutKeyManager = Class("DefaultInputManager", TickObject)

function GameShortcutKeyManager:Init()
	GameShortcutKeyManager.super.Init(self)
	--global.client.buffManager = global.client:AddChild(nil, BuffManager)
	--local hfsm = require("luacat.dataStruct.hfsm.test.CoroutineHFSM.TestCoroutineHFSM").New(self)
	--self.hfsmComponent = self:AddComponent(nil,HFSMComponent,  hfsm)
	--self.hfsmComponent.hfsm:Start()
end

function GameShortcutKeyManager:_Update(deltaTime, unscaledDeltaTime)
	GameShortcutKeyManager.super._Update(self, deltaTime, unscaledDeltaTime)
	if Input.GetKeyDown("f1") then

	end
	if Input.GetKeyDown("f2") then
		--if not self.c then
		--  self.c = TestA:New()
		--end
		--self.c:Hello()
	end
	if Input.GetKeyDown("f3") then
	end
	if Input.GetKeyDown("f4") then
	end
	if Input.GetKeyDown("f5") then
		Reload()
	end
	if Input.GetKeyDown("f6") then
		client:Reboot()
	end
	if Input.GetKeyDown("f7") then
		global.client:GoTo(StageTest, 0.2)
	end
	if Input.GetKeyDown("f8") then
		local info = debug.getinfo(1, "Sl")
		warn(info.source)
	end
	if Input.GetKeyDown("f9") then
		tool.HelloAA()
	end
	if Input.GetKeyDown("f10") then
	end
	if Input.GetKeyDown("f11") then
	end
	if Input.GetKeyDown("f12") then
		local t = { 1, 3, 4, 2, 7, 5, 9, 0, 8, 6 }
		table.QuickSortWithCompareRules_Array(t, { function(a, b)
			return a - b
		end })
		warn(t)
	end

end

return GameShortcutKeyManager