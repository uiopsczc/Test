---@class AStarRange
local AStarRange = Class("AStarRange")
function AStarRange:Init(leftBottomX, leftBottomY, rightTopX, rightTopY)
	self:SetRange(leftBottomX, leftBottomY, rightTopX, rightTopY)
end

function AStarRange:SetRange(leftBottomX, leftBottomY, rightTopX, rightTopY)
	self._leftBottomX = math.min(leftBottomX, rightTopX)
	self._leftBottomY = math.min(leftBottomY, rightTopY)
	self._rightTopX = math.max(leftBottomX, rightTopX)
	self._rightTopY = math.max(leftBottomY, rightTopY)
end

---@return Vector2
function AStarRange:GetCenter()
	return Vector2.New((self._leftBottomX + self._rightTopX) / 2, (self._leftBottomY + self._rightTopY) / 2)
end

---@return Vector2
function AStarRange:GetLeftBottom()
	return Vector2.New(self._leftBottomX, self._leftBottomY)
end

---@return Vector2
function AStarRange:GetRightTop()
	return Vector2.New(self._rightTopX, self._rightTopY)
end

---@return Vector2
function AStarRange:GetRandomPos(randomManager)
	randomManager = randomManager or global.client.randomManager
	local dx = self._rightTopX - self._leftBottomX
	local dy = self._rightTopY - self._leftBottomY
	local x, y
	if dx > 0 then
		x = self._leftBottomX + randomManager:RandomInt(0, math.abs(dx) + 1)
	elseif dx < 0 then
		x = self._leftBottomX - randomManager:RandomInt(0, math.abs(dx) + 1)
	else
		x = self._leftBottomX
	end
	if dy > 0 then
		y = self._leftBottomY + randomManager:RandomInt(0, math.abs(dy) + 1)
	elseif dy < 0 then
		y = self._leftBottomY - randomManager:RandomInt(0, math.abs(dy) + 1)
	else
		y = self._leftBottomY
	end
	return Vector2.New(x, y)
end

function AStarRange:GetWidth()
	return self._rightTopX - self._leftBottomX
end

function AStarRange:GetHeight()
	return self._rightTopY - self._leftBottomY
end

---@param pos Vector2
---@return boolean
function AStarRange:IsInRange(pos)
	return self:IsInRangeX(pos.x) and self:IsInRangeY(pos.y)
end

---@return boolean
function AStarRange:IsInRangeX(x)
	---@type RangeCat
	local rangeX = RangeCat.New(self._leftBottomX, self._rightTopX)
	return rangeX:IsContains(x)
end

---@return boolean
function AStarRange:IsInRangeY(y)
	---@type RangeCat
	local range_y = RangeCat.New(self._leftBottomY, self._rightTopY)
	return range_y:IsContains(y)
end

function AStarRange:__tostring ()
	return string.format("[%s,%s]-[%s,%s]", self._leftBottomX, self._leftBottomY, self._rightTopX, self._rightTopY)
end

return AStarRange

