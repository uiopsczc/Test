---@class AStarMapPathUtilTest
local AStarMapPathUtilTest = {}

local _grids = {
	{ 1, 1, 3, 1, 1, 1 },
	{ 3, 1, 1, 1, 3, 1 },
	{ 3, 1, 1, 1, 1, 1 },
	{ 1, 1, 1, 1, 3, 1 },
	{ 1, 1, 1, 1, 1, 1 },
}
local grids = table.ToLeftBottomBaseArrays(_grids)

function AStarMapPathUtilTest.Test_BorderFindPath()
	local pointList = AStarMapPathUtil.BorderFindPath(AStarMapPath.New(grids), Vector2(1, 1), Vector2(4, 4), AStarMapPathConst.Critter_Can_Pass_Obstacle_Types, AStarMapPathConst.User_Can_Pass_Terrain_Types)
	return function()
		AStarUtil.GUIShowPointList(1, 1, 9, 9, pointList)
	end
end

function AStarMapPathUtilTest.Test_DiagonallyFindPath()
	local pointList = AStarMapPathUtil.DiagonallyFindPath(AStarMapPath.New(grids), Vector2(1, 1), Vector2(4, 4), AStarMapPathConst.Critter_Can_Pass_Obstacle_Types, AStarMapPathConst.User_Can_Pass_Terrain_Types)
	return function()
		AStarUtil.GUIShowPointList(1, 1, 9, 9, pointList)
	end
end

function AStarMapPathUtilTest.Test_DirectFindPath()
	local pointList = AStarMapPathUtil.DirectFindPath(AStarMapPath.New(grids), Vector2(1, 1), Vector2(4, 4), AStarMapPathConst.Critter_Can_Pass_Obstacle_Types, AStarMapPathConst.User_Can_Pass_Terrain_Types)
	return function()
		AStarUtil.GUIShowPointList(1, 1, 9, 9, pointList)
	end
end

return AStarMapPathUtilTest

