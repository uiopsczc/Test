--坐标是x增加是向右，y增加是向上（与unity的坐标系一致），数组用table.ToLeftBottomBaseArrays转换
---@class AStarMapPath
local AStarMapPath = Class("AStarMapPath")
---@param grids number[][]
function AStarMapPath:Init(grids)
	---@type number[][]
	self.grids = grids
	---@type number[][]
	self.projectGrids = table.InitArrays(self:Height())
end

function AStarMapPath:GetFinalGrids()
	if not self.finalGrids then
		self:UpdateFinalGrids()
	end
	return self.finalGrids
end

function AStarMapPath:UpdateFinalGrids()
	self.finalGrids = table.InitArrays(self:Height())
	for i = 1, #self.grids do
		for j = 1, #self.grids[1] do
			local gridType = self.grids[i][j]
			local projectGridType = self.projectGrids[i][j]
			if not projectGridType or projectGridType == 0 then
				--没有project_grid_type，则用grid_type
				self.finalGrids[i][j] = gridType
			else
				local field = AStarUtil.GetField(gridType) --用grid_type的field
				local terrainType = (projectGridType and AStarUtil.GetTerrainType(projectGridType) ~= 0) and AStarUtil.GetTerrainType(projectGridType) or AStarUtil.GetTerrainType(gridType) --覆盖关系
				local obstacleType = (projectGridType and AStarUtil.GetObstacleType(projectGridType) ~= 0) and AStarUtil.GetObstacleType(projectGridType) or AStarUtil.GetObstacleType(gridType) --覆盖关系
				self.finalGrids[i][j] = AStarUtil.ToGridType(field, terrainType, obstacleType)
			end
		end
	end
end

function AStarMapPath:Width()
	return not self.grids and 0 or #self.grids[1]
end

function AStarMapPath:Height()
	return not self.grids and 0 or #self.grids
end

--先对角线查找，再直角查找
function AStarMapPath:DirectFindPath(pointA, pointB, canPassObstacleTypes, canPassTerrainTypes)
	return AStarMapPathUtil.DirectFindPath(self, pointA, pointB, canPassObstacleTypes,
			canPassTerrainTypes)
end
-- 直角寻路(先横向再纵向寻路)
function AStarMapPath:BorderFindPath(pointA, pointB, canPassObstacleTypes, canPassTerrainTypes)
	return AStarMapPathUtil.BorderFindPath(self, pointA, pointB, canPassObstacleTypes,
			canPassTerrainTypes)
end

--对角线寻路
function AStarMapPath:DiagonallyFindPath(pointA, pointB, canPassObstacleTypes, canPassTerrainTypes)
	return AStarMapPathUtil.DiagonallyFindPath(self, pointA, pointB, canPassObstacleTypes, canPassTerrainTypes)
end

--获取P点四周为+-outCount的可以通过的点列表
---@param basePoint Vector2
---@param outCount number
---@param canPassObstacleTypes number[]
---@param canPassTerrainTypes number[]
function AStarMapPath:GetAroundFreePointList(basePoint, outCount, canPassObstacleTypes, canPassTerrainTypes)
	return AStarUtil.GetAroundFreePointList(self, basePoint, outCount, canPassObstacleTypes, canPassTerrainTypes)
end

-- 获取P点四周为+-outCount（包含边界）以内的可以通过的点
---@param basePoint Vector2
---@param outCount number
---@param exceptPointList Vector2[]
---@param canPassObstacleTypes number[]
---@param canPassTerrainTypes number[]
---@param randomManager RandomManager
function AStarMapPath:FindAroundFreePoint(basePoint, outCount, exceptPointList, canPassObstacleTypes, canPassTerrainTypes, randomManager)
	return AStarUtil.FindAroundFreePoint(self, basePoint, outCount, exceptPointList, canPassObstacleTypes, canPassTerrainTypes, randomManager)
end

-- 获得轨迹中可通过的最远点
---@param track_list Vector2[]
---@param canPassObstacleTypes number[]
---@param canPassTerrainTypes number[]
---@param can_pass boolean
function AStarMapPath:GetMostPassPoint(track_list, canPassObstacleTypes, canPassTerrainTypes, canOut)
	return AStarUtil.GetMostPassPoint(self, track_list, canPassObstacleTypes, canPassTerrainTypes, canOut)
end

-- 获得两点之间的连线中可通过的最远点
---@param track_list Vector2[]
---@param canPassObstacleTypes number[]
---@param canPassTerrainTypes number[]
---@param can_pass boolean
function AStarMapPath:GetMostLinePassPoint(lp, tp, canPassObstacleTypes, canPassTerrainTypes, canOut)
	return AStarUtil.GetMostLinePassPoint(self, lp, tp, canPassObstacleTypes, canPassTerrainTypes, canOut)
end

-- 获取离a,b最近的点
function AStarMapPath:GetNearestPoint(pointA, pointB, canPassObstacleTypes, canPassTerrainTypes)
	return AStarUtil.GetNearestPoint(self, pointA, pointB, canPassObstacleTypes, canPassTerrainTypes)
end

---@param track_list Vector2[]
---@param canPassObstacleTypes number[]
---@param canPassTerrainTypes number[]
---@param can_pass boolean
function AStarMapPath:GetRandomMovePoint(basePoint, goalPoint, maxRadiusBetweenTargetPointAndGoalPoint, canPassObstacleTypes, canPassTerrainTypes, randomManager)
	return AStarUtil.GetRandomMovePoint(self, basePoint, goalPoint, maxRadiusBetweenTargetPointAndGoalPoint, canPassObstacleTypes, canPassTerrainTypes, randomManager)
end
-- 获取range范围内的可以通过的格子列表
function AStarMapPath:GetRangeFreePointList(x1, y1, x2, y2, exceptPointList, canPassObstacleTypes, canPassTerrainTypes)
	return AStarUtil.GetRangeFreePointList(self, x1, y1, x2, y2, exceptPointList, canPassObstacleTypes, canPassTerrainTypes)
end
-- 获取range范围内的可以通过的格子
---@param randomManager RandomManager
function AStarMapPath:FindRangeFreePoint(x1, y1, x2, y2, exceptPointList, canPassObstacleTypes, canPassTerrainTypes, randomManager)
	return AStarUtil.FindRangeFreePoint(self, x1, y1, x2, y2, exceptPointList, canPassObstacleTypes, canPassTerrainTypes, randomManager)
end
-- 检测某个点是否可通过
function AStarMapPath:CanPass(x, y, canPassObstacleTypes, canPassTerrainTypes, canOut)
	return AStarUtil.CanPass(self, x, y, canPassObstacleTypes, canPassTerrainTypes, canOut)
end
-- 检测轨迹是否可通过
function AStarMapPath:CanTrackListPass(track_list, canPassObstacleTypes, canPassTerrainTypes, canOut)
	return AStarUtil.CanTrackListPass(self, track_list, canPassObstacleTypes, canPassTerrainTypes, canOut)
end
-- 检测两点间直线是否可通过
function AStarMapPath:CanLinePass(pointA, pointB, canPassObstacleTypes, canPassTerrainTypes, canOut)
	return AStarUtil.CanLinePass(self, pointA, pointB, canPassObstacleTypes, canPassTerrainTypes, canOut)
end

-- 是否有效地图坐标（不含填充区域）
function AStarMapPath:IsValidPoint(x, y)
	if not AStarUtil.IsInRange(self.grids, x, y) then
		return false
	end
	return AStarUtil.IsValidObstacleType(self.grids[x][y])
end

return AStarMapPath

