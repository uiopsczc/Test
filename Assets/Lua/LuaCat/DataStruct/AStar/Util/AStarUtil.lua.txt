--坐标是x增加是向右，y增加是向上（与unity的坐标系一致），数组用table.ToLeftBottomBaseArrays转换
---@class AStarUtil
local AStarUtil = {}

----------------------------------------------------------------------
-- GridType相关
----------------------------------------------------------------------
-- 是否有效障碍
function AStarUtil.IsValidObstacleType(gridType)
	return (gridType & 0xff) ~= AStarMapPathConst.Invalid_Obstacle_Types
end

function AStarUtil.ToGridType(field, terrainType, obstacleType)
	field = field or 0
	terrainType = terrainType or 0
	obstacleType = obstacleType or 0
	return (field << 8) + (terrainType << 3) + obstacleType
end

-- 障碍类型，取后3位, 数值范围[0,7]
function AStarUtil.GetObstacleType(gridType)
	return gridType & 0x7
end

-- 地形类型，取后三位向前的5位 数值范围[0,31]
function AStarUtil.GetTerrainType(gridType)
	return (gridType & 0xff) >> 3
end

-- 区块编号值 ,基于gridType的低16位移除低8位的值
function AStarUtil.GetField(gridType)
	return (gridType & 0xff00) >> 8  -- >>8去掉低8位
end

-- 是否是同一个区块编号值,基于gridType的低16位移除低8位的值
function AStarUtil.IsSameField(v1, v2)
	return AStarUtil.GetField(v1) == AStarUtil.GetField(v2)
end

-- 获取区块的Point，基于Client_View_Width_Grid_Count，Client_View_Height_Grid_Count
---@param p Vector2
function AStarUtil.GetBlockPoint(p)
	local x = math.modf(p.x / AStarMapPathConst.Client_View_Width_Grid_Count)
	local y = math.modf(p.y / AStarMapPathConst.Client_View_Height_Grid_Count)
	return Vector2(x, y)
end

-- 是否在同一区块，基于Client_View_Width_Grid_Count，Client_View_Height_Grid_Count
---@param p Vector2
function AStarUtil.IsSameBlock(p1, p2)
	return AStarUtil.GetBlockPoint(p1) == AStarUtil.GetBlockPoint(p2)
end

-- 是否在相邻区块，block是基于Client_View_Width_Grid_Count，Client_View_Height_Grid_Count
function AStarUtil.IsNeighborBlock(p1X, p1Y, p2X, p2Y)
	local x = math.abs(math.modf((p1X - p2X) / AStarMapPathConst.Client_View_Width_Grid_Count))
	local y = math.abs(math.modf((p1Y - p2Y) / AStarMapPathConst.Client_View_Width_Grid_Count))
	return x <= 1 and y <= 1
end

----------------------------------------------------------------------
-- InRange相关
----------------------------------------------------------------------
---@param rangeGrids number[][]
function AStarUtil.IsInRangeX(rangeGrids, x)
	if x < 1 or x > #rangeGrids then
		return false
	end
	return true
end

---@param rangeGrids number[][]
function AStarUtil.IsInRangeY(rangeGrids, y)
	if y < 1 or y > #rangeGrids[1] then
		return false
	end
	return true
end

---@param rangeGrids number[][]
function AStarUtil.IsInRange(rangeGrids, x, y)
	if not AStarUtil.IsInRangeX(rangeGrids, x) or not AStarUtil.IsInRangeY(rangeGrids, y) then
		return false
	end
	return true
end
----------------------------------------------------------------------
-- Neighbor相关
----------------------------------------------------------------------
---@param basePoint Vector2
---@return Vector2[]
function AStarUtil.GetNeighborList(basePoint)
	local neighborList = {}
	table.insert(neighborList, Vector2(basePoint.x - 1, basePoint.y + 1)) -- 增加左上角邻居节点
	table.insert(neighborList, Vector2(basePoint.x - 1, basePoint.y)) -- 增加左侧邻居节点
	table.insert(neighborList, Vector2(basePoint.x - 1, basePoint.y - 1)) -- 增加左下角的邻居节点
	table.insert(neighborList, Vector2(basePoint.x, basePoint.y + 1)) -- 增加上方邻居节点
	table.insert(neighborList, Vector2(basePoint.x, basePoint.y - 1)) -- 增加下方邻居节点
	table.insert(neighborList, Vector2(basePoint.x + 1, basePoint.y + 1)) -- 增加右上角邻居节点
	table.insert(neighborList, Vector2(basePoint.x + 1, basePoint.y)) -- 增加右侧邻居节点
	table.insert(neighborList, Vector2(basePoint.x + 1, basePoint.y - 1)) -- 增加右下角邻居节点
	return neighborList
end

---@param basePoint Vector2
---@return Vector2[]
function AStarUtil.GetLeftTopNeighborList(basePoint)
	local neighborList = {}
	table.insert(neighborList, Vector2(basePoint.x - 1, basePoint.y + 1)) -- 增加左上角邻居节点
	table.insert(neighborList, Vector2(basePoint.x - 1, basePoint.y)) -- 增加左侧邻居节点
	table.insert(neighborList, Vector2(basePoint.x, basePoint.y + 1)) -- 增加上方邻居节点
	return neighborList
end

---@param basePoint Vector2
---@return Vector2[]
function AStarUtil.GetLeftBottomNeighborList(basePoint)
	local neighborList = {}
	table.insert(neighborList, Vector2(basePoint.x - 1, basePoint.y)) -- 增加左侧邻居节点
	table.insert(neighborList, Vector2(basePoint.x - 1, basePoint.y - 1)) -- 增加左下角的邻居节点
	table.insert(neighborList, Vector2(basePoint.x, basePoint.y - 1)) -- 增加下方邻居节点
	return neighborList
end

---@param basePoint Vector2
---@return Vector2[]
function AStarUtil.GetRightTopNeighborList(basePoint)
	local neighborList = {}
	table.insert(neighborList, Vector2(basePoint.x, basePoint.y + 1)) -- 增加上方邻居节点
	table.insert(neighborList, Vector2(basePoint.x + 1, basePoint.y + 1)) -- 增加右上角邻居节点
	table.insert(neighborList, Vector2(basePoint.x + 1, basePoint.y)) -- 增加右侧邻居节点
	return neighborList
end

---@param basePoint Vector2
---@return Vector2[]
function AStarUtil.GetRightBottomNeighborList(basePoint)
	local neighborList = {}
	table.insert(neighborList, Vector2(basePoint.x + 1, basePoint.y)) -- 增加右侧邻居节点
	table.insert(neighborList, Vector2(basePoint.x + 1, basePoint.y - 1)) -- 增加右下角邻居节点
	table.insert(neighborList, Vector2(basePoint.x, basePoint.y - 1)) -- 增加下方邻居节点
	return neighborList
end

---@param o Vector2
---@param p Vector2
---@return Vector2[]
function AStarUtil.GetOppositeNeighborList(o, p)
	local list = AStarUtil.GetNeighborList(o)
	local dx = p.x > o.x and 1 or p.x < o.x and -1 or 0
	local dy = p.y > o.y and 1 or p.y < o.y and -1 or 0

	table.RemoveByValue_Array(list, Vector2(o.x + dx, o.y + dy))
	if dx == 0 then
		table.RemoveByValue_Array(list, Vector2(o.x + 1, o.y + dy))
		table.RemoveByValue_Array(list, Vector2(o.x - 1, o.y + dy))
	elseif dy == 0 then
		table.RemoveByValue_Array(list, Vector2(o.x + dx, o.y + 1))
		table.RemoveByValue_Array(list, Vector2(o.x + dx, o.y - 1))
	else
		table.RemoveByValue_Array(list, Vector2(o.x, o.y + dy))
		table.RemoveByValue_Array(list, Vector2(o.x + dx, o.y))
	end
	return list
end

----------------------------------------------------------------------
-- ViewingRange相关
----------------------------------------------------------------------
-- 获得leftBottom和rightTop的范围两边外延（AStarConst.Client_View_Width_Grid_Count / 2，AStarConst.Client_View_Height_Grid_Count / 2） 可见范围
---@param leftBottom Vector2
---@param rightTop Vector2
---@return AStarRange
function AStarUtil.GetViewingRange(leftBottom, rightTop)
	rightTop = rightTop or leftBottom
	local minX = math.min(leftBottom.x, rightTop.x) - AStarMapPathConst.Client_View_Width_Grid_Count / 2
	local minY = math.min(leftBottom.y, rightTop.y) - AStarMapPathConst.Client_View_Height_Grid_Count / 2
	local maxX = math.max(leftBottom.x, rightTop.x) + AStarMapPathConst.Client_View_Width_Grid_Count / 2
	local maxY = math.max(leftBottom.y, rightTop.y) + AStarMapPathConst.Client_View_Height_Grid_Count / 2
	return AStarRange.New(minX, minY, maxX, maxY)
end

-- 是否在视图内
---@param viewingRangeBasePoint Vector2
---@param checkPoint Vector2
function AStarUtil.IsInViewingRange(viewingRangeBasePoint, checkPoint)
	return AStarUtil.GetViewingRange(viewingRangeBasePoint, viewingRangeBasePoint):IsInRange(checkPoint)
end
----------------------------------------------------------------------
-- CanPass相关
----------------------------------------------------------------------
-- 检测某个点是否可通过
---@param gridsOrAStarMapPath number[][]|AStarMapPath
---@param x number
---@param y number
---@param canPassObstacleTypes number[]
---@param canPassTerrainTypes number[]
---@param isCanOut boolean @是否允许在场景外
function AStarUtil.IsCanPass(gridsOrAStarMapPath, x, y, canPassObstacleTypes, canPassTerrainTypes, isCanOut)
	if IsInstanceOf(gridsOrAStarMapPath, "AStarMapPath") then
		return AStarUtil._CanPass2(gridsOrAStarMapPath, x, y, canPassObstacleTypes, canPassTerrainTypes, isCanOut)
	else
		return AStarUtil._CanPass1(gridsOrAStarMapPath, x, y, canPassObstacleTypes, canPassTerrainTypes)
	end
end

---@param girds number[][]
---@param x number
---@param y number
---@param canPassObstacleTypes number[]
---@param canPassTerrainTypes number[]
function AStarUtil._CanPass1(grids, x, y, canPassObstacleTypes, canPassTerrainTypes)
	local gridType = grids[x][y]
	if gridType then
		local gridObstacleType = AStarUtil.GetObstacleType(gridType)
		if gridObstacleType ~= 0 and canPassObstacleTypes[gridObstacleType + 1] == 0 then
			-- gridObstacleType+1是因为lua数组从1开始
			-- 障碍
			return false
		end

		local gridTerrainType = AStarUtil.GetTerrainType(gridType)
		if gridTerrainType ~= 0 and canPassTerrainTypes[gridTerrainType + 1] == 0 then
			-- gridObstacleType+1是因为lua数组从1开始
			-- 地形
			return false
		end
	end

	return true
end

---@param astarMapPath AStarMapPath
---@param x number
---@param y number
---@param canPassObstacleTypes number[]
---@param canPassTerrainTypes number[]
---@param isCanOut boolean
function AStarUtil._CanPass2(astarMapPath, x, y, canPassObstacleTypes, canPassTerrainTypes, isCanOut)
	if not AStarUtil.IsInRange(astarMapPath:GetFinalGrids(), x, y) then
		return isCanOut
	end
	local gridType = astarMapPath:GetFinalGrids()[x][y] -- 固有地形+障碍
	if not AStarUtil.IsValidObstacleType(gridType) then
		-- 填充区域
		return isCanOut
	end
	if not AStarUtil.IsCanPass(astarMapPath:GetFinalGrids(), x, y, canPassObstacleTypes, canPassTerrainTypes) then
		return false
	end
	return true
end

-- 检测轨迹是否可通过
---@param astarMapPath AStarMapPath
---@param trackList Vector2[]
---@param canPassObstacleTypes number[]
---@param canPassTerrainTypes number[]
---@param isCanOut boolean @是否允许在场景外
function AStarUtil.IsTrackListCanPass(astarMapPath, trackList, canPassObstacleTypes, canPassTerrainTypes, isCanOut)
	if #trackList == 0 then
		return true
	end
	local lp = trackList[1]
	if #trackList == 1 then
		return AStarUtil.IsCanPass(astarMapPath, lp.x, lp.y, canPassObstacleTypes, canPassTerrainTypes, isCanOut)
	end
	for i = 2, #trackList do
		local p = trackList[i]
		if not AStarUtil.IsCanPass(astarMapPath, p.x, p.y, canPassObstacleTypes, canPassTerrainTypes, isCanOut) then
			return false
		end
		local directionInfo = DirectionConst.GetDirectionInfo(p.x - lp.x, p.y - lp.y)
		if directionInfo == DirectionConst.GetDirectionInfo("leftTop") then
			-- 左上角
			if not AStarUtil.IsCanPass(astarMapPath, p.x + 1, p.y, canPassObstacleTypes, canPassTerrainTypes, isCanOut) then
				return false
			end
			if not AStarUtil.IsCanPass(astarMapPath, p.x, p.y - 1, canPassObstacleTypes, canPassTerrainTypes, isCanOut) then
				return false
			end
		end
		if directionInfo == DirectionConst.GetDirectionInfo("rightTop") then
			-- 右上角
			if not AStarUtil.IsCanPass(astarMapPath, p.x - 1, p.y, canPassObstacleTypes, canPassTerrainTypes, isCanOut) then
				return false
			end
			if not AStarUtil.IsCanPass(astarMapPath, p.x, p.y - 1, canPassObstacleTypes, canPassTerrainTypes, isCanOut) then
				return false
			end
		end
		if directionInfo == DirectionConst.GetDirectionInfo("rightBottom") then
			-- 右下角
			if not AStarUtil.IsCanPass(astarMapPath, p.x - 1, p.y, canPassObstacleTypes, canPassTerrainTypes, isCanOut) then
				return false
			end
			if not AStarUtil.IsCanPass(astarMapPath, p.x, p.y + 1, canPassObstacleTypes, canPassTerrainTypes, isCanOut) then
				return false
			end
		end
		if directionInfo == DirectionConst.GetDirectionInfo("leftBottom") then
			-- 左下角
			if not AStarUtil.IsCanPass(astarMapPath, p.x + 1, p.y, canPassObstacleTypes, canPassTerrainTypes, isCanOut) then
				return false
			end
			if not AStarUtil.IsCanPass(astarMapPath, p.x, p.y + 1, canPassObstacleTypes, canPassTerrainTypes, isCanOut) then
				return false
			end
		end
		lp = p
	end
	return true
end

-- 检测两点间直线是否可通过
---@param astarMapPath AStarMapPath
---@param pointA Vector2
---@param pointB Vector2
---@param canPassObstacleTypes number[]
---@param canPassTerrainTypes number[]
---@param isCanOut boolean
function AStarUtil.IsLineCanPass(astarMapPath, pointA, pointB, canPassObstacleTypes, canPassTerrainTypes, isCanOut)
	if not isCanOut and (not AStarUtil.IsInRange(astarMapPath:GetFinalGrids(), pointA.x, pointA.y) or not AStarUtil.IsInRange(astarMapPath:GetFinalGrids(), pointB.x, pointB.y)) then
		return false
	end
	local linePointList = AStarUtil.GetLinePointList(pointA, pointB)
	if not AStarUtil.IsTrackListCanPass(astarMapPath, linePointList, canPassObstacleTypes, canPassTerrainTypes, isCanOut) then
		return false
	end
	return true
end

----------------------------------------------------------------------
-- AroundFreePoint相关
----------------------------------------------------------------------
-- 获取P点四周为+-outCount的可以通过的点列表
---@param astarMapPath AStarMapPath
---@param basePoint Vector2
---@param outCount number
---@param canPassObstacleTypes number[]
---@param canPassTerrainTypes number[]
function AStarUtil.GetAroundFreePointList(astarMapPath, basePoint, outCount, canPassObstacleTypes, canPassTerrainTypes)
	local list = {}
	local x
	local y
	--log(basePoint.x,basePoint.y)
	local field = AStarUtil.GetField(astarMapPath:GetFinalGrids()[basePoint.x][basePoint.y]) -- 所属区块值
	local canPass = AStarUtil.IsCanPass(astarMapPath, basePoint.x, basePoint.y, canPassObstacleTypes, canPassTerrainTypes) -- 是否起始在障碍点

	y = basePoint.y - outCount -- 下边一行
	if AStarUtil.IsInRangeY(astarMapPath:GetFinalGrids(), y) then
		for x = basePoint.x - outCount, basePoint.x + outCount do
			if AStarUtil.IsInRange(astarMapPath:GetFinalGrids(), x, y)
					and (not canPass or field == AStarUtil.GetField(astarMapPath:GetFinalGrids()[x][y]))
					and AStarUtil.IsCanPass(astarMapPath, x, y, canPassObstacleTypes, canPassTerrainTypes) then
				table.insert(list, Vector2(x, y))
			end
		end
	end

	x = basePoint.x + outCount -- 右边一行
	if AStarUtil.IsInRangeX(astarMapPath:GetFinalGrids(), x) then
		for y = basePoint.y - outCount, basePoint.y + outCount do
			if AStarUtil.IsInRange(astarMapPath:GetFinalGrids(), x, y)
					and (not canPass or field == AStarUtil.GetField(astarMapPath:GetFinalGrids()[x][y]))
					and AStarUtil.IsCanPass(astarMapPath, x, y, canPassObstacleTypes, canPassTerrainTypes) then
				table.insert(list, Vector2(x, y))
			end
		end
	end

	y = basePoint.y + outCount -- 上边一行
	if AStarUtil.IsInRangeY(astarMapPath:GetFinalGrids(), y) then
		for x = basePoint.x + outCount, basePoint.x - outCount, -1 do
			if AStarUtil.IsInRange(astarMapPath:GetFinalGrids(), x, y)
					and (not canPass or field == AStarUtil.GetField(astarMapPath:GetFinalGrids()[x][y]))
					and AStarUtil.IsCanPass(astarMapPath, x, y, canPassObstacleTypes, canPassTerrainTypes) then
				table.insert(list, Vector2(x, y))
			end
		end
	end

	x = basePoint.x - outCount -- 左边一行
	if AStarUtil.IsInRangeX(astarMapPath:GetFinalGrids(), x) then
		for y = basePoint.y + outCount, basePoint.y - outCount, -1 do
			if AStarUtil.IsInRange(astarMapPath:GetFinalGrids(), x, y)
					and (not canPass or field == AStarUtil.GetField(astarMapPath:GetFinalGrids()[x][y]))
					and AStarUtil.IsCanPass(astarMapPath, x, y, canPassObstacleTypes, canPassTerrainTypes) then
				table.insert(list, Vector2(x, y))
			end
		end
	end
	return list
end

-- 获取P点四周为+-outCount（包含边界）以内的可以通过的点
---@param astarMapPath AStarMapPath
---@param basePoint Vector2
---@param outCount number
---@param exceptPointList Vector2[]
---@param canPassObstacleTypes number[]
---@param canPassTerrainTypes number[]
---@param randomManager RandomManager
function AStarUtil.FindAroundFreePoint(astarMapPath, basePoint, outCount, exceptPointList, canPassObstacleTypes, canPassTerrainTypes, randomManager)
	randomManager = randomManager or global.client.randomManager
	if not outCount then
		return AStarUtil._FindAroundFreePoint(astarMapPath, basePoint, exceptPointList, canPassObstacleTypes, canPassTerrainTypes, randomManager)
	end
	if not AStarUtil.IsInRange(astarMapPath:GetFinalGrids(), basePoint.x, basePoint.y) then
		return nil
	end
	local list = {}
	if AStarUtil.IsCanPass(astarMapPath, basePoint.x, basePoint.y, canPassObstacleTypes, canPassTerrainTypes) and (exceptPointList == nil or not table.ContainsValue(exceptPointList, basePoint)) then
		table.insert(list, basePoint)
	end
	local max = math.max(math.max(basePoint.x, astarMapPath:Width() - basePoint.x), math.max(basePoint.y, astarMapPath:Height() - basePoint.y))
	if max > outCount then
		max = outCount
	end
	for i = 1, max do
		local ls = AStarUtil.GetAroundFreePointList(astarMapPath, basePoint, i, canPassObstacleTypes, canPassTerrainTypes)
		table.AddRange_Array(list, ls)
	end
	if exceptPointList then
		table.RemoveElementsOfSub_Array(list, exceptPointList)
	end
	if #list > 0 then
		return list[randomManager:RandomInt(1, #list + 1)]
	end
	return nil
end

---@param astarMapPath AStarMapPath
---@param basePoint Vector2
---@param exceptPointList Vector2[]
---@param canPassObstacleTypes number[]
---@param canPassTerrainTypes number[]
function AStarUtil._FindAroundFreePoint(astarMapPath, basePoint, exceptPointList, canPassObstacleTypes, canPassTerrainTypes, randomManager)
	randomManager = randomManager or global.client.randomManager
	if not AStarUtil.IsInRange(astarMapPath:GetFinalGrids(), basePoint.x, basePoint.y) then
		return nil
	end
	if AStarUtil.IsCanPass(astarMapPath, basePoint.x, basePoint.y, canPassObstacleTypes, canPassTerrainTypes) and (not exceptPointList or not table.ContainsValue(exceptPointList, basePoint)) then
		return basePoint
	end
	local max = math.max(math.max(basePoint.x, astarMapPath:Width() - basePoint.x), math.max(basePoint.y, astarMapPath:Height() - basePoint.y))
	for i = 1, max do
		local list = AStarUtil.GetAroundFreePointList(astarMapPath, basePoint, i, canPassObstacleTypes, canPassTerrainTypes)
		if exceptPointList then
			table.RemoveElementsOfSub_Array(list, exceptPointList)
		end
		if #list.Count > 0 then
			return list[randomManager:RandomInt(1, #list.Count)]
		end
	end
end

----------------------------------------------------------------------
-- MostPassPoint相关
----------------------------------------------------------------------
---@param astarMapPath AStarMapPath
---@param trackList Vector2[]
---@param canPassObstacleTypes number[]
---@param canPassTerrainTypes number[]
---@param canPass boolean
function AStarUtil.GetMostPassPoint(astarMapPath, trackList, canPassObstacleTypes, canPassTerrainTypes, isCanOut)
	local lp = trackList[1]
	local tp = lp
	for i = 2, #trackList do
		local p = trackList[i]
		if not AStarUtil.IsCanPass(astarMapPath, p.x, p.y, canPassObstacleTypes, canPassTerrainTypes, isCanOut) then
			break
		end
		local directionInfo = DirectionConst.GetDirectionInfo(p.x - lp.x, p.y - lp.y)
		if directionInfo == DirectionConst.GetDirectionInfo("leftTop") then
			-- 左上角
			if not AStarUtil.IsCanPass(astarMapPath, p.x + 1, p.y, canPassObstacleTypes, canPassTerrainTypes, isCanOut) then
				break
			end
			if not AStarUtil.IsCanPass(astarMapPath, p.x, p.y - 1, canPassObstacleTypes, canPassTerrainTypes, isCanOut) then
				break
			end
		end

		if directionInfo == DirectionConst.GetDirectionInfo("rightTop") then
			-- 右上角
			if not AStarUtil.IsCanPass(astarMapPath, p.x - 1, p.y, canPassObstacleTypes, canPassTerrainTypes, isCanOut) then
				break
			end
			if not AStarUtil.IsCanPass(astarMapPath, p.x, p.y - 1, canPassObstacleTypes, canPassTerrainTypes, isCanOut) then
				break
			end
		end

		if directionInfo == DirectionConst.GetDirectionInfo("rightBottom") then
			-- 右下角
			if not AStarUtil.IsCanPass(astarMapPath, p.x - 1, p.y, canPassObstacleTypes, canPassTerrainTypes, isCanOut) then
				break
			end
			if not AStarUtil.IsCanPass(astarMapPath, p.x, p.y + 1, canPassObstacleTypes, canPassTerrainTypes, isCanOut) then
				break
			end
		end

		if directionInfo == DirectionConst.GetDirectionInfo("leftBottom") then
			-- 左下角
			if not AStarUtil.IsCanPass(astarMapPath, p.x + 1, p.y, canPassObstacleTypes, canPassTerrainTypes, isCanOut) then
				break
			end
			if not AStarUtil.IsCanPass(astarMapPath, p.x, p.y + 1, canPassObstacleTypes, canPassTerrainTypes, isCanOut) then
				break
			end
		end
		lp = p
		tp = lp
	end

	return tp
end

---@param astarMapPath AStarMapPath
---@param lp Vector2
---@param tp Vector2
---@param canPassObstacleTypes number[]
---@param canPassTerrainTypes number[]
---@param canPass boolean
function AStarUtil.GetMostLinePassPoint(astarMapPath, lp, tp, canPassObstacleTypes, canPassTerrainTypes, isCanOut)
	if not isCanOut and not AStarUtil.IsInRange(astarMapPath:GetFinalGrids(), lp.x, lp.y) then
		return lp
	end
	local pointList = AStarUtil.GetLinePointList(lp, tp)
	return AStarUtil.GetMostPassPoint(astarMapPath, pointList, canPassObstacleTypes, canPassTerrainTypes, isCanOut)
end

----------------------------------------------------------------------
-- RangeFreePoint相关
----------------------------------------------------------------------
-- 获取range范围内的可以通过的格子列表
function AStarUtil.GetRangeFreePointList(astarMapPath, x1, y1, x2, y2, exceptPointList, canPassObstacleTypes, canPassTerrainTypes)
	local list = {}
	for x = x1, x2 do
		for y = y1, y2 do
			if AStarUtil.IsInRange(astarMapPath:GetFinalGrids(), x, y) then
				local canPass = AStarUtil.IsCanPass(astarMapPath, x, y, canPassObstacleTypes, canPassTerrainTypes)
				if canPass then
					local p = Vector2(x, y)
					if not exceptPointList or not table.ContainsValue(exceptPointList, p) then
						table.insert(list, p)
					end
				end
			end
		end
	end
	return list
end


-- 获取range范围内的可以通过的格子
---@param randomManager RandomManager
function AStarUtil.FindRangeFreePoint(astarMapPath, x1, y1, x2, y2, exceptPointList, canPassObstacleTypes, canPassTerrainTypes, randomManager)
	randomManager = randomManager or global.client.randomManager
	local list = AStarUtil.GetRangeFreePointList(astarMapPath, x1, y1, x2, y2, exceptPointList, canPassObstacleTypes, canPassTerrainTypes)
	if exceptPointList then
		table.RemoveElementsOfSub_Array(list, exceptPointList)
	end
	if #list > 0 then
		return list[randomManager:RandomInt(1, #list + 1)]
	end
	return nil
end

----------------------------------------------------------------------
-- RandomMovePoint相关
----------------------------------------------------------------------
---@param randomManager RandomManager
function AStarUtil.GetRandomMovePoint(astarMapPath, basePoint, goalPoint, maxRadiusBetweenTargetPointAndGoalPoint, canPassObstacleTypes, canPassTerrainTypes, randomManager)
	randomManager = randomManager or global.client.randomManager
	local outCount = randomManager:RandomInt(AStarMapPathConst.Random_Move_Distance_Min,
			AStarMapPathConst.Random_Move_Distance_Max + 1)
	local list = AStarUtil.GetAroundFreePointList(astarMapPath, basePoint, outCount, canPassObstacleTypes, canPassTerrainTypes)
	while #list > 0 do
		local removeIndex = randomManager:RandomInt(1, #list + 1)
		local targetPoint = list[removeIndex]
		table.remove(list, removeIndex)
		if Vector2.Distance(goalPoint, targetPoint) <= maxRadiusBetweenTargetPointAndGoalPoint then
			return targetPoint
		end
	end
	return nil
end

----------------------------------------------------------------------
--
----------------------------------------------------------------------
-- 获取以centerPoint为中心，半径为radius的圆弧形格子列表
function AStarUtil.GetArcPointList(centerPoint, radius)
	local list = {}
	local left = Vector2(centerPoint.x - radius, centerPoint.y)
	local top = Vector2(centerPoint.x, centerPoint.y + radius)
	local right = Vector2(centerPoint.x + radius, centerPoint.y)
	local bottom = Vector2(centerPoint.x, centerPoint.y - radius)

	local a = left
	table.insert(list, a)
	while true do
		a = AStarUtil.GetArcFitPoint(centerPoint, a, radius, 1, 1)
		if a.x > top.x or a.y > top.y then
			break
		end
		if not table.ContainsValue(list, a) then
			table.insert(list, a)
		end
	end

	a = top
	table.insert(list, a)
	while true do
		a = AStarUtil.GetArcFitPoint(centerPoint, a, radius, 1, -1)
		if a.x > right.x or a.y < right.y then
			break
		end
		if not table.ContainsValue(list, a) then
			table.insert(list, a)
		end
	end

	a = right
	table.insert(list, a)
	while true do
		a = AStarUtil.GetArcFitPoint(centerPoint, a, radius, -1, -1)
		if a.x < bottom.x or a.y < bottom.y then
			break
		end
		if not table.ContainsValue(list, a) then
			table.insert(list, a)
		end
	end

	a = bottom
	table.insert(list, a)
	while true do
		a = AStarUtil.GetArcFitPoint(centerPoint, a, radius, -1, 1)
		if a.x < left.x or a.y > left.y then
			break
		end
		if not table.ContainsValue(list, a) then
			table.insert(list, a)
		end
	end
	return list
end

function AStarUtil.GetArcFitPoint(centerPoint, basePoint, radius, dx, dy)
	local p1 = Vector2(basePoint.x + dx, basePoint.y)
	local p2 = Vector2(basePoint.x, basePoint.y + dy)
	local p3 = Vector2(basePoint.x + dx, basePoint.y + dy)
	local d1 = Vector2.Distance(centerPoint, p1)
	local d2 = Vector2.Distance(centerPoint, p2)
	local d3 = Vector2.Distance(centerPoint, p3)
	local dd1 = math.abs(d1 - radius)
	local dd2 = math.abs(d2 - radius)
	local dd3 = math.abs(d3 - radius)
	if dd1 < dd2 then
		if dd1 < dd3 then
			return p1
		else
			return p3
		end
	else
		if dd2 < dd3 then
			return p2
		else
			return p3
		end
	end
end

-- 获取以centerPoint为中心，半径为radius的圆弧形格子列表
function AStarUtil.GetArcPointList2(centerPoint, radius)
	local list = {}
	local left = Vector2(centerPoint.x - radius, centerPoint.y)
	local top = Vector2(centerPoint.x, centerPoint.y + radius)
	local right = Vector2(centerPoint.x + radius, centerPoint.y)
	local bottom = Vector2(centerPoint.x, centerPoint.y - radius)

	local a = left
	table.insert(list, a)
	while true do
		a = AStarUtil.GetArcFitPoint2(list, centerPoint, a, radius, 1, 1)
		if a.x > top.x or a.y > top.y then
			break
		end
		if not table.ContainsValue(list, a) then
			table.insert(list, a)
		end
	end

	a = top
	table.insert(list, a)
	while true do
		a = AStarUtil.GetArcFitPoint2(list, centerPoint, a, radius, 1, -1)
		if a.x > right.x or a.y < right.y then
			break
		end
		if not table.ContainsValue(list, a) then
			table.insert(list, a)
		end
	end

	a = right
	table.insert(list, a)
	while true do
		a = AStarUtil.GetArcFitPoint2(list, centerPoint, a, radius, -1, -1)
		if a.x < bottom.x or a.y < bottom.y then
			break
		end
		if not table.ContainsValue(list, a) then
			table.insert(list, a)
		end
	end

	a = bottom
	table.insert(list, a)
	while true do
		a = AStarUtil.GetArcFitPoint2(list, centerPoint, a, radius, -1, 1)
		if a.x < left.x or a.y > left.y then
			break
		end
		if not table.ContainsValue(list, a) then
			table.insert(list, a)
		end
	end
	return list
end

function AStarUtil.GetArcFitPoint2(list, centerPoint, basePoint, radius, dx, dy)
	local p1 = Vector2(basePoint.x + dx, basePoint.y)
	local p2 = Vector2(basePoint.x, basePoint.y + dy)
	local p3 = Vector2(basePoint.x + dx, basePoint.y + dy)
	local d1 = Vector2.Distance(centerPoint, p1)
	local d2 = Vector2.Distance(centerPoint, p2)
	local d3 = Vector2.Distance(centerPoint, p3)
	if math.Round(d1) == radius and not table.ContainsValue(list, p1) then
		table.insert(list, p1)
	end
	if math.Round(d2) == radius and not table.ContainsValue(list, p2) then
		table.insert(list, p2)
	end
	if math.Round(d3) == radius and not table.ContainsValue(list, p3) then
		table.insert(list, p3)
	end

	local dd1 = math.abs(d1 - radius)
	local dd2 = math.abs(d2 - radius)
	local dd3 = math.abs(d3 - radius)
	if dd1 < dd2 then
		if dd1 < dd3 then
			return p1
		else
			return p3
		end
	else
		if dd2 < dd3 then
			return p2
		else
			return p3
		end
	end
end

-- 列出两点间连线经过的所有格子
function AStarUtil.GetLinePointList(pointA, pointB)
	local list = {}
	if pointA == pointB then
		table.insert(list, pointA)
	elseif pointA.x == pointB.x then
		table.insert(list, pointA)
		local dv = pointA.y < pointB.y and 1 or -1
		for y = (pointA.y + dv), pointB.y, dv do
			table.insert(list, Vector2(pointA.x, y))
		end
		table.insert(list, pointB)
	elseif pointA.y == pointB.y then
		table.insert(list, pointA)
		local dv = pointA.x < pointB.x and 1 or -1
		for x = (pointA.x + dv), pointB.x, dv do
			table.insert(list, Vector2(x, pointA.y))
		end
		table.insert(list, pointB)
	else
		local x1 = pointA.x
		local y1 = pointA.y
		local x2 = pointB.x
		local y2 = pointB.y
		local dx = x2 - x1
		local dy = y2 - y1
		local reverse = false
		if math.abs(dx) >= math.abs(dy) then
			if x1 > x2 then
				local t = x1
				x1 = x2
				x2 = t
				t = y1
				y1 = y2
				y2 = t

				dx = -dx
				dy = -dy
				reverse = true
			end
			local ddx = dx * 2
			local ddy = dy * 2
			if dy >= 0 then
				-- 直线的倾斜角位于 [0, pi / 4]
				local y = y1
				local e = -dx
				for x = x1, x2 do
					if reverse then
						table.insert(list, 1, Vector2(x, y))
					else
						table.insert(list, Vector2(x, y))
					end
					e = e + ddy
					if e >= 0 then
						y = y + 1
						e = e - ddx
					end
				end
			else
				local y = y1
				local e = dx
				-- 直线的倾斜角位于 [-pi / 4, 0)
				for x = x1, x2 do
					if reverse then
						table.insert(list, 1, Vector2(x, y))
					else
						table.insert(list, Vector2(x, y))
					end
					e = e + ddy
					if e <= 0 then
						y = y - 1
						e = e + ddx
					end
				end
			end
		else
			if y1 > y2 then
				local t = x1
				x1 = x2
				x2 = t
				t = y1
				y1 = y2
				y2 = t

				dx = -dx
				dy = -dy
				reverse = true
			end
			local ddx = dx * 2
			local ddy = dy * 2
			if dx >= 0 then
				local x = x1
				local e = -dy
				-- 直线的倾斜角位于 (pi / 4, pi / 2]
				for y = y1, y2 do
					if reverse then
						table.insert(list, 1, Vector2(x, y))
					else
						table.insert(list, Vector2(x, y))
					end
					e = e + ddx
					if e >= 0 then
						x = x + 1
						e = e - ddy
					end
				end
			else
				local x = x1
				local e = dy
				-- 直线的倾斜角位于 [-pi / 2, -pi / 4)
				for y = y1, y2 do
					if reverse then
						table.insert(list, 1, Vector2(x, y))
					else
						table.insert(list, Vector2(x, y))
					end
					e = e + ddx
					if e <= 0 then
						x = x - 1
						e = e + ddy
					end
				end
			end
		end
	end
	return list
end

-- 获得线段p1p2延长线上的距离d以外的某点
-- distance > 0
function AStarUtil.GetExtendPoint(pointA, pointB, distance)
	local updx = pointB.x - pointA.x
	local updy = pointB.y - pointA.y
	if updx == 0 and updy == 0 then
		-- p1==p2
		return Vector2(pointA.x + distance, pointA.y + distance)
	elseif updx == 0 then
		return Vector2(pointB.x, pointB.y + (updy > 0 and distance or -distance))
	elseif updy == 0 then
		return Vector2(pointB.x + (updx > 0 and distance or -distance), pointB.y)
	else
		local dx = math.abs(updx)
		local dy = math.abs(updy)
		if dx > dy then
			local x = pointB.x + (updx > 0 and distance or -distance)
			local y = math.modf(updy * (x - pointA.x) / updx) + pointA.y
			return Vector2(x, y)
		elseif dx < dy then
			local y = pointB.y + (updy > 0 and distance or -distance)
			local x = math.modf(updx * (y - pointA.y) / updy) + pointA.x
			return Vector2(x, y)
		else
			return Vector2(pointB.x + (updx > 0 and distance or -distance), pointB.y + (updy > 0 and distance or -distance))
		end
	end
end


-- 获得point点离线段pointA,pointB得最短距离
function AStarUtil.GetNearestDistance(pointA, pointB, point)
	if pointA == point or pointB == point then
		-- 与a点或b点重合findRangeFreePoint
		return 0
	end
	local a = AStarUtil.GetMapDistance(pointB, point)
	if pointA == pointB then
		-- a点和b点重合
		return a
	end
	local b = AStarUtil.GetMapDistance(pointA, point)
	local c = AStarUtil.GetMapDistance(pointA, pointB)
	if a * a >= b * b + c * c then
		-- 如果p点与a点内夹角是钝角，则返回b
		return b
	end
	if b * b >= a * a + c * c then
		-- 如果p点与b点内夹角是钝角，则返回a
		return a
	end

	local l = (a + b + c) / 2 -- 周长的一半
	local s = math.sqrt(l * (l - a) * (l - b) * (l - c)) -- 海伦公式求面积，也可以用矢量求
	local result = math.modf(2 * s / c)
	return result
end

function AStarUtil.GetMapDistance(pointA, pointB)
	local dx = pointA.x - pointB.x
	local dy = pointA.y - pointB.y
	local ddx = dx - dy
	local ddy = dx + dy
	local result = math.modf(math.sqrt(0.8 * ddx * ddx + 0.2 * ddy * ddy))
	return result
end

---@param pos Vector2
---@param comparePos Vector2
---@param radius number
function AStarUtil.IsInAround(pos, comparePos, radius)
	if AStarUtil.GetMapDistance(pos, comparePos) <= radius then
		return true
	end
	return false
end

---@param pos Vector2
---@param sectorCenterPos Vector2
---@param sectorDir Vector2
---@param sectorRadius number
---@param sectorHalfDegrees number
function AStarUtil.IsInSector(pos, sectorCenterPos, sectorDir, sectorRadius, sectorHalfDegrees)
	local distance = self:GetMapDistance(pos, sectorCenterPos)
	if distance > sectorRadius then
		return false
	end
	local v1 = sectorDir
	local v2 = pos - sectorCenterPos
	local degreeBetweenV1V2 = Mathf.Acos(Vector2.Dot(v1, v2) / (Vector2.Magnitude(v1) * Vector2.Magnitude(v2))) * Mathf.Rad2Deg
	if degreeBetweenV1V2 <= sectorHalfDegrees then
		return true
	end
	return false
end

----------------------------------------------------------------------
-- GUI相关
----------------------------------------------------------------------
function AStarUtil.GUIShowPointList(left, bottom, right, top, pointList)
	local offsetX = 220
	local offsetY = 100
	local rectWidth = 80
	local rectHeight = 80
	local fontStyle = CS.UnityEngine.GUIStyle()
	fontStyle.fontSize = 30 --字体大小
	if IsInstanceOf(pointList, "Vector2") then
		local t = {}
		table.insert(t, Vector2(pointList.x, pointList.y))
		pointList = t
	end
	for i = left, right do
		for j = top, bottom, -1 do
			local v = Vector2(i, j)
			local x = tostring(math.modf(v.x))
			local y = tostring(math.modf(v.y))

			local rect = CS.UnityEngine.Rect(offsetX + (i - left) * rectWidth, offsetY + (top - j) * rectHeight, rectWidth, rectHeight)
			if pointList and table.ContainsValue(pointList, v) then
				fontStyle.normal.textColor = Color.red
			else
				fontStyle.normal.textColor = Color.white
			end

			CS.UnityEngine.GUI.Label(rect, string.format("[%s,%s]", x, y), fontStyle)
		end
	end
end

----------------------------------------------------------------------
-- NearestPoint相关
----------------------------------------------------------------------
-- 获取离a,b最近的点
function AStarUtil.GetNearestPoint(astarMapPath, pointA, pointB, canPassObstacleTypes, canPassTerrainTypes)
	local p = pointA
	p = AStarUtil.GetNearestNearbyPoint(astarMapPath, pointA, pointB, canPassObstacleTypes, canPassTerrainTypes)
	while p ~= pointA do
		pointA = p
		p = AStarUtil.GetNearestNearbyPoint(astarMapPath, pointA, pointB, canPassObstacleTypes, canPassTerrainTypes)
	end
	return p
end

function AStarUtil.GetNearestNearbyPoint(astarMapPath, pointA, pointB, canPassObstacleTypes, canPassTerrainTypes)
	local dx = pointB.x > pointA.x and 1 or pointB.x < pointA.x and -1 or 0
	local dy = pointB.y > pointA.y and 1 or pointB.y < pointA.y and -1 or 0

	local minDistance = AStarUtil.GetMapDistance(pointA, pointB)
	local minPoint = pointA
	local x
	local y

	x = pointA.x + dx
	y = pointA.y
	local s1 = false
	if AStarUtil.IsInRange(astarMapPath:GetFinalGrids(), x, y) then
		local p = Vector2(x, y)
		if AStarUtil.IsCanPass(astarMapPath, x, y, canPassObstacleTypes, canPassTerrainTypes) then
			s1 = true
			local d = AStarUtil.GetMapDistance(p, pointB)
			if d < minDistance then
				minPoint = p
				minDistance = d
			end
		end
	end

	x = pointA.x
	y = pointA.y + dy
	local s2 = false
	if AStarUtil.IsInRange(astarMapPath:GetFinalGrids(), x, y) then
		local p = Vector2(x, y)
		if AStarUtil.IsCanPass(astarMapPath, x, y, canPassObstacleTypes, canPassTerrainTypes) then
			s2 = true
			local d = AStarUtil.GetMapDistance(p, pointB)
			if d < minDistance then
				minPoint = p
				minDistance = d
			end
		end
	end

	if s1 or s2 then
		x = pointA.x + dx
		y = pointA.y + dy
		if AStarUtil.IsInRange(astarMapPath:GetFinalGrids(), x, y) then
			local p = Vector2(x, y)
			if AStarUtil.IsCanPass(astarMapPath, x, y, canPassObstacleTypes, canPassTerrainTypes) then
				local d = AStarUtil.GetMapDistance(p, pointB)
				if d < minDistance then
					minPoint = p
					minDistance = d
				end
			end
		end
	end

	return minPoint
end

return AStarUtil

