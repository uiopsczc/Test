---@class HFSMState:TickObject
---@field parent_hfsm HFSM
local HFSMState = Class("HFSMState",TickObject)

function HFSMState:Init()
  HFSMState.super.Init(self)
end


function HFSMState:Enter(...)
  self:SetIsEnabled(true, false)
  self.parent_hfsm.current_sub_direct_state = self
end


function HFSMState:Exit(...)
  self:SetIsEnabled(false, false)
  self.parent_hfsm.current_sub_direct_state = nil
end

---@param to_state HFSMState
function HFSMState:IsCanChangeToState(to_state, ...)
  return true
end

function HFSMState:ExitLoopTo(to_hfsm, ...)
  self:Exit(...)
  local _hfsm = self.parent_hfsm
  while _hfsm ~= to_hfsm do
    _hfsm:Exit(...)
    _hfsm = _hfsm.parent_hfsm
  end
end

----------------------------------------------------------------------
--
----------------------------------------------------------------------
function HFSMState:GetOwner()
  return self:GetRootHFSM().owner
end


---@return HFSM
function HFSMState:GetRootHFSM()
  return self.parent_hfsm:GetRootHFSM()
end

---@return HFSM[]
function HFSMState:GetParentHFSMList()
  ---@type HFSM[]
  local list = {}
  local _hfsm = self.parent_hfsm
  table.insert(list, _hfsm)
  table.AddRange_Array(list, _hfsm:GetParentHFSMList())
  return list
end

---@param state2 HFSMState
---@return HFSM
function HFSMState:GetNearestSameParentHFSM(state2)
  if not state2 then
    return self:GetRootHFSM()
  end

 local hfsm_list1 = self:GetParentHFSMList()
 local hfsm_list2 = state2:GetParentHFSMList()

  local hfsm_deeper_list
  local hfsm_dict = {}
  if #hfsm_list1 > #hfsm_list2 then
    hfsm_deeper_list = hfsm_list1
  else
    hfsm_deeper_list = hfsm_list2
  end

  local hfsm_lower_list = hfsm_deeper_list == hfsm_list1 and hfsm_list2 or hfsm_list1
  for _, hfsm in ipairs(hfsm_lower_list) do
    hfsm_dict[hfsm] = true
  end

  for _,hfsm in ipairs(hfsm_deeper_list) do
    if hfsm_dict[hfsm] then
      return hfsm
    end
  end

  return nil
end


function HFSMState:ChangeToState(key_or_state, is_force, ...)
  self:GetRootHFSM():ChangeToState(key_or_state, is_force, ...)
end

function HFSMState:ChangeToHFSM(key, is_force, ...)
  self.GetRootHFSM():ChangeToHFSM(key, is_force, ...)
end

function HFSMState:RevertToPreviousState()
  self.GetRootHFSM():RevertToPreviousState()
end

return HFSMState