---@class CoroutineHFSM:HFSM
local CoroutineHFSM = Class("CoroutineHFSM", HFSM)

function CoroutineHFSM:IEEnter(...)
	self:Enter(...)
	self:YieldBreak()
end

function CoroutineHFSM:IEExit(...)
	self:Exit(...)
	self:YieldBreak()
end

---@param toState CoroutineHFSMState
function CoroutineHFSM:IEEnterLoopTo(toState, ...)
	---@type CoroutineHFSM[]
	local hfsmList = {}--倒序
	local curHFSM = toState.parentHFSM
	while curHFSM ~= self do
		table.insert(hfsmList, curHFSM)
		curHFSM = curHFSM.parentHFSM
	end

	for i = #hfsmList, 1, -1 do
		self:YieldStart(function(...)
			hfsmList[i]:IEEnter(...)
		end, nil, ...)
	end

	self:YieldStart(function(...)
		toState:IEEnter(...)
	end, nil, ...)

	self:YieldBreak()
end

function CoroutineHFSM:ChangeToState(toStateOrToStateKey, isForce, ...)
	self:StartCoroutine(nil, function(...)
		self:IEChangeToState(toStateOrToStateKey, isForce, ...)
	end, ...)
end

function CoroutineHFSM:IEChangeToState(toStateOrToStateKey, isForce, ...)
	local rootHFSM = self:GetRootHFSM()
	---@type CoroutineHFSMState
	local toState
	if IsString(toStateOrToStateKey) then
		-- is key
		toState = rootHFSM:GetSubState(toStateOrToStateKey, true)
	else
		-- state
		toState = toStateOrToStateKey
	end

	---@type CoroutineHFSMState
	local fromState = rootHFSM:GetCurrentState()

	if fromState == toState then
		return
	end

	if not isForce and fromState and not fromState:IsCanChangeToState(toState, ...) then
		return
	end
	---@type CoroutineHFSM
	local nearestSameParentHFSM = toState:GetNearestSameParentHFSM(fromState)
	if fromState then
		self:Broadcast(string.ToEventName(CoroutineHFSMEventNameConst.Pre_State_Exit, rootHFSM), fromState)
		self:YieldStart(function()
			fromState:IEExitLoopTo(nearestSameParentHFSM)
		end)
		self:Broadcast(string.ToEventName(CoroutineHFSMEventNameConst.Post_State_Exit, rootHFSM), fromState)
	end

	self:Broadcast(string.ToEventName(CoroutineHFSMEventNameConst.Pre_State_Enter, rootHFSM), toState)
	self:YieldStart(function(...)
		nearestSameParentHFSM:IEEnterLoopTo(toState, ...)
	end, nil, ...)

	self:Broadcast(string.ToEventName(CoroutineHFSMEventNameConst.Post_State_Enter, rootHFSM), toState)

	self.previousState = fromState
	self:Broadcast(string.ToEventName(CoroutineHFSMEventNameConst.State_Change_Finish, rootHFSM), fromState, toState)
end

return CoroutineHFSM