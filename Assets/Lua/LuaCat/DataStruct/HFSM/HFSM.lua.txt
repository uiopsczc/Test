---@class HFSM:TickObject
---@field _parentHFSM HFSM
---@field _rootHFSM HFSM
---@field _currentSubDirectState HFSMState
---@field _currentSubDirectHFSM HFSM
---@field _defaultSubDirectState HFSMState
---@field _defaultSubDirectHFSM HFSM
---@field _previousState HFSMState
local HFSM = Class("HFSM", TickObject)

---@param owner GameEntity
function HFSM:Init(owner)
	self._owner = owner
	HFSM.super.Init(self)
	---@type table<string,HFSM>
	self._subDirectHFSMDict = {}
	---@type table<string,HFSMState>
	self._subDirectStateDict = {}
	self:InitStates()
end

function HFSM:InitStates()
	--self:AddSubDirectState(XXState)
end

function HFSM:Start()
	HFSM.super.Start(self)
	if self._defaultSubDirectState then
		self:ChangeToState(self._defaultSubDirectState)
	end
	if self._defaultSubDirectHFSM then
		self:ChangeToHFSM(self._defaultSubDirectHFSM:GetKey())
	end
end

function HFSM:Enter(...)
	self:SetIsEnabled(true, false)
	if self._parentHFSM then
		self._parentHFSM:SetCurrentSubDirectHFSM(self)
	end
end

function HFSM:Exit(...)
	self:SetIsEnabled(false, false)
	if self._parentHFSM then
		self._parentHFSM:SetCurrentSubDirectHFSM(nil)
	end
end

---@param toState HFSMState
function HFSM:EnterLoopTo(toState, ...)
	---@type HFSM[]
	local hfsmList = {}--倒序
	local curHFSM = toState._parentHFSM
	while curHFSM ~= self do
		table.insert(hfsmList, curHFSM)
		curHFSM = curHFSM:GetParentHFSM()
	end

	for i = #hfsmList, 1, -1 do
		hfsmList[i]:Enter(...)
	end
	toState:Enter(...)
end

----------------------------------------------------------------------
--
----------------------------------------------------------------------
-- 回到上一个状态
function HFSM:RevertToPreviousState()
	if self:GetPreviousState() then
		self:ChangeToState(self:GetPreviousState())
	end
end

----------------------------------------------------------------------
-- SubState Add相关
----------------------------------------------------------------------
function HFSM:AddSubDirectStateWithoutInit(key, subDirectStateType)
	---@type HFSMState
	local subDirectState = self:AddChildWithoutInit(key, subDirectStateType)
	subDirectState:SetParentHFSM(self)
	self._subDirectStateDict[key] = subDirectState
	return subDirectState
end

function HFSM:AddSubDirectState(key, subDirectStateType, ...)
	local subDirectState = self:AddSubDirectStateWithoutInit(key, subDirectStateType)
	subDirectState:Init(...)
	subDirectState:PostInit()
	return subDirectState
end

----------------------------------------------------------------------
-- SubState Remove相关
----------------------------------------------------------------------
function HFSM:RemoveSubDirectState(key)
	self:RemoveChild(key)
	self._subDirectStateDict[key]:SetParent(nil)
	self._subDirectStateDict[key] = nil
end

----------------------------------------------------------------------
-- SubHFSM Add相关
----------------------------------------------------------------------
function HFSM:AddSubDirectHFSMWithoutInit(key, subDirectHFSMType)
	---@type HFSM
	local subDirectHFSM = self:AddChildWithoutInit(key, subDirectHFSMType)
	subDirectHFSM:SetParentHFSM(self)
	self._subDirectHFSMDict[key] = subDirectHFSM
	return subDirectHFSM
end

function HFSM:AddSubDirectHFSM(key, subDirectHFSMType, ...)
	local subDirectHFSM = self:AddSubDirectHFSMWithoutInit(key, subDirectHFSMType)
	subDirectHFSM:Init(...)
	subDirectHFSM:PostInit()
	return subDirectHFSM
end

----------------------------------------------------------------------
-- SubHFSM Remove相关
----------------------------------------------------------------------
function HFSM:RemoveSubDirectHFSM(key)
	self:RemoveChild(key)
	self._subDirectHFSMDict[key]._parentHFSM = nil
	self._subDirectHFSMDict[key] = nil
end

----------------------------------------------------------------------
-- ChangeToState相关
----------------------------------------------------------------------
function HFSM:ChangeToState(toStateOrToStateKey, isForce, ...)
	local rootHFSM = self:GetRootHFSM()
	---@type HFSMState
	local toState
	if IsString(toStateOrToStateKey) then
		-- is key
		toState = rootHFSM:GetSubState(toStateOrToStateKey, true)
	else
		-- state
		toState = toStateOrToStateKey
	end

	local fromState = rootHFSM:GetCurrentState()

	if fromState == toState then
		return
	end

	if not isForce and fromState and not fromState:IsCanChangeToState(toState, ...) then
		return
	end

	local nearestSameParentHFSM = toState:GetNearestSameParentHFSM(fromState)
	if fromState then
		self:Broadcast(string.ToEventName(HFSMEventNameConst.Pre_State_Exit, rootHFSM), fromState)
		fromState:ExitLoopTo(nearestSameParentHFSM)
		self:Broadcast(string.ToEventName(HFSMEventNameConst.Post_State_Exit, rootHFSM), fromState)
	end

	self:Broadcast(string.ToEventName(HFSMEventNameConst.Pre_State_Enter, rootHFSM), toState)
	nearestSameParentHFSM:EnterLoopTo(toState, ...)
	self:Broadcast(string.ToEventName(HFSMEventNameConst.Post_State_Enter, rootHFSM), toState)

	self._previousState = fromState
	self:Broadcast(string.ToEventName(HFSMEventNameConst.State_Change_Finish, rootHFSM), fromState, toState)
end

function HFSM:ChangeToHFSM(key, isForce, ...)
	local toHFSM = self:GetRootHFSM():GetSubHFSM(key, true)
	while toHFSM:GetDefaultSubDirectHFSM() do
		toHFSM = toHFSM:GetDefaultSubDirectHFSM()
	end
	local toState = toHFSM:GetDefaultSubDirectState()
	self:ChangeToState(toState, isForce, ...)
end

----------------------------------------------------------------------
-- Paused相关
----------------------------------------------------------------------
function HFSM:SetIsPaused(isPaused, isLoopChildren)
	if self:IsPaused() == isPaused then
		return
	end
	self._isPaused = isPaused
	if isLoopChildren then
		if self._currentSubDirectHFSM then
			self._currentSubDirectHFSM:SetIsPaused(isPaused, true)
		end
		if self._currentSubDirectState then
			self._currentSubDirectState:SetIsPaused(isPaused, true)
		end
	end

	self:_SetIsPaused(isPaused)
end

----------------------------------------------------------------------
-- Update相关
----------------------------------------------------------------------
function HFSM:IsCanUpdate()
	return self:IsEnabled() and HFSM.super.IsCanUpdate(self)
end

function HFSM:Update(deltaTime, unscaledDeltaTime)
	if not self:IsCanUpdate() then
		return
	end
	self:_Update(deltaTime, unscaledDeltaTime)
	for _, component in self:ForeachComponent() do
		component:Update(deltaTime, unscaledDeltaTime)
	end
	if self._currentSubDirectState then
		self._currentSubDirectState:Update(deltaTime, unscaledDeltaTime)
	end
	if self._currentSubDirectHFSM then
		self._currentSubDirectHFSM:Update(deltaTime, unscaledDeltaTime)
	end
end

function HFSM:FixedUpdate(deltaTime, unscaledDeltaTime)
	if not self:IsCanUpdate() then
		return
	end
	self:_FixedUpdate(deltaTime, unscaledDeltaTime)
	for _, component in self:ForeachComponent() do
		component:FixedUpdate(deltaTime, unscaledDeltaTime)
	end
	if self._currentSubDirectState then
		self._currentSubDirectState:FixedUpdate(deltaTime, unscaledDeltaTime)
	end
	if self._currentSubDirectHFSM then
		self._currentSubDirectHFSM:FixedUpdate(deltaTime, unscaledDeltaTime)
	end
end

function HFSM:LateUpdate(deltaTime, unscaledDeltaTime)
	if not self:IsCanUpdate() then
		return
	end
	self:_LateUpdate(deltaTime, unscaledDeltaTime)
	for _, component in self:ForeachComponent() do
		component:LateUpdate(deltaTime, unscaledDeltaTime)
	end
	if self._currentSubDirectState then
		self._currentSubDirectState:LateUpdate(deltaTime, unscaledDeltaTime)
	end
	if self._currentSubDirectHFSM then
		self._currentSubDirectHFSM:LateUpdate(deltaTime, unscaledDeltaTime)
	end
end

----------------------------------------------------------------------
-- SetGet相关
----------------------------------------------------------------------
function HFSM:GetTimerManager()
	return self:GetOwner():GetTimerManager()
end

function HFSM:GetOwner()
	return self:GetRootHFSM()._owner
end

function HFSM:SetParentHFSM(parentHFSM)
	self._parentHFSM = parentHFSM
end

function HFSM:GetParentHFSM()
	return self._parentHFSM
end

function HFSM:SetCurrentSubDirectHFSM(currentSubDirectHFSM)
	self._currentSubDirectHFSM = currentSubDirectHFSM
end

function HFSM:GetCurrentSubDirectHFSM()
	return self._currentSubDirectHFSM
end

---@return HFSMState
function HFSM:GetCurrentState()
	if self._currentSubDirectState then
		return self._currentSubDirectState
	elseif self._currentSubDirectHFSM then
		return self._currentSubDirectHFSM:GetCurrentState()
	end
	return nil
end

-- 获取上一次状态
---@return HFSMState
function HFSM:GetPreviousState()
	return self._previousState
end

---@return HFSM
function HFSM:GetRootHFSM()
	if not self._rootHFSM then
		local rootHFSM = self
		while rootHFSM:GetParentHFSM() ~= nil do
			rootHFSM = rootHFSM:GetParentHFSM()
		end
		self._rootHFSM = rootHFSM
	end
	return self._rootHFSM
end

---@return HFSM[]
function HFSM:GetParentHFSMList()
	local list = {}
	local curHFSM = self._parentHFSM
	while curHFSM do
		table.insert(list, curHFSM)
		curHFSM = curHFSM:GetParentHFSM()
	end
	return list
end

---@param isLoopSubHFSMDict boolean
---@return HFSMState
function HFSM:GetSubState(key, isLoopSubHFSMDict)
	if self._subDirectStateDict[key] ~= nil then
		return self._subDirectStateDict[key]
	end

	if isLoopSubHFSMDict == true then
		for _, subDirectHFSM in pairs(self._subDirectHFSMDict) do
			local instance = subDirectHFSM:GetSubState(key, true)
			if instance ~= nil then
				return instance
			end
		end
	end
	return nil
end

function HFSM:SetDefaultSubDirectState(key)
	---@type HFSMState
	self._defaultSubDirectState = self._subDirectStateDict[key]
end

function HFSM:SetDefaultSubDirectHFSM(key)
	---@type HFSM
	self._defaultSubDirectHFSM = self._subDirectHFSMDict[key]
end

---@param isLoopSubHFSMDict boolean
---@return HFSM
function HFSM:GetSubHFSM(key, isLoopSubHFSMDict)
	if self._subDirectHFSMDict[key] ~= nil then
		return self._subDirectHFSMDict[key]
	end

	if isLoopSubHFSMDict == true then
		for _, subDirectHFSM in pairs(self._subDirectHFSMDict) do
			local instance = subDirectHFSM:GetSubHFSM(key, true)
			if instance ~= nil then
				return instance
			end
		end
	end
	return nil
end

function HFSM:GetDefaultSubDirectHFSM()
	return self._defaultSubDirectHFSM
end

function HFSM:GetDefaultSubDirectState()
	return self._defaultSubDirectState
end

function HFSM:SetCurrentSubDirectState(currentSubDirectState)
	self._currentSubDirectState = currentSubDirectState
end




return HFSM
