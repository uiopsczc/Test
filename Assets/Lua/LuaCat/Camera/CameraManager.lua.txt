---@class CameraManager:TickObject
local CameraManager = Class("CameraManager", TickObject)

function CameraManager:Init()
	CameraManager.super.Init(self)
	---@type CameraBase[]
	self.cameraBaseList = {}

	---@type CameraBase
	self.mainCameraBase = self:AddChild("main_camera", CameraBase, GameObject.Find("Main Camera"):GetComponent(typeof(CS.UnityEngine.Camera)), true)
	-----@type CameraBase
	self.uiCameraBase = self:AddChild("ui_camera", CameraBase, GameObject.Find(UIConst.UICamera_Path):GetComponent(typeof(CS.UnityEngine.Camera)), true)
	self:AddListener(StageEventNameConst.On_Stage_Loaded, function(stage)
		self:OnStageLoaded(stage)
	end)
end

function CameraManager:OnStageLoaded(stage)
	self.cameraBaseList = {}
	local cameras = table.ConvertCSArray2LuaTable(CS.UnityEngine.Camera.allCameras)
	for i, camera in ipairs(cameras) do
		if camera ~= self.mainCameraBase.camera and camera ~= self.uiCameraBase.camera then
			local cameraBase = self:AddChild(string.format("%s%s", camera.name, i), CameraBase, camera, false)
			table.insert(self.cameraBaseList, cameraBase)
		end
	end
end

function CameraManager:RemoveCameras()
	for i = #self.cameraBaseList, 1, -1 do
		self:RemoveChild(self.cameraBaseList[i].key)
		table.remove(self.cameraBaseList, i)
	end
end

function CameraManager:MoveByDelta(dx, dy, dz)
	self.mainCameraBase:MoveByDelta(dx, dy, dz)
end

function CameraManager:SetMainCameraMoveRange(range)
	self.mainCameraBase:SetMoveRange(range)
end

function CameraManager:__Destroy()
	CameraManager.super.__Destroy(self)
end

return CameraManager