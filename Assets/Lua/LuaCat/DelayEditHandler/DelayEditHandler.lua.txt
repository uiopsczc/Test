-- 用于自身遍历时进行延迟添加删除元素（必须延迟，否则会打乱遍历时的顺序）
---@class DelayEditHandler:Class
local DelayEditHandler = Class("DelayEditHandler")

function DelayEditHandler:Init(editTarget)
	self._toCallbackArray = {}
	self._editTarget = editTarget
end

function DelayEditHandler:ToSet(key, value)
	self:ToCallback(function()
		self._editTarget[key] = value
	end)
end

-- 如果edit_target为array，则删除值在to_remove中的数据
-- 如果edit_target为dict，则删除key在to_remove中的数据
---@param toRemove @如果edit_target是array，则to_remove参数值是value;如果edit_target是dict,则to_remove参数值是key
function DelayEditHandler:ToRemove(toRemove)
	self:ToCallback(function()
		table.Remove(self._editTarget, toRemove)
	end)
end

-- edit_target 只能为array
function DelayEditHandler:ToRemoveAt(toRemoveIndex)
	self:ToCallback(function()
		table.remove(self._editTarget, toRemoveIndex)
	end)
end

function DelayEditHandler:ToRemoveAt_Stack(toRemoveIndex)
	self:ToCallback_Stack(function()
		table.remove(self._editTarget, toRemoveIndex)
	end)
end

function DelayEditHandler:ToAdd(toAddValue)
	self:ToCallback(function()
		table.Append_Array(self._editTarget, toAddValue)
	end)
end

---@param toCallback fun():void
function DelayEditHandler:ToCallback(toCallback)
	table.insert(self._toCallbackArray, toCallback)
end

-- 后入先出
---@param toCallback fun():void
function DelayEditHandler:ToCallback_Stack(toCallback)
	table.insert(self._toCallbackArray, 1, toCallback)
end

function DelayEditHandler:Handle()
	for _, v in ipairs(self._toCallbackArray) do
		v()
	end
	self:Clear()
end

function DelayEditHandler:Clear()
	table.Clear(self._toCallbackArray)
end

return DelayEditHandler