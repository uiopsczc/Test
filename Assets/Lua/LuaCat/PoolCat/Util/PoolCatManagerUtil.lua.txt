---@class PoolCatManagerUtil
local PoolCatManagerUtil = {}

---@param poolName string
---@param pool PoolCat
---@return PoolCat
function PoolCatManagerUtil.AddPool(poolName, pool)
	return global.poolCatManager:AddPool(poolName, pool)
end

---@param poolName string
function PoolCatManagerUtil.RemovePool(poolName)
	return global.poolCatManager:RemovePool(poolName)
end

---@param poolName string
---@return PoolCat
function PoolCatManagerUtil.GetPool(poolName)
	return global.poolCatManager:GetPool(poolName)
end

---@param poolName string
---@return boolean
function PoolCatManagerUtil.IsContainsPool(poolName)
	return global.poolCatManager:IsContainsPool(poolName)
end

---@param poolClassType @例如require(xxxx)
---@return PoolCat
function PoolCatManagerUtil.GetOrAddPool(poolClassType, ...)
	return global.poolCatManager:GetOrAddPool(poolClassType, ...)
end

---@param despawnObj any
---@param poolName string
function PoolCatManagerUtil.Despawn(despawnObj, poolName)
	return global.poolCatManager:Despawn(despawnObj, poolName)
end

---@param poolName string
function PoolCatManagerUtil.DespawnAll(poolName)
	return global.poolCatManager:DespawnAll(poolName)
end

---@param spawnClassType Class
---@param poolName string
---@param onSpawnCallback fun(spawn:any)
---@return any
function PoolCatManagerUtil.Spawn(spawnClassType, poolName, onSpawnCallback)
	return global.poolCatManager:Spawn(spawnClassType, poolName, onSpawnCallback)
end

---@param spawnFunc fun():any
---@param poolName string
---@param onSpawnCallback fun(spawn:any)
---@return any
function PoolCatManagerUtil.SpawnByFunc(spawnFunc, poolName, onSpawnCallback)
	return global.poolCatManager:SpawnByFunc(spawnFunc, poolName, onSpawnCallback)
end

----------------------------------------------------------------------
-- CustomPoolCat相关
----------------------------------------------------------------------
---@param poolName string
---@param spawnFunc fun():any
---@return CustomPoolCat
function PoolCatManagerUtil.AddCustomPool(poolName, spawnFunc)
	local pool = CustomPoolCat.New(poolName, spawnFunc)
	PoolCatManagerUtil.AddPool(poolName, pool)
	return pool
end

---@param poolName string
---@return CustomPoolCat
function PoolCatManagerUtil.GetCustomPool(poolName)
	return PoolCatManagerUtil.GetPool(poolName)
end

---@param poolName string
---@param spawnFunc fun():any
---@return GameObjectPoolCat
function PoolCatManagerUtil.GetOrAddCustomPool(poolName, spawnFunc)
	return PoolCatManagerUtil.GetOrAddPool(CustomPoolCat, poolName, spawnFunc)
end

---@param despawnGameObject any
function PoolCatManagerUtil.DespawnGameObject(despawnGameObject)
	---@type GameObjectPoolCat
	local pool = CacheUtil.CacheGet(despawnGameObject, PoolCatConst.Pool_Name)
	pool:Despawn(despawnGameObject)
end

----------------------------------------------------------------------
-- GameObjectPoolCat相关
----------------------------------------------------------------------
---@param poolName string
---@param prefab CS.UnityEngine.GameObject
---@param category string
---@return GameObjectPoolCat
function PoolCatManagerUtil.AddGameObjectPool(poolName, prefab, category)
	local pool
	if not prefab:IsHasComponent(typeof(RectTransform)) then
		pool = NormalGameObjectPoolCat.New(poolName, prefab, category)
	else
		pool = UIGameObjectPoolCat.New(poolName, prefab, category)
	end
	PoolCatManagerUtil.AddPool(poolName, pool)
	return pool
end

---@param poolName string
---@return GameObjectPoolCat
function PoolCatManagerUtil.GetGameObjectPool(poolName)
	return PoolCatManagerUtil.GetPool(poolName)
end

---@param poolName string
---@return GameObjectPoolCat
function PoolCatManagerUtil.GetOrAddGameObjectPool(poolName, prefab, category)
	if not PoolCatManagerUtil.IsContainsPool(poolName) then
		PoolCatManagerUtil.AddGameObjectPool(poolName, prefab, category)
	end
	return PoolCatManagerUtil.GetPool(poolName)
end


----------------------------------------------------------------------
-- UnityObjectPoolCat相关
----------------------------------------------------------------------
---@param poolName string
---@param prefab CS.UnityEngine.Object
---@param category string
---@return UnityObjectPoolCat
function PoolCatManagerUtil.AddUnityObjectPool(poolName, prefab, category)
	local pool = UnityObjectPoolCat.New(poolName, prefab, category)
	PoolCatManagerUtil.AddPool(poolName, pool)
	return pool
end

---@param poolName string
---@return UnityObjectPoolCat
function PoolCatManagerUtil.GetUnityObjectPool(poolName)
	return PoolCatManagerUtil.GetPool(poolName)
end

---@param poolName string
---@param prefab CS.UnityEngine.Object
---@param category string
---@return UnityObjectPoolCat
function PoolCatManagerUtil.GetOrAddUnityObjectPool(poolName, prefab, category)
	return PoolCatManagerUtil.GetOrAddPool(UnityObjectPoolCat, poolName, prefab, category)
end

return PoolCatManagerUtil

