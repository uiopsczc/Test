---@class PoolCat:Class
local PoolCat = Class("PoolCat")

---@param poolName string
---@param spawnClassType Class
---@param spawnFunc fun():any
function PoolCat:Init(poolName, spawnClassType, spawnFunc)
	self._poolName = poolName
	self._spawnClassType = spawnClassType
	self._spawnFunc = spawnFunc
	---@type list
	self._despawnedObjectStack = list.new()
	---@type list
	self._spawnedObjectList = list.new()
end

---@param initCount number
---@param onSpawnCallback fun(spawn:any)
function PoolCat:InitPool(initCount, onSpawnCallback)
	initCount = initCount or 1
	for i = 1, initCount, 1 do
		self:Despawn(self:Spawn(onSpawnCallback))
	end
end

function PoolCat:_Spawn()
	if self._spawnFunc then
		return self._spawnFunc()
	end
	return self._spawnClassType.NewWithoutInit()
end

---@param onSpawnCallback fun(spawn:any)
function PoolCat:Spawn(onSpawnCallback)
	local spawn

	if self._despawnedObjectStack.length > 0 then
		spawn = self._despawnedObjectStack:pop()
	else
		spawn = self:_Spawn()
	end
	if onSpawnCallback then
		onSpawnCallback(spawn)
	end
	self._spawnedObjectList:push(spawn)
	return spawn
end

---@param despawnObject any
function PoolCat:Despawn(despawnObject)
	if despawnObject == nil then
		return
	end

	if self._spawnedObjectList:find(despawnObject) == nil then
		error2(string.format("pool %s not contain: %s", self._poolName, tostring(despawnObject)))
		return
	end

	self._despawnedObjectStack:push(despawnObject)
	self._spawnedObjectList:erase(despawnObject)
	if IsTable(despawnObject) then
		if despawnObject.OnDespawn then
			despawnObject:OnDespawn()
		end
	end
end

function PoolCat:Trim()
	for _, despawnedObject in ipairs(self._despawnedObjectStack) do
		self:_Trim(despawnedObject)
	end
	self._despawnedObjectStack:clear()
end

function PoolCat:_Trim(despawnedObject)
end

function PoolCat:DespawnAll()
	local toDespawnObjectList = {}
	for _, spawnedObject in ilist(self._spawnedObjectList) do
		table.insert(toDespawnObjectList, spawnedObject)
	end
	for _, toDespawnObject in ipairs(toDespawnObjectList) do
		self:Despawn(toDespawnObject)
	end
	toDespawnObjectList = {}
end

function PoolCat:IsEmpty()
	if self._spawnedObjectList.length == 0 and self._despawnedObjectStack.length == 0 then
		return true
	end
	return false
end

function PoolCat:Destroy()
	self:DespawnAll()
	self:Trim()

	self._spawnClassType = nil
	self._poolName = nil
	self._spawnFunc = nil

	self._spawnedObjectList:clear()
	self._despawnedObjectStack:clear()
end

return PoolCat