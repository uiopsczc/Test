---@class PoolCat:Class
local PoolCat = Class("PoolCat")

---@param pool_name string
---@param spawn_class_type Class
---@param spawn_func fun():any
function PoolCat:Init(pool_name, spawn_class_type, spawn_func)
  self.pool_name = pool_name
  self.spawn_class_type = spawn_class_type
  self.spawn_func = spawn_func
  ---@type list
  self.despawned_object_stack = list.new()
  ---@type list
  self.spawned_object_list = list.new()
end

---@param init_count number
---@param on_spawn_callback fun(spawn:any)
function PoolCat:InitPool(init_count, on_spawn_callback)
  init_count = init_count or 1
  for i = 1, init_count, 1 do
    self:Despawn(self:Spawn(on_spawn_callback))
  end
end

function PoolCat:__Spawn()
  if self.spawn_func then
    return self.spawn_func()
  end
  return self.spawn_class_type.NewWithoutInit()
end

---@param on_spawn_callback fun(spawn:any)
function PoolCat:Spawn(on_spawn_callback)
  local spawn

  if self.despawned_object_stack.length > 0 then
    spawn = self.despawned_object_stack:pop()
  else
    spawn = self:__Spawn()
  end
  if on_spawn_callback then
    on_spawn_callback(spawn)
  end
  self.spawned_object_list:push(spawn)
  return spawn
end

---@param despawn_object any
function PoolCat:Despawn(despawn_object)
  if despawn_object == nil then
    return
  end

  if self.spawned_object_list:find(despawn_object) == nil then
    error2(string.format("pool %s not contian: %s",self.pool_name, tostring(despawn_object)))
    return
  end

  self.despawned_object_stack:push(despawn_object)
  self.spawned_object_list:erase(despawn_object)
  if IsTable(despawn_object) then
    if despawn_object.OnDespawn then
      despawn_object:OnDespawn()
    end
  end
end

function PoolCat:Trim()
  for _, despawned_object in ipairs(self.despawned_object_stack) do
    self:__Trim(despawned_object)
  end
  self.despawned_object_stack:clear()
end

function PoolCat:__Trim(despawned_object)
end

function PoolCat:DespawnAll()
  local to_despawn_object_list = {}
  for _,spawned_object in ilist(self.spawned_object_list) do
    table.insert(to_despawn_object_list, spawned_object)
  end
  for _, to_despawn_object in ipairs(to_despawn_object_list) do
    self:Despawn(to_despawn_object)
  end
  to_despawn_object_list = {}
end

function PoolCat:IsEmpty()
  if self.spawned_object_list.length ==0 and self.despawned_object_stack.length==0 then
    return true
  end
  return false
end

function PoolCat:Destroy()
  self:DespawnAll()
  self:Trim()

  self.spawn_class_type = nil
  self.pool_name = nil
  self.spawn_func = nil

  self.spawned_object_list:clear()
  self.despawned_object_stack:clear()
end

return PoolCat