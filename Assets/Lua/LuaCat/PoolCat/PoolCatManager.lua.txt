local PoolCat = require("luacat.poolCat.PoolCat")

---@class PoolCatManager:Class
---@field poolDict table<string,PoolCat>
local PoolCatManager = Class("PoolCatManager")

function PoolCatManager:Init()
	---@type table<string,PoolCat>
	self.poolDict = {}
end

---@param poolName string
---@param pool PoolCat
---@return PoolCat
function PoolCatManager:AddPool(poolName, pool)
	self.poolDict[poolName] = pool
	return pool
end

---@param poolName string
function PoolCatManager:RemovePool(poolName)
	if self.poolDict[poolName] then
		self.poolDict[poolName]:Destroy()
		self.poolDict[poolName] = nil
	end
end

---@param poolName string
---@return PoolCat
function PoolCatManager:GetPool(poolName)
	return self.poolDict[poolName]
end

---@param classType Class
---@return PoolCat
function PoolCatManager:GetPoolByType(classType)
	return self.poolDict[classType._className]
end

---@param poolName Class
---@return boolean
function PoolCatManager:IsContainsPool(poolName)
	return self.poolDict[poolName] ~= nil
end

---@param poolClassType Class
---@param ... @pool_construct_args
---@return PoolCat
function PoolCatManager:GetOrAddPool(poolClassType, ...)
	local poolConstructArgs = table.SafePack(...)
	local poolName = poolConstructArgs[1]
	local poolCat = table.GetOrAddDefault_Dict(self.poolDict, poolName, function()
		return poolClassType.New(table.SafeUnpack(poolConstructArgs))
	end)
	return poolCat
end

---@param despawnObject any
---@param poolName string
function PoolCatManager:Despawn(despawnObject, poolName)
	if poolName == nil then
		poolName = despawnObject._className
	end

	if self.poolDict[poolName] then
		self.poolDict[poolName]:Despawn(despawnObject)
	end
end

---@param poolName string
function PoolCatManager:DespawnAll(poolName)
	if self.poolDict[poolName] ~= nil then
		self.poolDict[poolName]:DespawnAll()
	end
end

function PoolCatManager:Trim()
	for _, pool in pairs(self.poolDict) do
		pool:Trim()
	end
end

---@param spawnClassType Class
---@param poolName string
---@param onSpawnCallback fun(spawn:any)
---@return any
function PoolCatManager:Spawn(spawnClassType, poolName, onSpawnCallback)
	local poolName = poolName or spawnClassType._className
	local pool = table.GetOrAddDefault_Dict(self.poolDict, poolName, function()
		return PoolCat.New(poolName, spawnClassType)
	end)
	local spawn = pool:Spawn(onSpawnCallback)
	return spawn
end

---@param spawnFunc fun():any
---@param poolName string
---@param onSpawnCallback fun(spawn:any)
---@return any
function PoolCatManager:SpawnByFunc(spawnFunc, poolName, onSpawnCallback)
	local pool = table.GetOrAddDefault_Dict(self.poolDict, poolName, function()
		return PoolCat.New(poolName, nil, spawnFunc)
	end)
	local spawn = pool:Spawn(onSpawnCallback)
	return spawn
end

return PoolCatManager

