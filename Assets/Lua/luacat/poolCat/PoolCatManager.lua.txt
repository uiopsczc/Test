local PoolCat = require("luacat.poolCat.PoolCat")
local UnityObjectPoolCat = require("luacat.poolCat.UnityObjectPoolCat")
local GameObjectPoolCat = require("luacat.poolCat.GameObjectPoolCat")
local CustomPoolCat = require("luacat.poolCat.CustomPoolCat")

---@class PoolCatManager:Class
---@param pool_dict table<string,PoolCat>
local PoolCatManager = Class("PoolCatManager")


function PoolCatManager:Init()
  ---@type table<string,PoolCat>
  self.pool_dict = {}
end

---@param pool_name string
---@param pool PoolCat
---@return PoolCat
function PoolCatManager:AddPool(pool_name, pool)
  self.pool_dict[pool_name] = pool
  return pool
end

---@param pool_name string
function PoolCatManager:RemovePool(pool_name)
  if self.pool_dict[pool_name] then
    self.pool_dict[pool_name]:Destroy()
    self.pool_dict[pool_name] = nil
  end
end

---@param pool_name string
---@return PoolCat
function PoolCatManager:GetPool(pool_name)
  return self.pool_dict[pool_name]
end

---@param class_type Class
---@return PoolCat
function PoolCatManager:GetPoolByType(class_type)
  return self.pool_dict[class_type.__class_name]
end

---@param pool_name Class
---@return boolean
function PoolCatManager:IsContainsPool(pool_name)
  return self.pool_dict[pool_name] ~= nil
end

---@param pool_class_type Class
---@param ... @pool_construct_args
---@return PoolCat
function PoolCatManager:GetOrAddPool(pool_class_type, ...)
  local pool_construct_args  = table.SafePack(...)
  local pool_name = pool_construct_args[1]
  local poolCat = table.GetOrAddDefault_Dict(self.pool_dict, pool_name, function()
    return pool_class_type.New(table.SafeUnpack(pool_construct_args))
  end)
  return poolCat
end

---@param despawn_object any
---@param pool_name string
function PoolCatManager:Despawn(despawn_object,pool_name)
  if pool_name == nil then
    pool_name = despawn_object.__class_name
  end

  if self.pool_dict[pool_name] then
    self.pool_dict[pool_name]:Despawn(despawn_object)
  end
end

---@param pool_name string
function PoolCatManager:DespawnAll(pool_name)
  if self.pool_dict[pool_name] ~= nil then
    self.pool_dict[pool_name]:DespawnAll()
  end
end

function PoolCatManager:Trim()
  for _, pool in pairs(self.pool_dict) do
    pool:Trim()
  end
end

---@param spawn_class_type Class
---@param on_spawn_callback fun(spawn:any)
---@return any
function PoolCatManager:Spawn(spawn_class_type, on_spawn_callback)
  local spawn_type_name = spawn_class_type.__class_name
  local pool = table.GetOrAddDefault_Dict(self.pool_dict, spawn_type_name, function()
    return PoolCat.New(spawn_type_name, spawn_class_type)
  end)
  local spawn = pool:Spawn(on_spawn_callback)
  return spawn
end









return PoolCatManager

