-- 用于自身遍历时进行延迟添加删除元素（必须延迟，否则会打乱遍历时的顺序）
---@class DelayEditHandler:Class
local DelayEditHandler = Class("DelayEditHandler")

function DelayEditHandler:Init(edit_target)
  self.to_callback_array = {}
  self.edit_target = edit_target
end

function DelayEditHandler:ToSet(key, value)
  self:ToCallback(function()
    self.edit_target[key] = value
  end)
end

-- 如果edit_target为array，则删除值在to_remove中的数据
-- 如果edit_target为dict，则删除key在to_remove中的数据
---@param to_remove @如果edit_target是array，则to_remove参数值是value;如果edit_target是dict,则to_remove参数值是key
function DelayEditHandler:ToRemove(to_remove)
  self:ToCallback( function()
    table.Remove(self.edit_target, to_remove)
  end)
end

-- edit_target 只能为array
function DelayEditHandler:ToRemoveAt(to_remove_index)
  self:ToCallback( function()
    table.remove(self.edit_target, to_remove_index)
  end)
end

function DelayEditHandler:ToRemoveAt_Stack(to_remove_index)
  self:ToCallback_Stack( function()
    table.remove(self.edit_target, to_remove_index)
  end)
end

function DelayEditHandler:ToAdd(to_add_value)
  self:ToCallback( function()
    table.Append_Array(self.edit_target, to_add_value)
  end)
end

---@param to_callback fun():void
function DelayEditHandler:ToCallback(to_callback)
  table.insert(self.to_callback_array, to_callback)
end

-- 后入先出
---@param to_callback fun():void
function DelayEditHandler:ToCallback_Stack(to_callback)
  table.insert(self.to_callback_array,1, to_callback)
end

function DelayEditHandler:Handle()
  for _, v in ipairs(self.to_callback_array) do
    v()
  end
  self:Clear()
end

function DelayEditHandler:Clear()
  table.Clear(self.to_callback_array)
end

return DelayEditHandler