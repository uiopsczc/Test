---@class AStarMapPathUtilTest
local AStarMapPathUtilTest = {}

local __grids = {
  { 1, 1, 3, 1, 1, 1 },
  { 3, 1, 1, 1, 3, 1 },
  { 3, 1, 1, 1, 1, 1 },
  { 1, 1, 1, 1, 3, 1 },
  { 1, 1, 1, 1, 1, 1 },
}
local grids = table.ToLeftBottomBaseArrays(__grids)


function AStarMapPathUtilTest.Test_BorderFindPath()
  local point_list = AStarMapPathUtil.BorderFindPath(AStarMapPath.New(grids), Vector2(1, 1), Vector2(4,4), AStarMapPathConst.Critter_Can_Pass_Obstacle_Types, AStarMapPathConst.User_Can_Pass_Terrain_Types)
  return function()
    AStarUtil.GUIShowPointList(1, 1, 9, 9, point_list)
  end
end

function AStarMapPathUtilTest.Test_DiagonallyFindPath()
  local point_list = AStarMapPathUtil.DiagonallyFindPath(AStarMapPath.New(grids), Vector2(1, 1), Vector2(4,4), AStarMapPathConst.Critter_Can_Pass_Obstacle_Types, AStarMapPathConst.User_Can_Pass_Terrain_Types)
  return function()
    AStarUtil.GUIShowPointList(1, 1, 9, 9, point_list)
  end
end

function AStarMapPathUtilTest.Test_DirectFindPath()
  local point_list = AStarMapPathUtil.DirectFindPath(AStarMapPath.New(grids), Vector2(1, 1), Vector2(4,4), AStarMapPathConst.Critter_Can_Pass_Obstacle_Types, AStarMapPathConst.User_Can_Pass_Terrain_Types)
  return function()
    AStarUtil.GUIShowPointList(1, 1, 9, 9, point_list)
  end
end

return AStarMapPathUtilTest

